

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 20 23:05:55 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 1.45
    76                           ; Generated 16/11/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16F877A Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0088                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0014                     	;# 
   191  0015                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  001D                     	;# 
   202  001E                     	;# 
   203  001F                     	;# 
   204  0081                     	;# 
   205  0085                     	;# 
   206  0086                     	;# 
   207  0087                     	;# 
   208  0088                     	;# 
   209  0089                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229                           
   230                           	psect	idataBANK0
   231  07FA                     __pidataBANK0:	
   232                           
   233                           ;initializer for _randx
   234  07FA  3401               	retlw	1
   235  07FB  3400               	retlw	0
   236  07FC  3400               	retlw	0
   237  07FD  3400               	retlw	0
   238                           
   239                           ;initializer for _acquirement
   240  07FE  3401               	retlw	1
   241                           
   242                           	psect	stringtext
   243  0100                     __pstringtext:	
   244  0100                     stringtab:	
   245  0100                     __stringtab:	
   246                           
   247                           ;	String table - string pointers are 2 bytes each
   248  0100  1BFF               	btfsc	btemp+1,7
   249  0101  290A               	ljmp	stringcode
   250  0102  1383               	bcf	3,7
   251  0103  187F               	btfsc	btemp+1,0
   252  0104  1783               	bsf	3,7
   253  0105  0800               	movf	0,w
   254  0106  0A84               	incf	4,f
   255  0107  1903               	skipnz
   256  0108  0AFF               	incf	btemp+1,f
   257  0109  0008               	return
   258  010A                     stringcode:	
   259  010A  087F               	movf	btemp+1,w
   260  010B  397F               	andlw	127
   261  010C  008A               	movwf	10
   262  010D  0804               	movf	4,w
   263  010E  0A84               	incf	4,f
   264  010F  1903               	skipnz
   265  0110  0AFF               	incf	btemp+1,f
   266  0111  0082               	movwf	2
   267  0112                     __stringbase:	
   268  0112                     __end_of__stringtab:	
   269  0112                     _dpowers:	
   270  0112  3401               	retlw	1
   271  0113  3400               	retlw	0
   272  0114  340A               	retlw	10
   273  0115  3400               	retlw	0
   274  0116  3464               	retlw	100
   275  0117  3400               	retlw	0
   276  0118  34E8               	retlw	232
   277  0119  3403               	retlw	3
   278  011A  3410               	retlw	16
   279  011B  3427               	retlw	39
   280  011C                     __end_of_dpowers:	
   281  011C                     STR_35:	
   282  011C  342A               	retlw	42	;'*'
   283  011D  342A               	retlw	42	;'*'
   284  011E  342A               	retlw	42	;'*'
   285  011F  342A               	retlw	42	;'*'
   286  0120  342A               	retlw	42	;'*'
   287  0121  342A               	retlw	42	;'*'
   288  0122  342A               	retlw	42	;'*'
   289  0123  342A               	retlw	42	;'*'
   290  0124  342A               	retlw	42	;'*'
   291  0125  342A               	retlw	42	;'*'
   292  0126  342A               	retlw	42	;'*'
   293  0127  342A               	retlw	42	;'*'
   294  0128  342A               	retlw	42	;'*'
   295  0129  342A               	retlw	42	;'*'
   296  012A  342A               	retlw	42	;'*'
   297  012B  342A               	retlw	42	;'*'
   298  012C  342A               	retlw	42	;'*'
   299  012D  342A               	retlw	42	;'*'
   300  012E  342A               	retlw	42	;'*'
   301  012F  342A               	retlw	42	;'*'
   302  0130  342A               	retlw	42	;'*'
   303  0131  342A               	retlw	42	;'*'
   304  0132  342A               	retlw	42	;'*'
   305  0133  342A               	retlw	42	;'*'
   306  0134  342A               	retlw	42	;'*'
   307  0135  342A               	retlw	42	;'*'
   308  0136  342A               	retlw	42	;'*'
   309  0137  342A               	retlw	42	;'*'
   310  0138  342A               	retlw	42	;'*'
   311  0139  342A               	retlw	42	;'*'
   312  013A  342A               	retlw	42	;'*'
   313  013B  342A               	retlw	42	;'*'
   314  013C  342A               	retlw	42	;'*'
   315  013D  342A               	retlw	42	;'*'
   316  013E  342A               	retlw	42	;'*'
   317  013F  342A               	retlw	42	;'*'
   318  0140  342A               	retlw	42	;'*'
   319  0141  342A               	retlw	42	;'*'
   320  0142  342A               	retlw	42	;'*'
   321  0143  342A               	retlw	42	;'*'
   322  0144  342A               	retlw	42	;'*'
   323  0145  342A               	retlw	42	;'*'
   324  0146  342A               	retlw	42	;'*'
   325  0147  342A               	retlw	42	;'*'
   326  0148  342A               	retlw	42	;'*'
   327  0149  342A               	retlw	42	;'*'
   328  014A  342A               	retlw	42	;'*'
   329  014B  342A               	retlw	42	;'*'
   330  014C  342A               	retlw	42	;'*'
   331  014D  342A               	retlw	42	;'*'
   332  014E  342A               	retlw	42	;'*'
   333  014F  342A               	retlw	42	;'*'
   334  0150  342A               	retlw	42	;'*'
   335  0151  342A               	retlw	42	;'*'
   336  0152  342A               	retlw	42	;'*'
   337  0153  342A               	retlw	42	;'*'
   338  0154  342A               	retlw	42	;'*'
   339  0155  342A               	retlw	42	;'*'
   340  0156  342A               	retlw	42	;'*'
   341  0157  342A               	retlw	42	;'*'
   342  0158  342A               	retlw	42	;'*'
   343  0159  342A               	retlw	42	;'*'
   344  015A  342A               	retlw	42	;'*'
   345  015B  342A               	retlw	42	;'*'
   346  015C  342A               	retlw	42	;'*'
   347  015D  342A               	retlw	42	;'*'
   348  015E  342A               	retlw	42	;'*'
   349  015F  342A               	retlw	42	;'*'
   350  0160  342A               	retlw	42	;'*'
   351  0161  342A               	retlw	42	;'*'
   352  0162  342A               	retlw	42	;'*'
   353  0163  342A               	retlw	42	;'*'
   354  0164  342A               	retlw	42	;'*'
   355  0165  342A               	retlw	42	;'*'
   356  0166  342A               	retlw	42	;'*'
   357  0167  342A               	retlw	42	;'*'
   358  0168  342A               	retlw	42	;'*'
   359  0169  342A               	retlw	42	;'*'
   360  016A  342A               	retlw	42	;'*'
   361  016B  342A               	retlw	42	;'*'
   362  016C  342A               	retlw	42	;'*'
   363  016D  342A               	retlw	42	;'*'
   364  016E  342A               	retlw	42	;'*'
   365  016F  342A               	retlw	42	;'*'
   366  0170  342A               	retlw	42	;'*'
   367  0171  342A               	retlw	42	;'*'
   368  0172  342A               	retlw	42	;'*'
   369  0173  342A               	retlw	42	;'*'
   370  0174  342A               	retlw	42	;'*'
   371  0175  342A               	retlw	42	;'*'
   372  0176  342A               	retlw	42	;'*'
   373  0177  342A               	retlw	42	;'*'
   374  0178  342A               	retlw	42	;'*'
   375  0179  3400               	retlw	0
   376  017A                     STR_6:	
   377  017A  3420               	retlw	32	;' '
   378  017B  3420               	retlw	32	;' '
   379  017C  3420               	retlw	32	;' '
   380  017D  3420               	retlw	32	;' '
   381  017E  3420               	retlw	32	;' '
   382  017F  3420               	retlw	32	;' '
   383  0180  3420               	retlw	32	;' '
   384  0181  3420               	retlw	32	;' '
   385  0182  3449               	retlw	73	;'I'
   386  0183  3466               	retlw	102	;'f'
   387  0184  3420               	retlw	32	;' '
   388  0185  3479               	retlw	121	;'y'
   389  0186  346F               	retlw	111	;'o'
   390  0187  3475               	retlw	117	;'u'
   391  0188  3420               	retlw	32	;' '
   392  0189  3477               	retlw	119	;'w'
   393  018A  3461               	retlw	97	;'a'
   394  018B  346E               	retlw	110	;'n'
   395  018C  3474               	retlw	116	;'t'
   396  018D  3420               	retlw	32	;' '
   397  018E  3467               	retlw	103	;'g'
   398  018F  3469               	retlw	105	;'i'
   399  0190  3476               	retlw	118	;'v'
   400  0191  3465               	retlw	101	;'e'
   401  0192  3420               	retlw	32	;' '
   402  0193  3461               	retlw	97	;'a'
   403  0194  3420               	retlw	32	;' '
   404  0195  3473               	retlw	115	;'s'
   405  0196  3474               	retlw	116	;'t'
   406  0197  3465               	retlw	101	;'e'
   407  0198  3470               	retlw	112	;'p'
   408  0199  3420               	retlw	32	;' '
   409  019A  3477               	retlw	119	;'w'
   410  019B  3469               	retlw	105	;'i'
   411  019C  3474               	retlw	116	;'t'
   412  019D  3468               	retlw	104	;'h'
   413  019E  3420               	retlw	32	;' '
   414  019F  3431               	retlw	49	;'1'
   415  01A0  3430               	retlw	48	;'0'
   416  01A1  3430               	retlw	48	;'0'
   417  01A2  3425               	retlw	37	;'%'
   418  01A3  3420               	retlw	32	;' '
   419  01A4  346F               	retlw	111	;'o'
   420  01A5  3466               	retlw	102	;'f'
   421  01A6  3420               	retlw	32	;' '
   422  01A7  3464               	retlw	100	;'d'
   423  01A8  3475               	retlw	117	;'u'
   424  01A9  3474               	retlw	116	;'t'
   425  01AA  3479               	retlw	121	;'y'
   426  01AB  342D               	retlw	45	;'-'
   427  01AC  3463               	retlw	99	;'c'
   428  01AD  3479               	retlw	121	;'y'
   429  01AE  3463               	retlw	99	;'c'
   430  01AF  346C               	retlw	108	;'l'
   431  01B0  3465               	retlw	101	;'e'
   432  01B1  342C               	retlw	44	;','
   433  01B2  3420               	retlw	32	;' '
   434  01B3  3475               	retlw	117	;'u'
   435  01B4  346E               	retlw	110	;'n'
   436  01B5  3474               	retlw	116	;'t'
   437  01B6  3469               	retlw	105	;'i'
   438  01B7  346C               	retlw	108	;'l'
   439  01B8  3420               	retlw	32	;' '
   440  01B9  3479               	retlw	121	;'y'
   441  01BA  346F               	retlw	111	;'o'
   442  01BB  3475               	retlw	117	;'u'
   443  01BC  3420               	retlw	32	;' '
   444  01BD  3474               	retlw	116	;'t'
   445  01BE  3479               	retlw	121	;'y'
   446  01BF  3470               	retlw	112	;'p'
   447  01C0  3465               	retlw	101	;'e'
   448  01C1  3420               	retlw	32	;' '
   449  01C2  3461               	retlw	97	;'a'
   450  01C3  346E               	retlw	110	;'n'
   451  01C4  3479               	retlw	121	;'y'
   452  01C5  3474               	retlw	116	;'t'
   453  01C6  3468               	retlw	104	;'h'
   454  01C7  3469               	retlw	105	;'i'
   455  01C8  346E               	retlw	110	;'n'
   456  01C9  3467               	retlw	103	;'g'
   457  01CA  342C               	retlw	44	;','
   458  01CB  3420               	retlw	32	;' '
   459  01CC  3474               	retlw	116	;'t'
   460  01CD  3479               	retlw	121	;'y'
   461  01CE  3470               	retlw	112	;'p'
   462  01CF  3465               	retlw	101	;'e'
   463  01D0  343A               	retlw	58	;':'
   464  01D1  3400               	retlw	0
   465  01D2                     STR_9:	
   466  01D2  3420               	retlw	32	;' '
   467  01D3  3420               	retlw	32	;' '
   468  01D4  3420               	retlw	32	;' '
   469  01D5  3420               	retlw	32	;' '
   470  01D6  3420               	retlw	32	;' '
   471  01D7  3420               	retlw	32	;' '
   472  01D8  3420               	retlw	32	;' '
   473  01D9  3420               	retlw	32	;' '
   474  01DA  3449               	retlw	73	;'I'
   475  01DB  3466               	retlw	102	;'f'
   476  01DC  3420               	retlw	32	;' '
   477  01DD  3479               	retlw	121	;'y'
   478  01DE  346F               	retlw	111	;'o'
   479  01DF  3475               	retlw	117	;'u'
   480  01E0  3420               	retlw	32	;' '
   481  01E1  3477               	retlw	119	;'w'
   482  01E2  3461               	retlw	97	;'a'
   483  01E3  346E               	retlw	110	;'n'
   484  01E4  3474               	retlw	116	;'t'
   485  01E5  3420               	retlw	32	;' '
   486  01E6  3467               	retlw	103	;'g'
   487  01E7  3469               	retlw	105	;'i'
   488  01E8  3476               	retlw	118	;'v'
   489  01E9  3465               	retlw	101	;'e'
   490  01EA  3420               	retlw	32	;' '
   491  01EB  3461               	retlw	97	;'a'
   492  01EC  3420               	retlw	32	;' '
   493  01ED  3473               	retlw	115	;'s'
   494  01EE  3474               	retlw	116	;'t'
   495  01EF  3465               	retlw	101	;'e'
   496  01F0  3470               	retlw	112	;'p'
   497  01F1  3420               	retlw	32	;' '
   498  01F2  3477               	retlw	119	;'w'
   499  01F3  3469               	retlw	105	;'i'
   500  01F4  3474               	retlw	116	;'t'
   501  01F5  3468               	retlw	104	;'h'
   502  01F6  3420               	retlw	32	;' '
   503  01F7  3431               	retlw	49	;'1'
   504  01F8  3430               	retlw	48	;'0'
   505  01F9  3430               	retlw	48	;'0'
   506  01FA  3425               	retlw	37	;'%'
   507  01FB  3420               	retlw	32	;' '
   508  01FC  346F               	retlw	111	;'o'
   509  01FD  3466               	retlw	102	;'f'
   510  01FE  3420               	retlw	32	;' '
   511  01FF  3464               	retlw	100	;'d'
   512  0200  3475               	retlw	117	;'u'
   513  0201  3474               	retlw	116	;'t'
   514  0202  3479               	retlw	121	;'y'
   515  0203  342D               	retlw	45	;'-'
   516  0204  3463               	retlw	99	;'c'
   517  0205  3479               	retlw	121	;'y'
   518  0206  3463               	retlw	99	;'c'
   519  0207  346C               	retlw	108	;'l'
   520  0208  3465               	retlw	101	;'e'
   521  0209  342C               	retlw	44	;','
   522  020A  3420               	retlw	32	;' '
   523  020B  3466               	retlw	102	;'f'
   524  020C  346F               	retlw	111	;'o'
   525  020D  3472               	retlw	114	;'r'
   526  020E  3420               	retlw	32	;' '
   527  020F  3432               	retlw	50	;'2'
   528  0210  3430               	retlw	48	;'0'
   529  0211  3430               	retlw	48	;'0'
   530  0212  3420               	retlw	32	;' '
   531  0213  346D               	retlw	109	;'m'
   532  0214  3469               	retlw	105	;'i'
   533  0215  346C               	retlw	108	;'l'
   534  0216  346C               	retlw	108	;'l'
   535  0217  3469               	retlw	105	;'i'
   536  0218  3473               	retlw	115	;'s'
   537  0219  3465               	retlw	101	;'e'
   538  021A  3463               	retlw	99	;'c'
   539  021B  346F               	retlw	111	;'o'
   540  021C  346E               	retlw	110	;'n'
   541  021D  3464               	retlw	100	;'d'
   542  021E  3473               	retlw	115	;'s'
   543  021F  342C               	retlw	44	;','
   544  0220  3420               	retlw	32	;' '
   545  0221  3474               	retlw	116	;'t'
   546  0222  3479               	retlw	121	;'y'
   547  0223  3470               	retlw	112	;'p'
   548  0224  3465               	retlw	101	;'e'
   549  0225  343A               	retlw	58	;':'
   550  0226  3400               	retlw	0
   551  0227                     STR_12:	
   552  0227  3420               	retlw	32	;' '
   553  0228  3420               	retlw	32	;' '
   554  0229  3420               	retlw	32	;' '
   555  022A  3420               	retlw	32	;' '
   556  022B  3420               	retlw	32	;' '
   557  022C  3420               	retlw	32	;' '
   558  022D  3420               	retlw	32	;' '
   559  022E  3420               	retlw	32	;' '
   560  022F  3449               	retlw	73	;'I'
   561  0230  3466               	retlw	102	;'f'
   562  0231  3420               	retlw	32	;' '
   563  0232  3479               	retlw	121	;'y'
   564  0233  346F               	retlw	111	;'o'
   565  0234  3475               	retlw	117	;'u'
   566  0235  3420               	retlw	32	;' '
   567  0236  3477               	retlw	119	;'w'
   568  0237  3461               	retlw	97	;'a'
   569  0238  346E               	retlw	110	;'n'
   570  0239  3474               	retlw	116	;'t'
   571  023A  3420               	retlw	32	;' '
   572  023B  3467               	retlw	103	;'g'
   573  023C  3469               	retlw	105	;'i'
   574  023D  3476               	retlw	118	;'v'
   575  023E  3465               	retlw	101	;'e'
   576  023F  3420               	retlw	32	;' '
   577  0240  3461               	retlw	97	;'a'
   578  0241  3420               	retlw	32	;' '
   579  0242  3473               	retlw	115	;'s'
   580  0243  3474               	retlw	116	;'t'
   581  0244  3465               	retlw	101	;'e'
   582  0245  3470               	retlw	112	;'p'
   583  0246  3420               	retlw	32	;' '
   584  0247  3477               	retlw	119	;'w'
   585  0248  3469               	retlw	105	;'i'
   586  0249  3474               	retlw	116	;'t'
   587  024A  3468               	retlw	104	;'h'
   588  024B  3420               	retlw	32	;' '
   589  024C  3435               	retlw	53	;'5'
   590  024D  3430               	retlw	48	;'0'
   591  024E  3425               	retlw	37	;'%'
   592  024F  3420               	retlw	32	;' '
   593  0250  346F               	retlw	111	;'o'
   594  0251  3466               	retlw	102	;'f'
   595  0252  3420               	retlw	32	;' '
   596  0253  3464               	retlw	100	;'d'
   597  0254  3475               	retlw	117	;'u'
   598  0255  3474               	retlw	116	;'t'
   599  0256  3479               	retlw	121	;'y'
   600  0257  342D               	retlw	45	;'-'
   601  0258  3463               	retlw	99	;'c'
   602  0259  3479               	retlw	121	;'y'
   603  025A  3463               	retlw	99	;'c'
   604  025B  346C               	retlw	108	;'l'
   605  025C  3465               	retlw	101	;'e'
   606  025D  342C               	retlw	44	;','
   607  025E  3466               	retlw	102	;'f'
   608  025F  346F               	retlw	111	;'o'
   609  0260  3472               	retlw	114	;'r'
   610  0261  3420               	retlw	32	;' '
   611  0262  3433               	retlw	51	;'3'
   612  0263  3430               	retlw	48	;'0'
   613  0264  3430               	retlw	48	;'0'
   614  0265  3420               	retlw	32	;' '
   615  0266  346D               	retlw	109	;'m'
   616  0267  3469               	retlw	105	;'i'
   617  0268  346C               	retlw	108	;'l'
   618  0269  346C               	retlw	108	;'l'
   619  026A  3469               	retlw	105	;'i'
   620  026B  3473               	retlw	115	;'s'
   621  026C  3465               	retlw	101	;'e'
   622  026D  3463               	retlw	99	;'c'
   623  026E  346F               	retlw	111	;'o'
   624  026F  346E               	retlw	110	;'n'
   625  0270  3464               	retlw	100	;'d'
   626  0271  3473               	retlw	115	;'s'
   627  0272  342C               	retlw	44	;','
   628  0273  3420               	retlw	32	;' '
   629  0274  3474               	retlw	116	;'t'
   630  0275  3479               	retlw	121	;'y'
   631  0276  3470               	retlw	112	;'p'
   632  0277  3465               	retlw	101	;'e'
   633  0278  343A               	retlw	58	;':'
   634  0279  3400               	retlw	0
   635  027A                     STR_15:	
   636  027A  3420               	retlw	32	;' '
   637  027B  3420               	retlw	32	;' '
   638  027C  3420               	retlw	32	;' '
   639  027D  3420               	retlw	32	;' '
   640  027E  3420               	retlw	32	;' '
   641  027F  3420               	retlw	32	;' '
   642  0280  3420               	retlw	32	;' '
   643  0281  3420               	retlw	32	;' '
   644  0282  3449               	retlw	73	;'I'
   645  0283  3466               	retlw	102	;'f'
   646  0284  3420               	retlw	32	;' '
   647  0285  3479               	retlw	121	;'y'
   648  0286  346F               	retlw	111	;'o'
   649  0287  3475               	retlw	117	;'u'
   650  0288  3420               	retlw	32	;' '
   651  0289  3477               	retlw	119	;'w'
   652  028A  3461               	retlw	97	;'a'
   653  028B  346E               	retlw	110	;'n'
   654  028C  3474               	retlw	116	;'t'
   655  028D  3420               	retlw	32	;' '
   656  028E  346F               	retlw	111	;'o'
   657  028F  3470               	retlw	112	;'p'
   658  0290  3465               	retlw	101	;'e'
   659  0291  3472               	retlw	114	;'r'
   660  0292  3461               	retlw	97	;'a'
   661  0293  3474               	retlw	116	;'t'
   662  0294  3465               	retlw	101	;'e'
   663  0295  3420               	retlw	32	;' '
   664  0296  3474               	retlw	116	;'t'
   665  0297  3468               	retlw	104	;'h'
   666  0298  3465               	retlw	101	;'e'
   667  0299  3420               	retlw	32	;' '
   668  029A  3473               	retlw	115	;'s'
   669  029B  3479               	retlw	121	;'y'
   670  029C  3473               	retlw	115	;'s'
   671  029D  3474               	retlw	116	;'t'
   672  029E  3465               	retlw	101	;'e'
   673  029F  346D               	retlw	109	;'m'
   674  02A0  3420               	retlw	32	;' '
   675  02A1  3463               	retlw	99	;'c'
   676  02A2  346F               	retlw	111	;'o'
   677  02A3  346E               	retlw	110	;'n'
   678  02A4  3474               	retlw	116	;'t'
   679  02A5  3469               	retlw	105	;'i'
   680  02A6  346E               	retlw	110	;'n'
   681  02A7  3475               	retlw	117	;'u'
   682  02A8  3461               	retlw	97	;'a'
   683  02A9  346C               	retlw	108	;'l'
   684  02AA  346C               	retlw	108	;'l'
   685  02AB  3479               	retlw	121	;'y'
   686  02AC  3420               	retlw	32	;' '
   687  02AD  3477               	retlw	119	;'w'
   688  02AE  3469               	retlw	105	;'i'
   689  02AF  3474               	retlw	116	;'t'
   690  02B0  3468               	retlw	104	;'h'
   691  02B1  3420               	retlw	32	;' '
   692  02B2  3431               	retlw	49	;'1'
   693  02B3  3430               	retlw	48	;'0'
   694  02B4  3430               	retlw	48	;'0'
   695  02B5  3425               	retlw	37	;'%'
   696  02B6  3420               	retlw	32	;' '
   697  02B7  346F               	retlw	111	;'o'
   698  02B8  3466               	retlw	102	;'f'
   699  02B9  3420               	retlw	32	;' '
   700  02BA  3464               	retlw	100	;'d'
   701  02BB  3475               	retlw	117	;'u'
   702  02BC  3474               	retlw	116	;'t'
   703  02BD  3479               	retlw	121	;'y'
   704  02BE  342D               	retlw	45	;'-'
   705  02BF  3463               	retlw	99	;'c'
   706  02C0  3479               	retlw	121	;'y'
   707  02C1  3463               	retlw	99	;'c'
   708  02C2  346C               	retlw	108	;'l'
   709  02C3  3465               	retlw	101	;'e'
   710  02C4  342C               	retlw	44	;','
   711  02C5  3420               	retlw	32	;' '
   712  02C6  3474               	retlw	116	;'t'
   713  02C7  3479               	retlw	121	;'y'
   714  02C8  3470               	retlw	112	;'p'
   715  02C9  3465               	retlw	101	;'e'
   716  02CA  343A               	retlw	58	;':'
   717  02CB  3400               	retlw	0
   718  02CC                     STR_27:	
   719  02CC  3420               	retlw	32	;' '
   720  02CD  3420               	retlw	32	;' '
   721  02CE  3420               	retlw	32	;' '
   722  02CF  3420               	retlw	32	;' '
   723  02D0  3420               	retlw	32	;' '
   724  02D1  3420               	retlw	32	;' '
   725  02D2  3420               	retlw	32	;' '
   726  02D3  3420               	retlw	32	;' '
   727  02D4  3449               	retlw	73	;'I'
   728  02D5  3466               	retlw	102	;'f'
   729  02D6  3420               	retlw	32	;' '
   730  02D7  3479               	retlw	121	;'y'
   731  02D8  346F               	retlw	111	;'o'
   732  02D9  3475               	retlw	117	;'u'
   733  02DA  3420               	retlw	32	;' '
   734  02DB  3477               	retlw	119	;'w'
   735  02DC  3461               	retlw	97	;'a'
   736  02DD  346E               	retlw	110	;'n'
   737  02DE  3474               	retlw	116	;'t'
   738  02DF  3420               	retlw	32	;' '
   739  02E0  3461               	retlw	97	;'a'
   740  02E1  3463               	retlw	99	;'c'
   741  02E2  3471               	retlw	113	;'q'
   742  02E3  3475               	retlw	117	;'u'
   743  02E4  3469               	retlw	105	;'i'
   744  02E5  3472               	retlw	114	;'r'
   745  02E6  3465               	retlw	101	;'e'
   746  02E7  3420               	retlw	32	;' '
   747  02E8  3474               	retlw	116	;'t'
   748  02E9  3468               	retlw	104	;'h'
   749  02EA  3465               	retlw	101	;'e'
   750  02EB  3420               	retlw	32	;' '
   751  02EC  3464               	retlw	100	;'d'
   752  02ED  3461               	retlw	97	;'a'
   753  02EE  3474               	retlw	116	;'t'
   754  02EF  3461               	retlw	97	;'a'
   755  02F0  3420               	retlw	32	;' '
   756  02F1  346F               	retlw	111	;'o'
   757  02F2  3462               	retlw	98	;'b'
   758  02F3  3474               	retlw	116	;'t'
   759  02F4  3461               	retlw	97	;'a'
   760  02F5  3469               	retlw	105	;'i'
   761  02F6  346E               	retlw	110	;'n'
   762  02F7  3465               	retlw	101	;'e'
   763  02F8  3464               	retlw	100	;'d'
   764  02F9  3420               	retlw	32	;' '
   765  02FA  3462               	retlw	98	;'b'
   766  02FB  3479               	retlw	121	;'y'
   767  02FC  3420               	retlw	32	;' '
   768  02FD  3473               	retlw	115	;'s'
   769  02FE  3465               	retlw	101	;'e'
   770  02FF  346E               	retlw	110	;'n'
   771  0300  3473               	retlw	115	;'s'
   772  0301  346F               	retlw	111	;'o'
   773  0302  3472               	retlw	114	;'r'
   774  0303  3473               	retlw	115	;'s'
   775  0304  3420               	retlw	32	;' '
   776  0305  346F               	retlw	111	;'o'
   777  0306  3466               	retlw	102	;'f'
   778  0307  3420               	retlw	32	;' '
   779  0308  3473               	retlw	115	;'s'
   780  0309  3479               	retlw	121	;'y'
   781  030A  3473               	retlw	115	;'s'
   782  030B  3474               	retlw	116	;'t'
   783  030C  3465               	retlw	101	;'e'
   784  030D  346D               	retlw	109	;'m'
   785  030E  342C               	retlw	44	;','
   786  030F  3420               	retlw	32	;' '
   787  0310  3474               	retlw	116	;'t'
   788  0311  3479               	retlw	121	;'y'
   789  0312  3470               	retlw	112	;'p'
   790  0313  3465               	retlw	101	;'e'
   791  0314  343A               	retlw	58	;':'
   792  0315  3400               	retlw	0
   793  0316                     STR_18:	
   794  0316  3420               	retlw	32	;' '
   795  0317  3420               	retlw	32	;' '
   796  0318  3420               	retlw	32	;' '
   797  0319  3420               	retlw	32	;' '
   798  031A  3420               	retlw	32	;' '
   799  031B  3420               	retlw	32	;' '
   800  031C  3420               	retlw	32	;' '
   801  031D  3420               	retlw	32	;' '
   802  031E  3449               	retlw	73	;'I'
   803  031F  3466               	retlw	102	;'f'
   804  0320  3420               	retlw	32	;' '
   805  0321  3479               	retlw	121	;'y'
   806  0322  346F               	retlw	111	;'o'
   807  0323  3475               	retlw	117	;'u'
   808  0324  3420               	retlw	32	;' '
   809  0325  3477               	retlw	119	;'w'
   810  0326  3461               	retlw	97	;'a'
   811  0327  346E               	retlw	110	;'n'
   812  0328  3474               	retlw	116	;'t'
   813  0329  3420               	retlw	32	;' '
   814  032A  3474               	retlw	116	;'t'
   815  032B  346F               	retlw	111	;'o'
   816  032C  3420               	retlw	32	;' '
   817  032D  3469               	retlw	105	;'i'
   818  032E  3464               	retlw	100	;'d'
   819  032F  3465               	retlw	101	;'e'
   820  0330  346E               	retlw	110	;'n'
   821  0331  3474               	retlw	116	;'t'
   822  0332  3469               	retlw	105	;'i'
   823  0333  3466               	retlw	102	;'f'
   824  0334  3479               	retlw	121	;'y'
   825  0335  3420               	retlw	32	;' '
   826  0336  3474               	retlw	116	;'t'
   827  0337  3468               	retlw	104	;'h'
   828  0338  3465               	retlw	101	;'e'
   829  0339  3420               	retlw	32	;' '
   830  033A  3473               	retlw	115	;'s'
   831  033B  3479               	retlw	121	;'y'
   832  033C  3473               	retlw	115	;'s'
   833  033D  3474               	retlw	116	;'t'
   834  033E  3465               	retlw	101	;'e'
   835  033F  346D               	retlw	109	;'m'
   836  0340  3420               	retlw	32	;' '
   837  0341  3470               	retlw	112	;'p'
   838  0342  3461               	retlw	97	;'a'
   839  0343  3472               	retlw	114	;'r'
   840  0344  3473               	retlw	115	;'s'
   841  0345  3469               	retlw	105	;'i'
   842  0346  346E               	retlw	110	;'n'
   843  0347  3467               	retlw	103	;'g'
   844  0348  3420               	retlw	32	;' '
   845  0349  3461               	retlw	97	;'a'
   846  034A  3420               	retlw	32	;' '
   847  034B  3452               	retlw	82	;'R'
   848  034C  3442               	retlw	66	;'B'
   849  034D  3453               	retlw	83	;'S'
   850  034E  3420               	retlw	32	;' '
   851  034F  3473               	retlw	115	;'s'
   852  0350  3469               	retlw	105	;'i'
   853  0351  346E               	retlw	110	;'n'
   854  0352  3461               	retlw	97	;'a'
   855  0353  346C               	retlw	108	;'l'
   856  0354  342C               	retlw	44	;','
   857  0355  3420               	retlw	32	;' '
   858  0356  3474               	retlw	116	;'t'
   859  0357  3479               	retlw	121	;'y'
   860  0358  3470               	retlw	112	;'p'
   861  0359  3465               	retlw	101	;'e'
   862  035A  343A               	retlw	58	;':'
   863  035B  3400               	retlw	0
   864  035C                     STR_4:	
   865  035C  3420               	retlw	32	;' '
   866  035D  3420               	retlw	32	;' '
   867  035E  3420               	retlw	32	;' '
   868  035F  3420               	retlw	32	;' '
   869  0360  3420               	retlw	32	;' '
   870  0361  3420               	retlw	32	;' '
   871  0362  3420               	retlw	32	;' '
   872  0363  3420               	retlw	32	;' '
   873  0364  3454               	retlw	84	;'T'
   874  0365  346F               	retlw	111	;'o'
   875  0366  3420               	retlw	32	;' '
   876  0367  346F               	retlw	111	;'o'
   877  0368  3470               	retlw	112	;'p'
   878  0369  3465               	retlw	101	;'e'
   879  036A  3472               	retlw	114	;'r'
   880  036B  3461               	retlw	97	;'a'
   881  036C  3474               	retlw	116	;'t'
   882  036D  3465               	retlw	101	;'e'
   883  036E  3420               	retlw	32	;' '
   884  036F  3474               	retlw	116	;'t'
   885  0370  3468               	retlw	104	;'h'
   886  0371  3465               	retlw	101	;'e'
   887  0372  3420               	retlw	32	;' '
   888  0373  3473               	retlw	115	;'s'
   889  0374  3479               	retlw	121	;'y'
   890  0375  3473               	retlw	115	;'s'
   891  0376  3474               	retlw	116	;'t'
   892  0377  3465               	retlw	101	;'e'
   893  0378  346D               	retlw	109	;'m'
   894  0379  342C               	retlw	44	;','
   895  037A  3420               	retlw	32	;' '
   896  037B  3474               	retlw	116	;'t'
   897  037C  3479               	retlw	121	;'y'
   898  037D  3470               	retlw	112	;'p'
   899  037E  3465               	retlw	101	;'e'
   900  037F  3420               	retlw	32	;' '
   901  0380  346F               	retlw	111	;'o'
   902  0381  346E               	retlw	110	;'n'
   903  0382  3420               	retlw	32	;' '
   904  0383  346F               	retlw	111	;'o'
   905  0384  3470               	retlw	112	;'p'
   906  0385  3474               	retlw	116	;'t'
   907  0386  3469               	retlw	105	;'i'
   908  0387  346F               	retlw	111	;'o'
   909  0388  346E               	retlw	110	;'n'
   910  0389  3473               	retlw	115	;'s'
   911  038A  3420               	retlw	32	;' '
   912  038B  3469               	retlw	105	;'i'
   913  038C  346E               	retlw	110	;'n'
   914  038D  3420               	retlw	32	;' '
   915  038E  3462               	retlw	98	;'b'
   916  038F  3465               	retlw	101	;'e'
   917  0390  346C               	retlw	108	;'l'
   918  0391  346F               	retlw	111	;'o'
   919  0392  3477               	retlw	119	;'w'
   920  0393  342E               	retlw	46	;'.'
   921  0394  3400               	retlw	0
   922  0395                     STR_30:	
   923  0395  3420               	retlw	32	;' '
   924  0396  3420               	retlw	32	;' '
   925  0397  3420               	retlw	32	;' '
   926  0398  3420               	retlw	32	;' '
   927  0399  3420               	retlw	32	;' '
   928  039A  3420               	retlw	32	;' '
   929  039B  3420               	retlw	32	;' '
   930  039C  3420               	retlw	32	;' '
   931  039D  3449               	retlw	73	;'I'
   932  039E  3466               	retlw	102	;'f'
   933  039F  3420               	retlw	32	;' '
   934  03A0  3479               	retlw	121	;'y'
   935  03A1  346F               	retlw	111	;'o'
   936  03A2  3475               	retlw	117	;'u'
   937  03A3  3420               	retlw	32	;' '
   938  03A4  3477               	retlw	119	;'w'
   939  03A5  3461               	retlw	97	;'a'
   940  03A6  346E               	retlw	110	;'n'
   941  03A7  3474               	retlw	116	;'t'
   942  03A8  3420               	retlw	32	;' '
   943  03A9  3474               	retlw	116	;'t'
   944  03AA  346F               	retlw	111	;'o'
   945  03AB  3420               	retlw	32	;' '
   946  03AC  346B               	retlw	107	;'k'
   947  03AD  346E               	retlw	110	;'n'
   948  03AE  346F               	retlw	111	;'o'
   949  03AF  3477               	retlw	119	;'w'
   950  03B0  3420               	retlw	32	;' '
   951  03B1  3474               	retlw	116	;'t'
   952  03B2  3468               	retlw	104	;'h'
   953  03B3  3465               	retlw	101	;'e'
   954  03B4  3420               	retlw	32	;' '
   955  03B5  3473               	retlw	115	;'s'
   956  03B6  3474               	retlw	116	;'t'
   957  03B7  3461               	retlw	97	;'a'
   958  03B8  3474               	retlw	116	;'t'
   959  03B9  3475               	retlw	117	;'u'
   960  03BA  3473               	retlw	115	;'s'
   961  03BB  3420               	retlw	32	;' '
   962  03BC  346F               	retlw	111	;'o'
   963  03BD  3466               	retlw	102	;'f'
   964  03BE  3420               	retlw	32	;' '
   965  03BF  3473               	retlw	115	;'s'
   966  03C0  3479               	retlw	121	;'y'
   967  03C1  3473               	retlw	115	;'s'
   968  03C2  3474               	retlw	116	;'t'
   969  03C3  3465               	retlw	101	;'e'
   970  03C4  346D               	retlw	109	;'m'
   971  03C5  342C               	retlw	44	;','
   972  03C6  3420               	retlw	32	;' '
   973  03C7  3474               	retlw	116	;'t'
   974  03C8  3479               	retlw	121	;'y'
   975  03C9  3470               	retlw	112	;'p'
   976  03CA  3465               	retlw	101	;'e'
   977  03CB  343A               	retlw	58	;':'
   978  03CC  3400               	retlw	0
   979  03CD                     STR_3:	
   980  03CD  3420               	retlw	32	;' '
   981  03CE  3420               	retlw	32	;' '
   982  03CF  3420               	retlw	32	;' '
   983  03D0  3420               	retlw	32	;' '
   984  03D1  3420               	retlw	32	;' '
   985  03D2  3420               	retlw	32	;' '
   986  03D3  3420               	retlw	32	;' '
   987  03D4  3420               	retlw	32	;' '
   988  03D5  3457               	retlw	87	;'W'
   989  03D6  3465               	retlw	101	;'e'
   990  03D7  346C               	retlw	108	;'l'
   991  03D8  3463               	retlw	99	;'c'
   992  03D9  346F               	retlw	111	;'o'
   993  03DA  346D               	retlw	109	;'m'
   994  03DB  3465               	retlw	101	;'e'
   995  03DC  3420               	retlw	32	;' '
   996  03DD  3474               	retlw	116	;'t'
   997  03DE  346F               	retlw	111	;'o'
   998  03DF  3420               	retlw	32	;' '
   999  03E0  3474               	retlw	116	;'t'
  1000  03E1  3468               	retlw	104	;'h'
  1001  03E2  3465               	retlw	101	;'e'
  1002  03E3  3420               	retlw	32	;' '
  1003  03E4  3449               	retlw	73	;'I'
  1004  03E5  346E               	retlw	110	;'n'
  1005  03E6  3476               	retlw	118	;'v'
  1006  03E7  3465               	retlw	101	;'e'
  1007  03E8  3472               	retlw	114	;'r'
  1008  03E9  3474               	retlw	116	;'t'
  1009  03EA  3465               	retlw	101	;'e'
  1010  03EB  3464               	retlw	100	;'d'
  1011  03EC  3420               	retlw	32	;' '
  1012  03ED  3450               	retlw	80	;'P'
  1013  03EE  3465               	retlw	101	;'e'
  1014  03EF  346E               	retlw	110	;'n'
  1015  03F0  3464               	retlw	100	;'d'
  1016  03F1  3475               	retlw	117	;'u'
  1017  03F2  346C               	retlw	108	;'l'
  1018  03F3  3475               	retlw	117	;'u'
  1019  03F4  346D               	retlw	109	;'m'
  1020  03F5  3420               	retlw	32	;' '
  1021  03F6  3450               	retlw	80	;'P'
  1022  03F7  346C               	retlw	108	;'l'
  1023  03F8  3461               	retlw	97	;'a'
  1024  03F9  346E               	retlw	110	;'n'
  1025  03FA  3474               	retlw	116	;'t'
  1026  03FB  3421               	retlw	33	;'!'
  1027  03FC  3400               	retlw	0
  1028  03FD                     STR_24:	
  1029  03FD  3420               	retlw	32	;' '
  1030  03FE  3420               	retlw	32	;' '
  1031  03FF  3420               	retlw	32	;' '
  1032  0400  3420               	retlw	32	;' '
  1033  0401  3420               	retlw	32	;' '
  1034  0402  3420               	retlw	32	;' '
  1035  0403  3420               	retlw	32	;' '
  1036  0404  3420               	retlw	32	;' '
  1037  0405  3449               	retlw	73	;'I'
  1038  0406  3466               	retlw	102	;'f'
  1039  0407  3420               	retlw	32	;' '
  1040  0408  3479               	retlw	121	;'y'
  1041  0409  346F               	retlw	111	;'o'
  1042  040A  3475               	retlw	117	;'u'
  1043  040B  3420               	retlw	32	;' '
  1044  040C  3477               	retlw	119	;'w'
  1045  040D  3461               	retlw	97	;'a'
  1046  040E  346E               	retlw	110	;'n'
  1047  040F  3474               	retlw	116	;'t'
  1048  0410  3420               	retlw	32	;' '
  1049  0411  3473               	retlw	115	;'s'
  1050  0412  3474               	retlw	116	;'t'
  1051  0413  346F               	retlw	111	;'o'
  1052  0414  3470               	retlw	112	;'p'
  1053  0415  3420               	retlw	32	;' '
  1054  0416  3474               	retlw	116	;'t'
  1055  0417  3468               	retlw	104	;'h'
  1056  0418  3465               	retlw	101	;'e'
  1057  0419  3420               	retlw	32	;' '
  1058  041A  3473               	retlw	115	;'s'
  1059  041B  3479               	retlw	121	;'y'
  1060  041C  3473               	retlw	115	;'s'
  1061  041D  3474               	retlw	116	;'t'
  1062  041E  3465               	retlw	101	;'e'
  1063  041F  346D               	retlw	109	;'m'
  1064  0420  342C               	retlw	44	;','
  1065  0421  3420               	retlw	32	;' '
  1066  0422  3474               	retlw	116	;'t'
  1067  0423  3479               	retlw	121	;'y'
  1068  0424  3470               	retlw	112	;'p'
  1069  0425  3465               	retlw	101	;'e'
  1070  0426  343A               	retlw	58	;':'
  1071  0427  3400               	retlw	0
  1072  0428                     STR_21:	
  1073  0428  3420               	retlw	32	;' '
  1074  0429  3420               	retlw	32	;' '
  1075  042A  3420               	retlw	32	;' '
  1076  042B  3420               	retlw	32	;' '
  1077  042C  3420               	retlw	32	;' '
  1078  042D  3420               	retlw	32	;' '
  1079  042E  3420               	retlw	32	;' '
  1080  042F  3420               	retlw	32	;' '
  1081  0430  3449               	retlw	73	;'I'
  1082  0431  3466               	retlw	102	;'f'
  1083  0432  3420               	retlw	32	;' '
  1084  0433  3479               	retlw	121	;'y'
  1085  0434  346F               	retlw	111	;'o'
  1086  0435  3475               	retlw	117	;'u'
  1087  0436  3420               	retlw	32	;' '
  1088  0437  3477               	retlw	119	;'w'
  1089  0438  3461               	retlw	97	;'a'
  1090  0439  346E               	retlw	110	;'n'
  1091  043A  3474               	retlw	116	;'t'
  1092  043B  3420               	retlw	32	;' '
  1093  043C  3461               	retlw	97	;'a'
  1094  043D  3420               	retlw	32	;' '
  1095  043E  3468               	retlw	104	;'h'
  1096  043F  3465               	retlw	101	;'e'
  1097  0440  346C               	retlw	108	;'l'
  1098  0441  3470               	retlw	112	;'p'
  1099  0442  342C               	retlw	44	;','
  1100  0443  3420               	retlw	32	;' '
  1101  0444  3474               	retlw	116	;'t'
  1102  0445  3479               	retlw	121	;'y'
  1103  0446  3470               	retlw	112	;'p'
  1104  0447  3465               	retlw	101	;'e'
  1105  0448  343A               	retlw	58	;':'
  1106  0449  3400               	retlw	0
  1107  044A                     STR_50:	
  1108  044A  3459               	retlw	89	;'Y'
  1109  044B  346F               	retlw	111	;'o'
  1110  044C  3475               	retlw	117	;'u'
  1111  044D  3420               	retlw	32	;' '
  1112  044E  3474               	retlw	116	;'t'
  1113  044F  3479               	retlw	121	;'y'
  1114  0450  3470               	retlw	112	;'p'
  1115  0451  3465               	retlw	101	;'e'
  1116  0452  3464               	retlw	100	;'d'
  1117  0453  3420               	retlw	32	;' '
  1118  0454  3473               	retlw	115	;'s'
  1119  0455  346F               	retlw	111	;'o'
  1120  0456  346D               	retlw	109	;'m'
  1121  0457  3465               	retlw	101	;'e'
  1122  0458  3474               	retlw	116	;'t'
  1123  0459  3468               	retlw	104	;'h'
  1124  045A  3469               	retlw	105	;'i'
  1125  045B  346E               	retlw	110	;'n'
  1126  045C  3467               	retlw	103	;'g'
  1127  045D  3420               	retlw	32	;' '
  1128  045E  3477               	retlw	119	;'w'
  1129  045F  3472               	retlw	114	;'r'
  1130  0460  346F               	retlw	111	;'o'
  1131  0461  346E               	retlw	110	;'n'
  1132  0462  3467               	retlw	103	;'g'
  1133  0463  342E               	retlw	46	;'.'
  1134  0464  3420               	retlw	32	;' '
  1135  0465  3400               	retlw	0
  1136  0466                     STR_19:	
  1137  0466  3420               	retlw	32	;' '
  1138  0467  3420               	retlw	32	;' '
  1139  0468  3420               	retlw	32	;' '
  1140  0469  3420               	retlw	32	;' '
  1141  046A  3420               	retlw	32	;' '
  1142  046B  3420               	retlw	32	;' '
  1143  046C  3420               	retlw	32	;' '
  1144  046D  3420               	retlw	32	;' '
  1145  046E  3473               	retlw	115	;'s'
  1146  046F  3479               	retlw	121	;'y'
  1147  0470  3473               	retlw	115	;'s'
  1148  0471  3428               	retlw	40	;'('
  1149  0472  346D               	retlw	109	;'m'
  1150  0473  3461               	retlw	97	;'a'
  1151  0474  3478               	retlw	120	;'x'
  1152  0475  345F               	retlw	95	;'_'
  1153  0476  3464               	retlw	100	;'d'
  1154  0477  3475               	retlw	117	;'u'
  1155  0478  3474               	retlw	116	;'t'
  1156  0479  3479               	retlw	121	;'y'
  1157  047A  345F               	retlw	95	;'_'
  1158  047B  3463               	retlw	99	;'c'
  1159  047C  3469               	retlw	105	;'i'
  1160  047D  3463               	retlw	99	;'c'
  1161  047E  346C               	retlw	108	;'l'
  1162  047F  3465               	retlw	101	;'e'
  1163  0480  3429               	retlw	41	;')'
  1164  0481  3400               	retlw	0
  1165  0482                     STR_58:	
  1166  0482  3454               	retlw	84	;'T'
  1167  0483  3468               	retlw	104	;'h'
  1168  0484  3465               	retlw	101	;'e'
  1169  0485  3420               	retlw	32	;' '
  1170  0486  3464               	retlw	100	;'d'
  1171  0487  3475               	retlw	117	;'u'
  1172  0488  3474               	retlw	116	;'t'
  1173  0489  3479               	retlw	121	;'y'
  1174  048A  342D               	retlw	45	;'-'
  1175  048B  3463               	retlw	99	;'c'
  1176  048C  3479               	retlw	121	;'y'
  1177  048D  3463               	retlw	99	;'c'
  1178  048E  346C               	retlw	108	;'l'
  1179  048F  3465               	retlw	101	;'e'
  1180  0490  3420               	retlw	32	;' '
  1181  0491  346F               	retlw	111	;'o'
  1182  0492  3466               	retlw	102	;'f'
  1183  0493  3420               	retlw	32	;' '
  1184  0494  3450               	retlw	80	;'P'
  1185  0495  3457               	retlw	87	;'W'
  1186  0496  344D               	retlw	77	;'M'
  1187  0497  3420               	retlw	32	;' '
  1188  0498  3469               	retlw	105	;'i'
  1189  0499  3473               	retlw	115	;'s'
  1190  049A  343A               	retlw	58	;':'
  1191  049B  3420               	retlw	32	;' '
  1192  049C  3400               	retlw	0
  1193  049D                     STR_61:	
  1194  049D  3454               	retlw	84	;'T'
  1195  049E  3468               	retlw	104	;'h'
  1196  049F  3465               	retlw	101	;'e'
  1197  04A0  3420               	retlw	32	;' '
  1198  04A1  3461               	retlw	97	;'a'
  1199  04A2  346E               	retlw	110	;'n'
  1200  04A3  3461               	retlw	97	;'a'
  1201  04A4  346C               	retlw	108	;'l'
  1202  04A5  346F               	retlw	111	;'o'
  1203  04A6  3467               	retlw	103	;'g'
  1204  04A7  3420               	retlw	32	;' '
  1205  04A8  3476               	retlw	118	;'v'
  1206  04A9  3461               	retlw	97	;'a'
  1207  04AA  346C               	retlw	108	;'l'
  1208  04AB  3475               	retlw	117	;'u'
  1209  04AC  3465               	retlw	101	;'e'
  1210  04AD  3420               	retlw	32	;' '
  1211  04AE  3469               	retlw	105	;'i'
  1212  04AF  3473               	retlw	115	;'s'
  1213  04B0  343A               	retlw	58	;':'
  1214  04B1  3420               	retlw	32	;' '
  1215  04B2  3400               	retlw	0
  1216  04B3                     STR_13:	
  1217  04B3  3420               	retlw	32	;' '
  1218  04B4  3420               	retlw	32	;' '
  1219  04B5  3420               	retlw	32	;' '
  1220  04B6  3420               	retlw	32	;' '
  1221  04B7  3420               	retlw	32	;' '
  1222  04B8  3420               	retlw	32	;' '
  1223  04B9  3420               	retlw	32	;' '
  1224  04BA  3420               	retlw	32	;' '
  1225  04BB  3473               	retlw	115	;'s'
  1226  04BC  3474               	retlw	116	;'t'
  1227  04BD  3465               	retlw	101	;'e'
  1228  04BE  3470               	retlw	112	;'p'
  1229  04BF  3428               	retlw	40	;'('
  1230  04C0  3435               	retlw	53	;'5'
  1231  04C1  3430               	retlw	48	;'0'
  1232  04C2  342C               	retlw	44	;','
  1233  04C3  3433               	retlw	51	;'3'
  1234  04C4  3430               	retlw	48	;'0'
  1235  04C5  3430               	retlw	48	;'0'
  1236  04C6  3429               	retlw	41	;')'
  1237  04C7  3400               	retlw	0
  1238  04C8                     STR_16:	
  1239  04C8  3420               	retlw	32	;' '
  1240  04C9  3420               	retlw	32	;' '
  1241  04CA  3420               	retlw	32	;' '
  1242  04CB  3420               	retlw	32	;' '
  1243  04CC  3420               	retlw	32	;' '
  1244  04CD  3420               	retlw	32	;' '
  1245  04CE  3420               	retlw	32	;' '
  1246  04CF  3420               	retlw	32	;' '
  1247  04D0  3472               	retlw	114	;'r'
  1248  04D1  3475               	retlw	117	;'u'
  1249  04D2  346E               	retlw	110	;'n'
  1250  04D3  3428               	retlw	40	;'('
  1251  04D4  3429               	retlw	41	;')'
  1252  04D5  3420               	retlw	32	;' '
  1253  04D6  3420               	retlw	32	;' '
  1254  04D7  3420               	retlw	32	;' '
  1255  04D8  3420               	retlw	32	;' '
  1256  04D9  3420               	retlw	32	;' '
  1257  04DA  3400               	retlw	0
  1258  04DB                     STR_22:	
  1259  04DB  3420               	retlw	32	;' '
  1260  04DC  3420               	retlw	32	;' '
  1261  04DD  3420               	retlw	32	;' '
  1262  04DE  3420               	retlw	32	;' '
  1263  04DF  3420               	retlw	32	;' '
  1264  04E0  3420               	retlw	32	;' '
  1265  04E1  3420               	retlw	32	;' '
  1266  04E2  3420               	retlw	32	;' '
  1267  04E3  3468               	retlw	104	;'h'
  1268  04E4  3465               	retlw	101	;'e'
  1269  04E5  346C               	retlw	108	;'l'
  1270  04E6  3470               	retlw	112	;'p'
  1271  04E7  3428               	retlw	40	;'('
  1272  04E8  3429               	retlw	41	;')'
  1273  04E9  3420               	retlw	32	;' '
  1274  04EA  3420               	retlw	32	;' '
  1275  04EB  3420               	retlw	32	;' '
  1276  04EC  3420               	retlw	32	;' '
  1277  04ED  3400               	retlw	0
  1278  04EE                     STR_25:	
  1279  04EE  3420               	retlw	32	;' '
  1280  04EF  3420               	retlw	32	;' '
  1281  04F0  3420               	retlw	32	;' '
  1282  04F1  3420               	retlw	32	;' '
  1283  04F2  3420               	retlw	32	;' '
  1284  04F3  3420               	retlw	32	;' '
  1285  04F4  3420               	retlw	32	;' '
  1286  04F5  3420               	retlw	32	;' '
  1287  04F6  3473               	retlw	115	;'s'
  1288  04F7  3474               	retlw	116	;'t'
  1289  04F8  346F               	retlw	111	;'o'
  1290  04F9  3470               	retlw	112	;'p'
  1291  04FA  3428               	retlw	40	;'('
  1292  04FB  3429               	retlw	41	;')'
  1293  04FC  3420               	retlw	32	;' '
  1294  04FD  3420               	retlw	32	;' '
  1295  04FE  3420               	retlw	32	;' '
  1296  04FF  3420               	retlw	32	;' '
  1297  0500  3400               	retlw	0
  1298  0501                     STR_31:	
  1299  0501  3420               	retlw	32	;' '
  1300  0502  3420               	retlw	32	;' '
  1301  0503  3420               	retlw	32	;' '
  1302  0504  3420               	retlw	32	;' '
  1303  0505  3420               	retlw	32	;' '
  1304  0506  3420               	retlw	32	;' '
  1305  0507  3420               	retlw	32	;' '
  1306  0508  3420               	retlw	32	;' '
  1307  0509  3473               	retlw	115	;'s'
  1308  050A  3474               	retlw	116	;'t'
  1309  050B  3461               	retlw	97	;'a'
  1310  050C  3474               	retlw	116	;'t'
  1311  050D  3475               	retlw	117	;'u'
  1312  050E  3473               	retlw	115	;'s'
  1313  050F  3428               	retlw	40	;'('
  1314  0510  3429               	retlw	41	;')'
  1315  0511  3420               	retlw	32	;' '
  1316  0512  3420               	retlw	32	;' '
  1317  0513  3400               	retlw	0
  1318  0514                     STR_28:	
  1319  0514  3420               	retlw	32	;' '
  1320  0515  3420               	retlw	32	;' '
  1321  0516  3420               	retlw	32	;' '
  1322  0517  3420               	retlw	32	;' '
  1323  0518  3420               	retlw	32	;' '
  1324  0519  3420               	retlw	32	;' '
  1325  051A  3420               	retlw	32	;' '
  1326  051B  3420               	retlw	32	;' '
  1327  051C  3461               	retlw	97	;'a'
  1328  051D  3463               	retlw	99	;'c'
  1329  051E  3471               	retlw	113	;'q'
  1330  051F  3475               	retlw	117	;'u'
  1331  0520  3469               	retlw	105	;'i'
  1332  0521  3472               	retlw	114	;'r'
  1333  0522  3465               	retlw	101	;'e'
  1334  0523  3428               	retlw	40	;'('
  1335  0524  3429               	retlw	41	;')'
  1336  0525  3420               	retlw	32	;' '
  1337  0526  3400               	retlw	0
  1338  0527                     STR_5:	
  1339  0527  3420               	retlw	32	;' '
  1340  0528  3420               	retlw	32	;' '
  1341  0529  3420               	retlw	32	;' '
  1342  052A  3420               	retlw	32	;' '
  1343  052B  3420               	retlw	32	;' '
  1344  052C  3420               	retlw	32	;' '
  1345  052D  3420               	retlw	32	;' '
  1346  052E  3420               	retlw	32	;' '
  1347  052F  3445               	retlw	69	;'E'
  1348  0530  3478               	retlw	120	;'x'
  1349  0531  3461               	retlw	97	;'a'
  1350  0532  346D               	retlw	109	;'m'
  1351  0533  3470               	retlw	112	;'p'
  1352  0534  346C               	retlw	108	;'l'
  1353  0535  3465               	retlw	101	;'e'
  1354  0536  3420               	retlw	32	;' '
  1355  0537  3430               	retlw	48	;'0'
  1356  0538  343A               	retlw	58	;':'
  1357  0539  3400               	retlw	0
  1358  053A                     STR_8:	
  1359  053A  3420               	retlw	32	;' '
  1360  053B  3420               	retlw	32	;' '
  1361  053C  3420               	retlw	32	;' '
  1362  053D  3420               	retlw	32	;' '
  1363  053E  3420               	retlw	32	;' '
  1364  053F  3420               	retlw	32	;' '
  1365  0540  3420               	retlw	32	;' '
  1366  0541  3420               	retlw	32	;' '
  1367  0542  3445               	retlw	69	;'E'
  1368  0543  3478               	retlw	120	;'x'
  1369  0544  3461               	retlw	97	;'a'
  1370  0545  346D               	retlw	109	;'m'
  1371  0546  3470               	retlw	112	;'p'
  1372  0547  346C               	retlw	108	;'l'
  1373  0548  3465               	retlw	101	;'e'
  1374  0549  3420               	retlw	32	;' '
  1375  054A  3431               	retlw	49	;'1'
  1376  054B  343A               	retlw	58	;':'
  1377  054C  3400               	retlw	0
  1378  054D                     STR_11:	
  1379  054D  3420               	retlw	32	;' '
  1380  054E  3420               	retlw	32	;' '
  1381  054F  3420               	retlw	32	;' '
  1382  0550  3420               	retlw	32	;' '
  1383  0551  3420               	retlw	32	;' '
  1384  0552  3420               	retlw	32	;' '
  1385  0553  3420               	retlw	32	;' '
  1386  0554  3420               	retlw	32	;' '
  1387  0555  3445               	retlw	69	;'E'
  1388  0556  3478               	retlw	120	;'x'
  1389  0557  3461               	retlw	97	;'a'
  1390  0558  346D               	retlw	109	;'m'
  1391  0559  3470               	retlw	112	;'p'
  1392  055A  346C               	retlw	108	;'l'
  1393  055B  3465               	retlw	101	;'e'
  1394  055C  3420               	retlw	32	;' '
  1395  055D  3432               	retlw	50	;'2'
  1396  055E  343A               	retlw	58	;':'
  1397  055F  3400               	retlw	0
  1398  0560                     STR_14:	
  1399  0560  3420               	retlw	32	;' '
  1400  0561  3420               	retlw	32	;' '
  1401  0562  3420               	retlw	32	;' '
  1402  0563  3420               	retlw	32	;' '
  1403  0564  3420               	retlw	32	;' '
  1404  0565  3420               	retlw	32	;' '
  1405  0566  3420               	retlw	32	;' '
  1406  0567  3420               	retlw	32	;' '
  1407  0568  3445               	retlw	69	;'E'
  1408  0569  3478               	retlw	120	;'x'
  1409  056A  3461               	retlw	97	;'a'
  1410  056B  346D               	retlw	109	;'m'
  1411  056C  3470               	retlw	112	;'p'
  1412  056D  346C               	retlw	108	;'l'
  1413  056E  3465               	retlw	101	;'e'
  1414  056F  3420               	retlw	32	;' '
  1415  0570  3433               	retlw	51	;'3'
  1416  0571  343A               	retlw	58	;':'
  1417  0572  3400               	retlw	0
  1418  0573                     STR_17:	
  1419  0573  3420               	retlw	32	;' '
  1420  0574  3420               	retlw	32	;' '
  1421  0575  3420               	retlw	32	;' '
  1422  0576  3420               	retlw	32	;' '
  1423  0577  3420               	retlw	32	;' '
  1424  0578  3420               	retlw	32	;' '
  1425  0579  3420               	retlw	32	;' '
  1426  057A  3420               	retlw	32	;' '
  1427  057B  3445               	retlw	69	;'E'
  1428  057C  3478               	retlw	120	;'x'
  1429  057D  3461               	retlw	97	;'a'
  1430  057E  346D               	retlw	109	;'m'
  1431  057F  3470               	retlw	112	;'p'
  1432  0580  346C               	retlw	108	;'l'
  1433  0581  3465               	retlw	101	;'e'
  1434  0582  3420               	retlw	32	;' '
  1435  0583  3434               	retlw	52	;'4'
  1436  0584  343A               	retlw	58	;':'
  1437  0585  3400               	retlw	0
  1438  0586                     STR_20:	
  1439  0586  3420               	retlw	32	;' '
  1440  0587  3420               	retlw	32	;' '
  1441  0588  3420               	retlw	32	;' '
  1442  0589  3420               	retlw	32	;' '
  1443  058A  3420               	retlw	32	;' '
  1444  058B  3420               	retlw	32	;' '
  1445  058C  3420               	retlw	32	;' '
  1446  058D  3420               	retlw	32	;' '
  1447  058E  3445               	retlw	69	;'E'
  1448  058F  3478               	retlw	120	;'x'
  1449  0590  3461               	retlw	97	;'a'
  1450  0591  346D               	retlw	109	;'m'
  1451  0592  3470               	retlw	112	;'p'
  1452  0593  346C               	retlw	108	;'l'
  1453  0594  3465               	retlw	101	;'e'
  1454  0595  3420               	retlw	32	;' '
  1455  0596  3435               	retlw	53	;'5'
  1456  0597  343A               	retlw	58	;':'
  1457  0598  3400               	retlw	0
  1458  0599                     STR_23:	
  1459  0599  3420               	retlw	32	;' '
  1460  059A  3420               	retlw	32	;' '
  1461  059B  3420               	retlw	32	;' '
  1462  059C  3420               	retlw	32	;' '
  1463  059D  3420               	retlw	32	;' '
  1464  059E  3420               	retlw	32	;' '
  1465  059F  3420               	retlw	32	;' '
  1466  05A0  3420               	retlw	32	;' '
  1467  05A1  3445               	retlw	69	;'E'
  1468  05A2  3478               	retlw	120	;'x'
  1469  05A3  3461               	retlw	97	;'a'
  1470  05A4  346D               	retlw	109	;'m'
  1471  05A5  3470               	retlw	112	;'p'
  1472  05A6  346C               	retlw	108	;'l'
  1473  05A7  3465               	retlw	101	;'e'
  1474  05A8  3420               	retlw	32	;' '
  1475  05A9  3436               	retlw	54	;'6'
  1476  05AA  343A               	retlw	58	;':'
  1477  05AB  3400               	retlw	0
  1478  05AC                     STR_26:	
  1479  05AC  3420               	retlw	32	;' '
  1480  05AD  3420               	retlw	32	;' '
  1481  05AE  3420               	retlw	32	;' '
  1482  05AF  3420               	retlw	32	;' '
  1483  05B0  3420               	retlw	32	;' '
  1484  05B1  3420               	retlw	32	;' '
  1485  05B2  3420               	retlw	32	;' '
  1486  05B3  3420               	retlw	32	;' '
  1487  05B4  3445               	retlw	69	;'E'
  1488  05B5  3478               	retlw	120	;'x'
  1489  05B6  3461               	retlw	97	;'a'
  1490  05B7  346D               	retlw	109	;'m'
  1491  05B8  3470               	retlw	112	;'p'
  1492  05B9  346C               	retlw	108	;'l'
  1493  05BA  3465               	retlw	101	;'e'
  1494  05BB  3420               	retlw	32	;' '
  1495  05BC  3437               	retlw	55	;'7'
  1496  05BD  343A               	retlw	58	;':'
  1497  05BE  3400               	retlw	0
  1498  05BF                     STR_29:	
  1499  05BF  3420               	retlw	32	;' '
  1500  05C0  3420               	retlw	32	;' '
  1501  05C1  3420               	retlw	32	;' '
  1502  05C2  3420               	retlw	32	;' '
  1503  05C3  3420               	retlw	32	;' '
  1504  05C4  3420               	retlw	32	;' '
  1505  05C5  3420               	retlw	32	;' '
  1506  05C6  3420               	retlw	32	;' '
  1507  05C7  3445               	retlw	69	;'E'
  1508  05C8  3478               	retlw	120	;'x'
  1509  05C9  3461               	retlw	97	;'a'
  1510  05CA  346D               	retlw	109	;'m'
  1511  05CB  3470               	retlw	112	;'p'
  1512  05CC  346C               	retlw	108	;'l'
  1513  05CD  3465               	retlw	101	;'e'
  1514  05CE  3420               	retlw	32	;' '
  1515  05CF  3438               	retlw	56	;'8'
  1516  05D0  343A               	retlw	58	;':'
  1517  05D1  3400               	retlw	0
  1518  05D2                     STR_32:	
  1519  05D2  3420               	retlw	32	;' '
  1520  05D3  3420               	retlw	32	;' '
  1521  05D4  3420               	retlw	32	;' '
  1522  05D5  3420               	retlw	32	;' '
  1523  05D6  3420               	retlw	32	;' '
  1524  05D7  3420               	retlw	32	;' '
  1525  05D8  3420               	retlw	32	;' '
  1526  05D9  3420               	retlw	32	;' '
  1527  05DA  3445               	retlw	69	;'E'
  1528  05DB  3478               	retlw	120	;'x'
  1529  05DC  3461               	retlw	97	;'a'
  1530  05DD  346D               	retlw	109	;'m'
  1531  05DE  3470               	retlw	112	;'p'
  1532  05DF  346C               	retlw	108	;'l'
  1533  05E0  3465               	retlw	101	;'e'
  1534  05E1  3420               	retlw	32	;' '
  1535  05E2  3439               	retlw	57	;'9'
  1536  05E3  343A               	retlw	58	;':'
  1537  05E4  3400               	retlw	0
  1538  05E5                     STR_10:	
  1539  05E5  3420               	retlw	32	;' '
  1540  05E6  3420               	retlw	32	;' '
  1541  05E7  3420               	retlw	32	;' '
  1542  05E8  3420               	retlw	32	;' '
  1543  05E9  3420               	retlw	32	;' '
  1544  05EA  3420               	retlw	32	;' '
  1545  05EB  3420               	retlw	32	;' '
  1546  05EC  3420               	retlw	32	;' '
  1547  05ED  3473               	retlw	115	;'s'
  1548  05EE  3474               	retlw	116	;'t'
  1549  05EF  3465               	retlw	101	;'e'
  1550  05F0  3470               	retlw	112	;'p'
  1551  05F1  3428               	retlw	40	;'('
  1552  05F2  3432               	retlw	50	;'2'
  1553  05F3  3430               	retlw	48	;'0'
  1554  05F4  3430               	retlw	48	;'0'
  1555  05F5  3429               	retlw	41	;')'
  1556  05F6  3400               	retlw	0
  1557  05F7                     STR_7:	
  1558  05F7  3420               	retlw	32	;' '
  1559  05F8  3420               	retlw	32	;' '
  1560  05F9  3420               	retlw	32	;' '
  1561  05FA  3420               	retlw	32	;' '
  1562  05FB  3420               	retlw	32	;' '
  1563  05FC  3420               	retlw	32	;' '
  1564  05FD  3420               	retlw	32	;' '
  1565  05FE  3420               	retlw	32	;' '
  1566  05FF  3473               	retlw	115	;'s'
  1567  0600  3474               	retlw	116	;'t'
  1568  0601  3465               	retlw	101	;'e'
  1569  0602  3470               	retlw	112	;'p'
  1570  0603  3428               	retlw	40	;'('
  1571  0604  3429               	retlw	41	;')'
  1572  0605  3400               	retlw	0
  1573  0606                     STR_48:	
  1574  0606  3461               	retlw	97	;'a'
  1575  0607  3463               	retlw	99	;'c'
  1576  0608  3471               	retlw	113	;'q'
  1577  0609  3475               	retlw	117	;'u'
  1578  060A  3469               	retlw	105	;'i'
  1579  060B  3472               	retlw	114	;'r'
  1580  060C  3465               	retlw	101	;'e'
  1581  060D  3428               	retlw	40	;'('
  1582  060E  3429               	retlw	41	;')'
  1583  060F  3400               	retlw	0
  1584  0610                     STR_65:	
  1585  0610  3441               	retlw	65	;'A'
  1586  0611  346E               	retlw	110	;'n'
  1587  0612  3461               	retlw	97	;'a'
  1588  0613  346C               	retlw	108	;'l'
  1589  0614  346F               	retlw	111	;'o'
  1590  0615  3467               	retlw	103	;'g'
  1591  0616  343A               	retlw	58	;':'
  1592  0617  3420               	retlw	32	;' '
  1593  0618  3400               	retlw	0
  1594  0619                     STR_67:	
  1595  0619  342C               	retlw	44	;','
  1596  061A  3420               	retlw	32	;' '
  1597  061B  3444               	retlw	68	;'D'
  1598  061C  3475               	retlw	117	;'u'
  1599  061D  3474               	retlw	116	;'t'
  1600  061E  3479               	retlw	121	;'y'
  1601  061F  343A               	retlw	58	;':'
  1602  0620  3420               	retlw	32	;' '
  1603  0621  3400               	retlw	0
  1604  0622                     STR_47:	
  1605  0622  3473               	retlw	115	;'s'
  1606  0623  3474               	retlw	116	;'t'
  1607  0624  3461               	retlw	97	;'a'
  1608  0625  3474               	retlw	116	;'t'
  1609  0626  3475               	retlw	117	;'u'
  1610  0627  3473               	retlw	115	;'s'
  1611  0628  3428               	retlw	40	;'('
  1612  0629  3429               	retlw	41	;')'
  1613  062A  3400               	retlw	0
  1614  062B                     STR_69:	
  1615  062B  342C               	retlw	44	;','
  1616  062C  3420               	retlw	32	;' '
  1617  062D  3450               	retlw	80	;'P'
  1618  062E  3452               	retlw	82	;'R'
  1619  062F  3432               	retlw	50	;'2'
  1620  0630  343A               	retlw	58	;':'
  1621  0631  3420               	retlw	32	;' '
  1622  0632  3400               	retlw	0
  1623  0633                     STR_49:	
  1624  0633  3468               	retlw	104	;'h'
  1625  0634  3465               	retlw	101	;'e'
  1626  0635  346C               	retlw	108	;'l'
  1627  0636  3470               	retlw	112	;'p'
  1628  0637  3428               	retlw	40	;'('
  1629  0638  3429               	retlw	41	;')'
  1630  0639  3400               	retlw	0
  1631  063A                     STR_46:	
  1632  063A  3473               	retlw	115	;'s'
  1633  063B  3474               	retlw	116	;'t'
  1634  063C  346F               	retlw	111	;'o'
  1635  063D  3470               	retlw	112	;'p'
  1636  063E  3428               	retlw	40	;'('
  1637  063F  3429               	retlw	41	;')'
  1638  0640  3400               	retlw	0
  1639  0641                     STR_36:	
  1640  0641  3473               	retlw	115	;'s'
  1641  0642  3474               	retlw	116	;'t'
  1642  0643  3465               	retlw	101	;'e'
  1643  0644  3470               	retlw	112	;'p'
  1644  0645  3428               	retlw	40	;'('
  1645  0646  3400               	retlw	0
  1646  0647                     STR_40:	
  1647  0647  3472               	retlw	114	;'r'
  1648  0648  3475               	retlw	117	;'u'
  1649  0649  346E               	retlw	110	;'n'
  1650  064A  3428               	retlw	40	;'('
  1651  064B  3400               	retlw	0
  1652  064C                     STR_43:	
  1653  064C  3473               	retlw	115	;'s'
  1654  064D  3479               	retlw	121	;'y'
  1655  064E  3473               	retlw	115	;'s'
  1656  064F  3428               	retlw	40	;'('
  1657  0650  3400               	retlw	0
  1658  0651                     STR_52:	
  1659  0651  3425               	retlw	37	;'%'
  1660  0652  3464               	retlw	100	;'d'
  1661  0653  3400               	retlw	0
  1662  0654                     STR_60:	
  1663  0654  3425               	retlw	37	;'%'
  1664  0655  3400               	retlw	0
  1665  0656                     STR_38:	
  1666  0656  342C               	retlw	44	;','
  1667  0657  3400               	retlw	0
  1668  0658                     STR_1:	
  1669  0658  343E               	retlw	62	;'>'
  1670  0659  3400               	retlw	0
  1671  04DB                     
  1672                           ; #config settings
  1673  0000                     
  1674                           	psect	nvBANK0
  1675  0059                     __pnvBANK0:	
  1676  0059                     _UQEnd:	
  1677  0059                     	ds	1
  1678  005A                     _UQFront:	
  1679  005A                     	ds	1
  1680  001E                     _ADRESH	set	30
  1681  001F                     _ADCON0bits	set	31
  1682  001D                     _CCP2CONbits	set	29
  1683  0017                     _CCP1CONbits	set	23
  1684  001B                     _CCPR2L	set	27
  1685  000B                     _INTCONbits	set	11
  1686  0012                     _T2CON	set	18
  1687  001D                     _CCP2CON	set	29
  1688  0017                     _CCP1CON	set	23
  1689  0015                     _CCPR1L	set	21
  1690  0001                     _TMR0	set	1
  1691  000B                     _INTCON	set	11
  1692  001F                     _ADCON0	set	31
  1693  0008                     _PORTD	set	8
  1694  0007                     _PORTC	set	7
  1695  0006                     _PORTB	set	6
  1696  0005                     _PORTA	set	5
  1697  001A                     _RCREG	set	26
  1698  0019                     _TXREG	set	25
  1699  000C                     _PIR1bits	set	12
  1700  0018                     _RCSTAbits	set	24
  1701  0065                     _RCIF	set	101
  1702  0031                     _RB1	set	49
  1703  005F                     _GIE	set	95
  1704  005E                     _PEIE	set	94
  1705  009E                     _ADRESL	set	158
  1706  0092                     _PR2	set	146
  1707  0081                     _OPTION_REG	set	129
  1708  009F                     _ADCON1	set	159
  1709  0088                     _TRISD	set	136
  1710  0087                     _TRISC	set	135
  1711  0086                     _TRISB	set	134
  1712  0085                     _TRISA	set	133
  1713  0098                     _TXSTAbits	set	152
  1714  0099                     _SPBRG	set	153
  1715  0465                     _RCIE	set	1125
  1716                           
  1717                           	psect	cinit
  1718  0015                     start_initialization:	
  1719  0015                     __initialization:	
  1720                           
  1721                           ; Initialize objects allocated to BANK0
  1722  0015  120A  118A  27FA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1723  001A  00D4               	movwf	__pdataBANK0& (0+127)
  1724  001B  120A  118A  27FB  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
  1725  0020  00D5               	movwf	(__pdataBANK0+1)& (0+127)
  1726  0021  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
  1727  0026  00D6               	movwf	(__pdataBANK0+2)& (0+127)
  1728  0027  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
  1729  002C  00D7               	movwf	(__pdataBANK0+3)& (0+127)
  1730  002D  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
  1731  0032  00D8               	movwf	(__pdataBANK0+4)& (0+127)
  1732                           
  1733                           ; Clear objects allocated to BANK3
  1734  0033  1783               	bsf	3,7	;select IRP bank2
  1735  0034  30D6               	movlw	low __pbssBANK3
  1736  0035  0084               	movwf	4
  1737  0036  30EF               	movlw	low (__pbssBANK3+25)
  1738  0037  160A  158A  2466  120A  118A  	fcall	clear_ram0
  1739                           
  1740                           ; Clear objects allocated to BANK2
  1741  003C  3010               	movlw	low __pbssBANK2
  1742  003D  0084               	movwf	4
  1743  003E  3050               	movlw	low (__pbssBANK2+64)
  1744  003F  160A  158A  2466  120A  118A  	fcall	clear_ram0
  1745                           
  1746                           ; Clear objects allocated to BANK1
  1747  0044  1383               	bcf	3,7	;select IRP bank0
  1748  0045  30CE               	movlw	low __pbssBANK1
  1749  0046  0084               	movwf	4
  1750  0047  30EA               	movlw	low (__pbssBANK1+28)
  1751  0048  160A  158A  2466  120A  118A  	fcall	clear_ram0
  1752                           
  1753                           ; Clear objects allocated to BANK0
  1754  004D  304A               	movlw	low __pbssBANK0
  1755  004E  0084               	movwf	4
  1756  004F  3054               	movlw	low (__pbssBANK0+10)
  1757  0050  160A  158A  2466   	fcall	clear_ram0
  1758  0053                     end_of_initialization:	
  1759                           ;End of C runtime variable initialization code
  1760                           
  1761  0053                     __end_of__initialization:	
  1762  0053  0183               	clrf	3
  1763  0054  160A  158A  2E45   	ljmp	_main	;jump to C main() function
  1764                           
  1765                           	psect	bssBANK0
  1766  004A                     __pbssBANK0:	
  1767  004A                     USARTWriteInt@F1155:	
  1768  004A                     	ds	5
  1769  004F                     _max_counters:	
  1770  004F                     	ds	2
  1771  0051                     _count:	
  1772  0051                     	ds	2
  1773  0053                     _stepEnable:	
  1774  0053                     	ds	1
  1775                           
  1776                           	psect	dataBANK0
  1777  0054                     __pdataBANK0:	
  1778  0054                     _randx:	
  1779  0054                     	ds	4
  1780  0058                     _acquirement:	
  1781  0058                     	ds	1
  1782                           
  1783                           	psect	bssBANK1
  1784  00CE                     __pbssBANK1:	
  1785  00CE                     _pwm:	
  1786  00CE                     	ds	2
  1787  00D0                     _buffer:	
  1788  00D0                     	ds	1
  1789  00D1                     _content:	
  1790  00D1                     	ds	25
  1791                           
  1792                           	psect	bssBANK3
  1793  01D6                     __pbssBANK3:	
  1794  01D6                     _strBuffer:	
  1795  01D6                     	ds	25
  1796                           
  1797                           	psect	bssBANK2
  1798  0110                     __pbssBANK2:	
  1799  0110                     _URBuff:	
  1800  0110                     	ds	64
  1801                           
  1802                           	psect	clrtext
  1803  1C66                     clear_ram0:	
  1804                           ;	Called with FSR containing the base address, and
  1805                           ;	W with the last address+1
  1806                           
  1807  1C66  0064               	clrwdt	;clear the watchdog before getting into this loop
  1808  1C67                     clrloop0:	
  1809  1C67  0180               	clrf	0	;clear RAM location pointed to by FSR
  1810  1C68  0A84               	incf	4,f	;increment pointer
  1811  1C69  0604               	xorwf	4,w	;XOR with final address
  1812  1C6A  1903               	btfsc	3,2	;have we reached the end yet?
  1813  1C6B  3400               	retlw	0	;all done for this memory range, return
  1814  1C6C  0604               	xorwf	4,w	;XOR again to restore value
  1815  1C6D  2C67               	goto	clrloop0	;do the next byte
  1816                           
  1817                           	psect	cstackBANK3
  1818  0190                     __pcstackBANK3:	
  1819  0190                     status@output:	
  1820                           
  1821                           ; 25 bytes @ 0x0
  1822  0190                     	ds	25
  1823  01A9                     status@aux:	
  1824                           
  1825                           ; 3 bytes @ 0x19
  1826  01A9                     	ds	3
  1827  01AC                     status@duty:	
  1828                           
  1829                           ; 2 bytes @ 0x1C
  1830  01AC                     	ds	2
  1831  01AE                     status@i:	
  1832                           
  1833                           ; 2 bytes @ 0x1E
  1834  01AE                     	ds	2
  1835  01B0                     choice@duty:	
  1836                           
  1837                           ; 10 bytes @ 0x20
  1838  01B0                     	ds	10
  1839  01BA                     choice@duty_534:	
  1840                           
  1841                           ; 10 bytes @ 0x2A
  1842  01BA                     	ds	10
  1843  01C4                     choice@duty_541:	
  1844                           
  1845                           ; 10 bytes @ 0x34
  1846  01C4                     	ds	10
  1847  01CE                     choice@thirdP:	
  1848                           
  1849                           ; 2 bytes @ 0x3E
  1850  01CE                     	ds	2
  1851  01D0                     choice@secondP_537:	
  1852                           
  1853                           ; 2 bytes @ 0x40
  1854  01D0                     	ds	2
  1855  01D2                     choice@secondP_544:	
  1856                           
  1857                           ; 2 bytes @ 0x42
  1858  01D2                     	ds	2
  1859  01D4                     choice@time_1:	
  1860                           
  1861                           ; 2 bytes @ 0x44
  1862  01D4                     	ds	2
  1863                           
  1864                           	psect	cstackBANK2
  1865  0150                     __pcstackBANK2:	
  1866  0150                     choice@time:	
  1867                           
  1868                           ; 10 bytes @ 0x0
  1869  0150                     	ds	10
  1870  015A                     choice@firstP:	
  1871                           
  1872                           ; 2 bytes @ 0xA
  1873  015A                     	ds	2
  1874  015C                     choice@firstP_535:	
  1875                           
  1876                           ; 2 bytes @ 0xC
  1877  015C                     	ds	2
  1878  015E                     choice@firstP_542:	
  1879                           
  1880                           ; 2 bytes @ 0xE
  1881  015E                     	ds	2
  1882  0160                     choice@duty_i:	
  1883                           
  1884                           ; 2 bytes @ 0x10
  1885  0160                     	ds	2
  1886  0162                     choice@secondP:	
  1887                           
  1888                           ; 2 bytes @ 0x12
  1889  0162                     	ds	2
  1890  0164                     choice@i_539:	
  1891                           
  1892                           ; 2 bytes @ 0x14
  1893  0164                     	ds	2
  1894  0166                     choice@i_546:	
  1895                           
  1896                           ; 2 bytes @ 0x16
  1897  0166                     	ds	2
  1898  0168                     choice@i:	
  1899                           
  1900                           ; 2 bytes @ 0x18
  1901  0168                     	ds	2
  1902                           
  1903                           	psect	cstackBANK1
  1904  00A0                     __pcstackBANK1:	
  1905  00A0                     ??___ftdiv:	
  1906  00A0                     ??___ftmul:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  00A0                     ?___awmod:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  00A0                     ?___lwmod:	
  1913                           ; 2 bytes @ 0x0
  1914                           
  1915  00A0                     ___awmod@divisor:	
  1916                           ; 2 bytes @ 0x0
  1917                           
  1918  00A0                     ___lwmod@divisor:	
  1919                           ; 2 bytes @ 0x0
  1920                           
  1921                           
  1922                           ; 2 bytes @ 0x0
  1923  00A0                     	ds	2
  1924  00A2                     ___awmod@dividend:	
  1925  00A2                     ___lwmod@dividend:	
  1926                           ; 2 bytes @ 0x2
  1927                           
  1928                           
  1929                           ; 2 bytes @ 0x2
  1930  00A2                     	ds	2
  1931  00A4                     ___awmod@counter:	
  1932  00A4                     ___ftdiv@cntr:	
  1933                           ; 1 bytes @ 0x4
  1934                           
  1935  00A4                     ___ftmul@exp:	
  1936                           ; 1 bytes @ 0x4
  1937                           
  1938  00A4                     ___lwmod@counter:	
  1939                           ; 1 bytes @ 0x4
  1940                           
  1941                           
  1942                           ; 1 bytes @ 0x4
  1943  00A4                     	ds	1
  1944  00A5                     ?_sprintf:	
  1945  00A5                     ___awmod@sign:	
  1946                           ; 2 bytes @ 0x5
  1947                           
  1948  00A5                     sprintf@f:	
  1949                           ; 1 bytes @ 0x5
  1950                           
  1951  00A5                     ___ftdiv@f3:	
  1952                           ; 2 bytes @ 0x5
  1953                           
  1954  00A5                     ___ftmul@f3_as_product:	
  1955                           ; 3 bytes @ 0x5
  1956                           
  1957                           
  1958                           ; 3 bytes @ 0x5
  1959  00A5                     	ds	3
  1960  00A8                     ___ftdiv@exp:	
  1961  00A8                     ___ftmul@cntr:	
  1962                           ; 1 bytes @ 0x8
  1963                           
  1964                           
  1965                           ; 1 bytes @ 0x8
  1966  00A8                     	ds	1
  1967  00A9                     ___ftdiv@sign:	
  1968  00A9                     ___ftmul@sign:	
  1969                           ; 1 bytes @ 0x9
  1970                           
  1971                           
  1972                           ; 1 bytes @ 0x9
  1973  00A9                     	ds	1
  1974  00AA                     ?___fttol:	
  1975  00AA                     ___fttol@f1:	
  1976                           ; 4 bytes @ 0xA
  1977                           
  1978                           
  1979                           ; 3 bytes @ 0xA
  1980  00AA                     	ds	1
  1981  00AB                     ??_sprintf:	
  1982                           
  1983                           ; 1 bytes @ 0xB
  1984  00AB                     	ds	3
  1985  00AE                     ??___fttol:	
  1986  00AE                     sprintf@ap:	
  1987                           ; 1 bytes @ 0xE
  1988                           
  1989                           
  1990                           ; 1 bytes @ 0xE
  1991  00AE                     	ds	1
  1992  00AF                     sprintf@flag:	
  1993                           
  1994                           ; 1 bytes @ 0xF
  1995  00AF                     	ds	1
  1996  00B0                     sprintf@prec:	
  1997                           
  1998                           ; 1 bytes @ 0x10
  1999  00B0                     	ds	1
  2000  00B1                     sprintf@val:	
  2001                           
  2002                           ; 2 bytes @ 0x11
  2003  00B1                     	ds	1
  2004  00B2                     ___fttol@sign1:	
  2005                           
  2006                           ; 1 bytes @ 0x12
  2007  00B2                     	ds	1
  2008  00B3                     sprintf@sp:	
  2009  00B3                     ___fttol@lval:	
  2010                           ; 1 bytes @ 0x13
  2011                           
  2012                           
  2013                           ; 4 bytes @ 0x13
  2014  00B3                     	ds	1
  2015  00B4                     sprintf@c:	
  2016                           
  2017                           ; 1 bytes @ 0x14
  2018  00B4                     	ds	1
  2019  00B5                     acquire@valueAD:	
  2020  00B5                     adReadA0@valueAD:	
  2021                           ; 2 bytes @ 0x15
  2022                           
  2023                           
  2024                           ; 2 bytes @ 0x15
  2025  00B5                     	ds	2
  2026  00B7                     ___fttol@exp1:	
  2027                           
  2028                           ; 1 bytes @ 0x17
  2029  00B7                     	ds	1
  2030  00B8                     ?_set_pwm:	
  2031  00B8                     set_pwm@percent:	
  2032                           ; 1 bytes @ 0x18
  2033                           
  2034                           
  2035                           ; 2 bytes @ 0x18
  2036  00B8                     	ds	2
  2037  00BA                     ??_set_pwm:	
  2038                           
  2039                           ; 1 bytes @ 0x1A
  2040  00BA                     	ds	2
  2041  00BC                     ?_step:	
  2042  00BC                     ?_run:	
  2043                           ; 1 bytes @ 0x1C
  2044                           
  2045  00BC                     ?_sys:	
  2046                           ; 1 bytes @ 0x1C
  2047                           
  2048  00BC                     step@duty:	
  2049                           ; 1 bytes @ 0x1C
  2050                           
  2051  00BC                     run@duty:	
  2052                           ; 2 bytes @ 0x1C
  2053                           
  2054  00BC                     sys@duty:	
  2055                           ; 2 bytes @ 0x1C
  2056                           
  2057                           
  2058                           ; 2 bytes @ 0x1C
  2059  00BC                     	ds	2
  2060  00BE                     ??_sys:	
  2061  00BE                     step@time:	
  2062                           ; 1 bytes @ 0x1E
  2063                           
  2064                           
  2065                           ; 4 bytes @ 0x1E
  2066  00BE                     	ds	2
  2067  00C0                     sys@valueAD:	
  2068                           
  2069                           ; 2 bytes @ 0x20
  2070  00C0                     	ds	2
  2071  00C2                     sys@max_duty:	
  2072                           
  2073                           ; 2 bytes @ 0x22
  2074  00C2                     	ds	2
  2075  00C4                     ??_choice:	
  2076                           
  2077                           ; 1 bytes @ 0x24
  2078  00C4                     	ds	5
  2079  00C9                     ??_getData:	
  2080                           
  2081                           ; 1 bytes @ 0x29
  2082  00C9                     	ds	1
  2083  00CA                     getData@n:	
  2084                           
  2085                           ; 1 bytes @ 0x2A
  2086  00CA                     	ds	1
  2087  00CB                     getData@data:	
  2088                           
  2089                           ; 1 bytes @ 0x2B
  2090  00CB                     	ds	1
  2091  00CC                     getData@i:	
  2092                           
  2093                           ; 2 bytes @ 0x2C
  2094  00CC                     	ds	2
  2095                           
  2096                           	psect	cstackCOMMON
  2097  0070                     __pcstackCOMMON:	
  2098  0070                     ?_isdigit:	
  2099  0070                     ?_acquire:	
  2100                           ; 1 bit 
  2101                           
  2102  0070                     ?_stop:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105  0070                     ?_help:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0070                     ?_getData:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0070                     ?_choice:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0070                     ?_status:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0070                     ?_adReadA0:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0070                     ?_USARTWriteChar:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0070                     ?_USARTHandleRxInt:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0070                     ??_USARTHandleRxInt:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0070                     ?_USARTReadData:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0070                     ?_USARTDataAvailable:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ?_USARTGotoNewLine:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_init:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ?_ISR:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_main:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?i1_USARTWriteChar:	
  2148                           ; 1 bytes @ 0x0
  2149                           
  2150  0070                     ??i1_USARTWriteChar:	
  2151                           ; 1 bytes @ 0x0
  2152                           
  2153  0070                     ?i1_USARTDataAvailable:	
  2154                           ; 1 bytes @ 0x0
  2155                           
  2156  0070                     ??i1_USARTDataAvailable:	
  2157                           ; 1 bytes @ 0x0
  2158                           
  2159  0070                     ?i1_USARTGotoNewLine:	
  2160                           ; 1 bytes @ 0x0
  2161                           
  2162  0070                     ?i1_acquire:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0070                     ?i1_sampling:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168  0070                     ?i1___lwdiv:	
  2169                           ; 2 bytes @ 0x0
  2170                           
  2171  0070                     i1USARTWriteChar@ch:	
  2172                           ; 2 bytes @ 0x0
  2173                           
  2174  0070                     i1___lwdiv@divisor:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177                           
  2178                           ; 2 bytes @ 0x0
  2179  0070                     	ds	1
  2180  0071                     ?i1_USARTWriteString:	
  2181  0071                     ??i1_USARTGotoNewLine:	
  2182                           ; 1 bytes @ 0x1
  2183                           
  2184  0071                     i1USARTWriteString@str:	
  2185                           ; 1 bytes @ 0x1
  2186                           
  2187                           
  2188                           ; 2 bytes @ 0x1
  2189  0071                     	ds	1
  2190  0072                     ??i1_sampling:	
  2191  0072                     i1___lwdiv@dividend:	
  2192                           ; 1 bytes @ 0x2
  2193                           
  2194                           
  2195                           ; 2 bytes @ 0x2
  2196  0072                     	ds	1
  2197  0073                     ??i1_USARTWriteString:	
  2198                           
  2199                           ; 1 bytes @ 0x3
  2200  0073                     	ds	1
  2201  0074                     ??i1___lwdiv:	
  2202  0074                     USARTHandleRxInt@data:	
  2203                           ; 1 bytes @ 0x4
  2204                           
  2205                           
  2206                           ; 1 bytes @ 0x4
  2207  0074                     	ds	1
  2208  0075                     i1___lwdiv@quotient:	
  2209                           
  2210                           ; 2 bytes @ 0x5
  2211  0075                     	ds	2
  2212  0077                     i1___lwdiv@counter:	
  2213                           
  2214                           ; 1 bytes @ 0x7
  2215  0077                     	ds	1
  2216  0078                     ?i1___lwmod:	
  2217  0078                     i1___lwmod@divisor:	
  2218                           ; 2 bytes @ 0x8
  2219                           
  2220                           
  2221                           ; 2 bytes @ 0x8
  2222  0078                     	ds	2
  2223  007A                     i1___lwmod@dividend:	
  2224                           
  2225                           ; 2 bytes @ 0xA
  2226  007A                     	ds	2
  2227  007C                     ??i1___lwmod:	
  2228                           
  2229                           ; 1 bytes @ 0xC
  2230  007C                     	ds	1
  2231  007D                     i1___lwmod@counter:	
  2232                           
  2233                           ; 1 bytes @ 0xD
  2234  007D                     	ds	1
  2235  007E                     ??i1_acquire:	
  2236                           
  2237                           	psect	cstackBANK0
  2238  0020                     __pcstackBANK0:	
  2239                           ; 1 bytes @ 0xE
  2240                           
  2241  0020                     ?i1_sprintf:	
  2242  0020                     i1sprintf@f:	
  2243                           ; 2 bytes @ 0x0
  2244                           
  2245                           
  2246                           ; 2 bytes @ 0x0
  2247  0020                     	ds	4
  2248  0024                     ??i1_sprintf:	
  2249                           
  2250                           ; 1 bytes @ 0x4
  2251  0024                     	ds	3
  2252  0027                     i1sprintf@ap:	
  2253                           
  2254                           ; 1 bytes @ 0x7
  2255  0027                     	ds	1
  2256  0028                     i1sprintf@flag:	
  2257                           
  2258                           ; 1 bytes @ 0x8
  2259  0028                     	ds	1
  2260  0029                     i1sprintf@prec:	
  2261                           
  2262                           ; 1 bytes @ 0x9
  2263  0029                     	ds	1
  2264  002A                     i1sprintf@val:	
  2265                           
  2266                           ; 2 bytes @ 0xA
  2267  002A                     	ds	2
  2268  002C                     i1sprintf@sp:	
  2269                           
  2270                           ; 1 bytes @ 0xC
  2271  002C                     	ds	1
  2272  002D                     i1sprintf@c:	
  2273                           
  2274                           ; 1 bytes @ 0xD
  2275  002D                     	ds	1
  2276  002E                     i1acquire@valueAD:	
  2277                           
  2278                           ; 2 bytes @ 0xE
  2279  002E                     	ds	2
  2280  0030                     ??_ISR:	
  2281                           
  2282                           ; 1 bytes @ 0x10
  2283  0030                     	ds	5
  2284  0035                     ?_strcpy:	
  2285  0035                     ?_strcat:	
  2286                           ; 1 bytes @ 0x15
  2287                           
  2288  0035                     ??_isdigit:	
  2289                           ; 1 bytes @ 0x15
  2290                           
  2291  0035                     ?_USARTInit:	
  2292                           ; 1 bytes @ 0x15
  2293                           
  2294  0035                     ??_USARTWriteChar:	
  2295                           ; 1 bytes @ 0x15
  2296                           
  2297  0035                     ??_USARTReadData:	
  2298                           ; 1 bytes @ 0x15
  2299                           
  2300  0035                     ??_USARTDataAvailable:	
  2301                           ; 1 bytes @ 0x15
  2302                           
  2303  0035                     ??_init:	
  2304                           ; 1 bytes @ 0x15
  2305                           
  2306  0035                     ?_memcmp:	
  2307                           ; 1 bytes @ 0x15
  2308                           
  2309  0035                     ?_strlen:	
  2310                           ; 2 bytes @ 0x15
  2311                           
  2312  0035                     ?_strchr:	
  2313                           ; 2 bytes @ 0x15
  2314                           
  2315  0035                     ?_sampling:	
  2316                           ; 2 bytes @ 0x15
  2317                           
  2318  0035                     ?___wmul:	
  2319                           ; 2 bytes @ 0x15
  2320                           
  2321  0035                     ?___lwdiv:	
  2322                           ; 2 bytes @ 0x15
  2323                           
  2324  0035                     ?___ftpack:	
  2325                           ; 2 bytes @ 0x15
  2326                           
  2327  0035                     ?___lmul:	
  2328                           ; 3 bytes @ 0x15
  2329                           
  2330  0035                     USARTWriteChar@ch:	
  2331                           ; 4 bytes @ 0x15
  2332                           
  2333  0035                     _isdigit$823:	
  2334                           ; 1 bytes @ 0x15
  2335                           
  2336  0035                     USARTInit@baud_rate:	
  2337                           ; 1 bytes @ 0x15
  2338                           
  2339  0035                     ___wmul@multiplier:	
  2340                           ; 2 bytes @ 0x15
  2341                           
  2342  0035                     ___lwdiv@divisor:	
  2343                           ; 2 bytes @ 0x15
  2344                           
  2345  0035                     memcmp@s2:	
  2346                           ; 2 bytes @ 0x15
  2347                           
  2348  0035                     strcat@from:	
  2349                           ; 2 bytes @ 0x15
  2350                           
  2351  0035                     strcpy@from:	
  2352                           ; 2 bytes @ 0x15
  2353                           
  2354  0035                     strlen@s:	
  2355                           ; 2 bytes @ 0x15
  2356                           
  2357  0035                     strchr@ptr:	
  2358                           ; 2 bytes @ 0x15
  2359                           
  2360  0035                     ___ftpack@arg:	
  2361                           ; 2 bytes @ 0x15
  2362                           
  2363  0035                     ___lmul@multiplier:	
  2364                           ; 3 bytes @ 0x15
  2365                           
  2366                           
  2367                           ; 4 bytes @ 0x15
  2368  0035                     	ds	1
  2369  0036                     ?_USARTWriteString:	
  2370  0036                     ??_USARTGotoNewLine:	
  2371                           ; 1 bytes @ 0x16
  2372                           
  2373  0036                     USARTReadData@data:	
  2374                           ; 1 bytes @ 0x16
  2375                           
  2376  0036                     isdigit@c:	
  2377                           ; 1 bytes @ 0x16
  2378                           
  2379  0036                     USARTWriteString@str:	
  2380                           ; 1 bytes @ 0x16
  2381                           
  2382                           
  2383                           ; 2 bytes @ 0x16
  2384  0036                     	ds	1
  2385  0037                     ??_strlen:	
  2386  0037                     ??_strcpy:	
  2387                           ; 1 bytes @ 0x17
  2388                           
  2389  0037                     ??_strcat:	
  2390                           ; 1 bytes @ 0x17
  2391                           
  2392  0037                     ??_USARTInit:	
  2393                           ; 1 bytes @ 0x17
  2394                           
  2395  0037                     ??_sampling:	
  2396                           ; 1 bytes @ 0x17
  2397                           
  2398  0037                     ___wmul@multiplicand:	
  2399                           ; 1 bytes @ 0x17
  2400                           
  2401  0037                     ___lwdiv@dividend:	
  2402                           ; 2 bytes @ 0x17
  2403                           
  2404  0037                     memcmp@n:	
  2405                           ; 2 bytes @ 0x17
  2406                           
  2407  0037                     strchr@chr:	
  2408                           ; 2 bytes @ 0x17
  2409                           
  2410                           
  2411                           ; 2 bytes @ 0x17
  2412  0037                     	ds	1
  2413  0038                     ??_USARTWriteString:	
  2414  0038                     ?_USARTWriteLine:	
  2415                           ; 1 bytes @ 0x18
  2416                           
  2417  0038                     ___ftpack@exp:	
  2418                           ; 1 bytes @ 0x18
  2419                           
  2420  0038                     strcat@to:	
  2421                           ; 1 bytes @ 0x18
  2422                           
  2423  0038                     strcpy@to:	
  2424                           ; 1 bytes @ 0x18
  2425                           
  2426  0038                     USARTWriteLine@str:	
  2427                           ; 1 bytes @ 0x18
  2428                           
  2429                           
  2430                           ; 2 bytes @ 0x18
  2431  0038                     	ds	1
  2432  0039                     ??_memcmp:	
  2433  0039                     ??_strchr:	
  2434                           ; 1 bytes @ 0x19
  2435                           
  2436  0039                     ??___wmul:	
  2437                           ; 1 bytes @ 0x19
  2438                           
  2439  0039                     ??___lwdiv:	
  2440                           ; 1 bytes @ 0x19
  2441                           
  2442  0039                     ___ftpack@sign:	
  2443                           ; 1 bytes @ 0x19
  2444                           
  2445  0039                     strcat@cp:	
  2446                           ; 1 bytes @ 0x19
  2447                           
  2448  0039                     strcpy@cp:	
  2449                           ; 1 bytes @ 0x19
  2450                           
  2451  0039                     ___wmul@product:	
  2452                           ; 1 bytes @ 0x19
  2453                           
  2454  0039                     strlen@cp:	
  2455                           ; 2 bytes @ 0x19
  2456                           
  2457  0039                     ___lmul@multiplicand:	
  2458                           ; 2 bytes @ 0x19
  2459                           
  2460                           
  2461                           ; 4 bytes @ 0x19
  2462  0039                     	ds	1
  2463  003A                     ??_help:	
  2464  003A                     ??___ftpack:	
  2465                           ; 1 bytes @ 0x1A
  2466                           
  2467  003A                     ??_USARTWriteLine:	
  2468                           ; 1 bytes @ 0x1A
  2469                           
  2470  003A                     ___lwdiv@counter:	
  2471                           ; 1 bytes @ 0x1A
  2472                           
  2473                           
  2474                           ; 1 bytes @ 0x1A
  2475  003A                     	ds	1
  2476  003B                     ?_srand:	
  2477  003B                     ?_strcspn:	
  2478                           ; 1 bytes @ 0x1B
  2479                           
  2480  003B                     ?_atoi:	
  2481                           ; 2 bytes @ 0x1B
  2482                           
  2483  003B                     memcmp@s1:	
  2484                           ; 2 bytes @ 0x1B
  2485                           
  2486  003B                     ___lwdiv@quotient:	
  2487                           ; 1 bytes @ 0x1B
  2488                           
  2489  003B                     srand@x:	
  2490                           ; 2 bytes @ 0x1B
  2491                           
  2492  003B                     strcspn@s2:	
  2493                           ; 2 bytes @ 0x1B
  2494                           
  2495                           
  2496                           ; 2 bytes @ 0x1B
  2497  003B                     	ds	2
  2498  003D                     ??_strcspn:	
  2499  003D                     ??_atoi:	
  2500                           ; 1 bytes @ 0x1D
  2501                           
  2502  003D                     ??_srand:	
  2503                           ; 1 bytes @ 0x1D
  2504                           
  2505  003D                     ??___lmul:	
  2506                           ; 1 bytes @ 0x1D
  2507                           
  2508  003D                     ?___awtoft:	
  2509                           ; 1 bytes @ 0x1D
  2510                           
  2511  003D                     ___awtoft@c:	
  2512                           ; 3 bytes @ 0x1D
  2513                           
  2514                           
  2515                           ; 2 bytes @ 0x1D
  2516  003D                     	ds	1
  2517  003E                     ___lmul@product:	
  2518                           
  2519                           ; 4 bytes @ 0x1E
  2520  003E                     	ds	1
  2521  003F                     atoi@sign:	
  2522  003F                     strcspn@i:	
  2523                           ; 1 bytes @ 0x1F
  2524                           
  2525                           
  2526                           ; 2 bytes @ 0x1F
  2527  003F                     	ds	1
  2528  0040                     ??___awtoft:	
  2529  0040                     atoi@a:	
  2530                           ; 1 bytes @ 0x20
  2531                           
  2532                           
  2533                           ; 2 bytes @ 0x20
  2534  0040                     	ds	1
  2535  0041                     strcspn@s1:	
  2536                           
  2537                           ; 1 bytes @ 0x21
  2538  0041                     	ds	1
  2539  0042                     ?_rand:	
  2540  0042                     atoi@s:	
  2541                           ; 2 bytes @ 0x22
  2542                           
  2543  0042                     ___awtoft@sign:	
  2544                           ; 1 bytes @ 0x22
  2545                           
  2546                           
  2547                           ; 1 bytes @ 0x22
  2548  0042                     	ds	1
  2549  0043                     ?___ftdiv:	
  2550  0043                     ?___ftmul:	
  2551                           ; 3 bytes @ 0x23
  2552                           
  2553  0043                     ___ftdiv@f2:	
  2554                           ; 3 bytes @ 0x23
  2555                           
  2556  0043                     ___ftmul@f1:	
  2557                           ; 3 bytes @ 0x23
  2558                           
  2559                           
  2560                           ; 3 bytes @ 0x23
  2561  0043                     	ds	1
  2562  0044                     ??_rand:	
  2563                           
  2564                           ; 1 bytes @ 0x24
  2565  0044                     	ds	2
  2566  0046                     ___ftdiv@f1:	
  2567  0046                     ___ftmul@f2:	
  2568                           ; 3 bytes @ 0x26
  2569                           
  2570                           
  2571                           ; 3 bytes @ 0x26
  2572  0046                     	ds	3
  2573  0049                     ??_stop:	
  2574  0049                     ??___awmod:	
  2575                           ; 1 bytes @ 0x29
  2576                           
  2577  0049                     ??___lwmod:	
  2578                           ; 1 bytes @ 0x29
  2579                           
  2580                           
  2581                           ; 1 bytes @ 0x29
  2582  0049                     	ds	1
  2583  004A                     ??_acquire:	
  2584  004A                     ??_step:	
  2585                           ; 1 bytes @ 0x2A
  2586                           
  2587  004A                     ??_run:	
  2588                           ; 1 bytes @ 0x2A
  2589                           
  2590  004A                     ??_status:	
  2591                           ; 1 bytes @ 0x2A
  2592                           
  2593  004A                     ??_adReadA0:	
  2594                           ; 1 bytes @ 0x2A
  2595                           
  2596  004A                     ??_main:	
  2597                           ; 1 bytes @ 0x2A
  2598                           
  2599                           
  2600                           	psect	maintext
  2601  1E45                     __pmaintext:	
  2602                           ; 1 bytes @ 0x2A
  2603 ;;
  2604 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2605 ;;
  2606 ;; *************** function _main *****************
  2607 ;; Defined at:
  2608 ;;		line 124 in file "main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : B00/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2622 ;;      Params:         0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels required when called:   11
  2628 ;; This function calls:
  2629 ;;		_USARTInit
  2630 ;;		_USARTWriteString
  2631 ;;		_getData
  2632 ;;		_help
  2633 ;;		_init
  2634 ;;		_stop
  2635 ;; This function is called by:
  2636 ;;		Startup code after reset
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           
  2641                           ;psect for function _main
  2642  1E45                     _main:	
  2643                           
  2644                           ;main.c: 126: USARTInit(19200);
  2645                           
  2646                           ;incstack = 0
  2647 ;; hardware stack exceeded
  2648                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2649  1E45  3000               	movlw	0
  2650  1E46  1283               	bcf	3,5	;RP0=0, select bank0
  2651  1E47  1303               	bcf	3,6	;RP1=0, select bank0
  2652  1E48  00B5               	movwf	USARTInit@baud_rate
  2653  1E49  304B               	movlw	75
  2654  1E4A  00B6               	movwf	USARTInit@baud_rate+1
  2655  1E4B  160A  118A  2176  160A  158A  	fcall	_USARTInit
  2656                           
  2657                           ;main.c: 128: init();
  2658  1E50  160A  158A  26DA  160A  158A  	fcall	_init
  2659                           
  2660                           ;main.c: 130: pwm=0;
  2661  1E55  1683               	bsf	3,5	;RP0=1, select bank1
  2662  1E56  1303               	bcf	3,6	;RP1=0, select bank1
  2663  1E57  01CE               	clrf	_pwm^(0+128)
  2664  1E58  01CF               	clrf	(_pwm+1)^(0+128)
  2665                           
  2666                           ;main.c: 132: buffer = 0;
  2667  1E59  01D0               	clrf	_buffer^(0+128)
  2668                           
  2669                           ;main.c: 134: stop();
  2670  1E5A  160A  158A  2482  160A  158A  	fcall	_stop
  2671                           
  2672                           ;main.c: 136: help();
  2673  1E5F  120A  158A  2232  160A  158A  	fcall	_help
  2674                           
  2675                           ;main.c: 137: USARTWriteString(">");
  2676  1E64  3058               	movlw	low (STR_1| (0+32768))
  2677  1E65  1283               	bcf	3,5	;RP0=0, select bank0
  2678  1E66  1303               	bcf	3,6	;RP1=0, select bank0
  2679  1E67  00B6               	movwf	USARTWriteString@str
  2680  1E68  3086               	movlw	high (STR_1| (0+32768))
  2681  1E69  00B7               	movwf	USARTWriteString@str+1
  2682  1E6A  160A  158A  25F3  160A  158A  	fcall	_USARTWriteString
  2683  1E6F                     l4637:	
  2684                           ;main.c: 139: while(1)
  2685                           
  2686                           
  2687                           ;main.c: 140: {
  2688                           ;main.c: 142: getData();
  2689  1E6F  160A  118A  22A8  160A  158A  	fcall	_getData
  2690  1E74  2E6F               	goto	l4637
  2691  1E75                     __end_of_main:	
  2692                           ;main.c: 143: }
  2693                           ;main.c: 144: return;
  2694                           
  2695                           
  2696                           	psect	text1
  2697  1EDA                     __ptext1:	
  2698 ;; *************** function _init *****************
  2699 ;; Defined at:
  2700 ;;		line 67 in file "main.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2714 ;;      Params:         0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0
  2717 ;;      Totals:         0       0       0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    4
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_main
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           
  2729                           ;psect for function _init
  2730  1EDA                     _init:	
  2731                           
  2732                           ;main.c: 69: TRISA = 0b00000001;
  2733                           
  2734                           ;incstack = 0
  2735                           ; Regs used in _init: [wreg+status,2]
  2736  1EDA  3001               	movlw	1
  2737  1EDB  1683               	bsf	3,5	;RP0=1, select bank1
  2738  1EDC  1303               	bcf	3,6	;RP1=0, select bank1
  2739  1EDD  0085               	movwf	5	;volatile
  2740                           
  2741                           ;main.c: 70: PORTA = 0b00000000;
  2742  1EDE  1283               	bcf	3,5	;RP0=0, select bank0
  2743  1EDF  1303               	bcf	3,6	;RP1=0, select bank0
  2744  1EE0  0185               	clrf	5	;volatile
  2745                           
  2746                           ;main.c: 71: TRISB = 0b00000001;
  2747  1EE1  3001               	movlw	1
  2748  1EE2  1683               	bsf	3,5	;RP0=1, select bank1
  2749  1EE3  1303               	bcf	3,6	;RP1=0, select bank1
  2750  1EE4  0086               	movwf	6	;volatile
  2751                           
  2752                           ;main.c: 72: PORTB = 0b00000000;
  2753  1EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2754  1EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2755  1EE7  0186               	clrf	6	;volatile
  2756                           
  2757                           ;main.c: 73: TRISC = 0b10000000;
  2758  1EE8  3080               	movlw	128
  2759  1EE9  1683               	bsf	3,5	;RP0=1, select bank1
  2760  1EEA  1303               	bcf	3,6	;RP1=0, select bank1
  2761  1EEB  0087               	movwf	7	;volatile
  2762                           
  2763                           ;main.c: 74: PORTC = 0b00000000;
  2764  1EEC  1283               	bcf	3,5	;RP0=0, select bank0
  2765  1EED  1303               	bcf	3,6	;RP1=0, select bank0
  2766  1EEE  0187               	clrf	7	;volatile
  2767                           
  2768                           ;main.c: 75: TRISD = 0b00000000;
  2769  1EEF  1683               	bsf	3,5	;RP0=1, select bank1
  2770  1EF0  1303               	bcf	3,6	;RP1=0, select bank1
  2771  1EF1  0188               	clrf	8	;volatile
  2772                           
  2773                           ;main.c: 76: PORTD = 0b00000000;
  2774  1EF2  1283               	bcf	3,5	;RP0=0, select bank0
  2775  1EF3  1303               	bcf	3,6	;RP1=0, select bank0
  2776  1EF4  0188               	clrf	8	;volatile
  2777                           
  2778                           ;main.c: 79: ADCON0 = 0b10000001;
  2779  1EF5  3081               	movlw	129
  2780  1EF6  009F               	movwf	31	;volatile
  2781                           
  2782                           ;main.c: 80: ADCON1 = 0b10001110;
  2783  1EF7  308E               	movlw	142
  2784  1EF8  1683               	bsf	3,5	;RP0=1, select bank1
  2785  1EF9  1303               	bcf	3,6	;RP1=0, select bank1
  2786  1EFA  009F               	movwf	31	;volatile
  2787                           
  2788                           ;main.c: 83: OPTION_REG = 0b00000111;
  2789  1EFB  3007               	movlw	7
  2790  1EFC  0081               	movwf	1	;volatile
  2791                           
  2792                           ;main.c: 84: INTCON = 0b10100000;
  2793  1EFD  30A0               	movlw	160
  2794  1EFE  008B               	movwf	11	;volatile
  2795                           
  2796                           ;main.c: 86: TMR0 = 236;
  2797  1EFF  30EC               	movlw	236
  2798  1F00  1283               	bcf	3,5	;RP0=0, select bank0
  2799  1F01  1303               	bcf	3,6	;RP1=0, select bank0
  2800  1F02  0081               	movwf	1	;volatile
  2801                           
  2802                           ;main.c: 89: CCPR1L = 0b00000000;
  2803  1F03  0195               	clrf	21	;volatile
  2804                           
  2805                           ;main.c: 90: CCP1CON = 0b00001100;
  2806  1F04  300C               	movlw	12
  2807  1F05  0097               	movwf	23	;volatile
  2808                           
  2809                           ;main.c: 91: CCP2CON = 0b00001100;
  2810  1F06  300C               	movlw	12
  2811  1F07  009D               	movwf	29	;volatile
  2812                           
  2813                           ;main.c: 92: PR2 = 255;
  2814  1F08  30FF               	movlw	255
  2815  1F09  1683               	bsf	3,5	;RP0=1, select bank1
  2816  1F0A  1303               	bcf	3,6	;RP1=0, select bank1
  2817  1F0B  0092               	movwf	18	;volatile
  2818                           
  2819                           ;main.c: 93: T2CON = 0b00000111;
  2820  1F0C  3007               	movlw	7
  2821  1F0D  1283               	bcf	3,5	;RP0=0, select bank0
  2822  1F0E  1303               	bcf	3,6	;RP1=0, select bank0
  2823  1F0F  0092               	movwf	18	;volatile
  2824  1F10  0008               	return
  2825  1F11                     __end_of_init:	
  2826                           
  2827                           	psect	text2
  2828  12A8                     __ptext2:	
  2829 ;; *************** function _getData *****************
  2830 ;; Defined at:
  2831 ;;		line 196 in file "main.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;		None
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  i               2   44[BANK1 ] int 
  2836 ;;  data            1   43[BANK1 ] unsigned char 
  2837 ;;  n               1   42[BANK1 ] unsigned char 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2847 ;;      Params:         0       0       0       0       0
  2848 ;;      Locals:         0       0       4       0       0
  2849 ;;      Temps:          0       0       1       0       0
  2850 ;;      Totals:         0       0       5       0       0
  2851 ;;Total ram usage:        5 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:   10
  2854 ;; This function calls:
  2855 ;;		_USARTDataAvailable
  2856 ;;		_USARTReadData
  2857 ;;		_USARTWriteChar
  2858 ;;		_choice
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function _getData
  2866  12A8                     _getData:	
  2867                           
  2868                           ;main.c: 198: uint8_t n= USARTDataAvailable();
  2869                           
  2870                           ;incstack = 0
  2871 ;; hardware stack exceeded
  2872                           ; Regs used in _getData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2873  12A8  160A  158A  2589  160A  118A  	fcall	_USARTDataAvailable
  2874  12AD  1683               	bsf	3,5	;RP0=1, select bank1
  2875  12AE  1303               	bcf	3,6	;RP1=0, select bank1
  2876  12AF  00C9               	movwf	??_getData^(0+128)
  2877  12B0  0849               	movf	??_getData^(0+128),w
  2878  12B1  00CA               	movwf	getData@n^(0+128)
  2879                           
  2880                           ;main.c: 200: if(n!=0){
  2881  12B2  084A               	movf	getData@n^(0+128),w
  2882  12B3  1903               	btfsc	3,2
  2883  12B4  0008               	return
  2884                           
  2885                           ;main.c: 201: char data = USARTReadData();
  2886  12B5  160A  158A  2543  160A  118A  	fcall	_USARTReadData
  2887  12BA  1683               	bsf	3,5	;RP0=1, select bank1
  2888  12BB  1303               	bcf	3,6	;RP1=0, select bank1
  2889  12BC  00C9               	movwf	??_getData^(0+128)
  2890  12BD  0849               	movf	??_getData^(0+128),w
  2891  12BE  00CB               	movwf	getData@data^(0+128)
  2892                           
  2893                           ;main.c: 203: if(data == '\r'){
  2894  12BF  300D               	movlw	13
  2895  12C0  064B               	xorwf	getData@data^(0+128),w
  2896  12C1  1D03               	btfss	3,2
  2897  12C2  2AE6               	goto	l4513
  2898                           
  2899                           ;main.c: 204: choice();
  2900  12C3  120A  158A  23DE  160A  118A  	fcall	_choice
  2901                           
  2902                           ;main.c: 206: buffer = 0;
  2903  12C8  1683               	bsf	3,5	;RP0=1, select bank1
  2904  12C9  1303               	bcf	3,6	;RP1=0, select bank1
  2905  12CA  01D0               	clrf	_buffer^(0+128)
  2906                           
  2907                           ;main.c: 207: for(int i=0 ; i<25;i++){
  2908  12CB  01CC               	clrf	getData@i^(0+128)
  2909  12CC  01CD               	clrf	(getData@i+1)^(0+128)
  2910  12CD                     L1:	
  2911  12CD  084D               	movf	(getData@i+1)^(0+128),w
  2912  12CE  3A80               	xorlw	128
  2913  12CF  00FF               	movwf	127
  2914  12D0  3080               	movlw	128
  2915  12D1  027F               	subwf	127,w
  2916  12D2  1D03               	skipz
  2917  12D3  2AD6               	goto	u5605
  2918  12D4  3019               	movlw	25
  2919  12D5  024C               	subwf	getData@i^(0+128),w
  2920  12D6                     u5605:	
  2921  12D6  1803               	btfsc	3,0
  2922  12D7  0008               	return
  2923                           
  2924                           ;main.c: 208: content[i] = '\0';
  2925  12D8  1683               	bsf	3,5	;RP0=1, select bank1
  2926  12D9  1303               	bcf	3,6	;RP1=0, select bank1
  2927  12DA  084C               	movf	getData@i^(0+128),w
  2928  12DB  3ED1               	addlw	(low (_content| 0))& (0+255)
  2929  12DC  0084               	movwf	4
  2930  12DD  1383               	bcf	3,7	;select IRP bank1
  2931  12DE  0180               	clrf	0
  2932  12DF  3001               	movlw	1
  2933  12E0  07CC               	addwf	getData@i^(0+128),f
  2934  12E1  1803               	skipnc
  2935  12E2  0ACD               	incf	(getData@i+1)^(0+128),f
  2936  12E3  3000               	movlw	0
  2937  12E4  07CD               	addwf	(getData@i+1)^(0+128),f
  2938  12E5  2ACD               	goto	L1
  2939  12E6                     l4513:	
  2940                           ;main.c: 209: }
  2941                           ;main.c: 210: }
  2942                           
  2943                           
  2944                           ;main.c: 211: else{
  2945                           ;main.c: 213: content[buffer] = data;
  2946  12E6  1683               	bsf	3,5	;RP0=1, select bank1
  2947  12E7  1303               	bcf	3,6	;RP1=0, select bank1
  2948  12E8  084B               	movf	getData@data^(0+128),w
  2949  12E9  00C9               	movwf	??_getData^(0+128)
  2950  12EA  0850               	movf	_buffer^(0+128),w
  2951  12EB  3ED1               	addlw	(low (_content| 0))& (0+255)
  2952  12EC  0084               	movwf	4
  2953  12ED  0849               	movf	??_getData^(0+128),w
  2954  12EE  1383               	bcf	3,7	;select IRP bank1
  2955  12EF  0080               	movwf	0
  2956                           
  2957                           ;main.c: 215: USARTWriteChar(content[buffer]);
  2958  12F0  0850               	movf	_buffer^(0+128),w
  2959  12F1  3ED1               	addlw	(low (_content| 0))& (0+255)
  2960  12F2  0084               	movwf	4
  2961  12F3  0800               	movf	0,w
  2962  12F4  160A  158A  245E   	fcall	_USARTWriteChar
  2963                           
  2964                           ;main.c: 217: buffer++;
  2965  12F7  3001               	movlw	1
  2966  12F8  1683               	bsf	3,5	;RP0=1, select bank1
  2967  12F9  1303               	bcf	3,6	;RP1=0, select bank1
  2968  12FA  00C9               	movwf	??_getData^(0+128)
  2969  12FB  0849               	movf	??_getData^(0+128),w
  2970  12FC  07D0               	addwf	_buffer^(0+128),f
  2971  12FD  0008               	return
  2972  12FE                     __end_of_getData:	
  2973                           
  2974                           	psect	text3
  2975  0BDE                     __ptext3:	
  2976 ;; *************** function _choice *****************
  2977 ;; Defined at:
  2978 ;;		line 222 in file "main.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  i               2   22[BANK2 ] int 
  2983 ;;  i               2   20[BANK2 ] int 
  2984 ;;  i               2   24[BANK2 ] int 
  2985 ;;  duty           10   52[BANK3 ] unsigned char [10]
  2986 ;;  firstP          2   14[BANK2 ] int 
  2987 ;;  secondP         2   66[BANK3 ] int 
  2988 ;;  duty           10   42[BANK3 ] unsigned char [10]
  2989 ;;  firstP          2   12[BANK2 ] int 
  2990 ;;  secondP         2   64[BANK3 ] int 
  2991 ;;  time           10    0[BANK2 ] unsigned char [10]
  2992 ;;  duty           10   32[BANK3 ] unsigned char [10]
  2993 ;;  secondP         2   18[BANK2 ] int 
  2994 ;;  duty_i          2   16[BANK2 ] int 
  2995 ;;  firstP          2   10[BANK2 ] int 
  2996 ;;  time_1          2   68[BANK3 ] int 
  2997 ;;  thirdP          2   62[BANK3 ] int 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         0       0       0      38      26
  3009 ;;      Temps:          0       0       5       0       0
  3010 ;;      Totals:         0       0       5      38      26
  3011 ;;Total ram usage:       69 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    9
  3014 ;; This function calls:
  3015 ;;		_USARTGotoNewLine
  3016 ;;		_USARTWriteLine
  3017 ;;		_USARTWriteString
  3018 ;;		_acquire
  3019 ;;		_atoi
  3020 ;;		_help
  3021 ;;		_memcmp
  3022 ;;		_run
  3023 ;;		_status
  3024 ;;		_step
  3025 ;;		_stop
  3026 ;;		_strcspn
  3027 ;;		_strlen
  3028 ;;		_sys
  3029 ;; This function is called by:
  3030 ;;		_getData
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _choice
  3036  0BDE                     _choice:	
  3037                           
  3038                           ;main.c: 223: if(memcmp(content, "step(", 5) == 0){
  3039                           
  3040                           ;incstack = 0
  3041 ;; hardware stack exceeded
  3042                           ; Regs used in _choice: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3043  0BDE  3041               	movlw	low (STR_36| (0+32768))
  3044  0BDF  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0BE0  1303               	bcf	3,6	;RP1=0, select bank0
  3046  0BE1  00B5               	movwf	memcmp@s2
  3047  0BE2  3086               	movlw	high (STR_36| (0+32768))
  3048  0BE3  00B6               	movwf	memcmp@s2+1
  3049  0BE4  3005               	movlw	5
  3050  0BE5  00B7               	movwf	memcmp@n
  3051  0BE6  3000               	movlw	0
  3052  0BE7  00B8               	movwf	memcmp@n+1
  3053  0BE8  30D1               	movlw	(low (_content| 0))& (0+255)
  3054  0BE9  160A  118A  20A5  120A  158A  	fcall	_memcmp
  3055  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  3057  0BF0  0835               	movf	?_memcmp,w
  3058  0BF1  0436               	iorwf	?_memcmp+1,w
  3059  0BF2  1D03               	btfss	3,2
  3060  0BF3  2D96               	goto	l4417
  3061                           
  3062                           ;main.c: 224: char duty[10];
  3063                           ;main.c: 225: char time[10];
  3064                           ;main.c: 226: int firstP = strcspn(content, "(");
  3065  0BF4  304A               	movlw	low ((STR_40+3)| (0+32768))
  3066  0BF5  00BB               	movwf	strcspn@s2
  3067  0BF6  3086               	movlw	high ((STR_40+3)| (0+32768))
  3068  0BF7  00BC               	movwf	strcspn@s2+1
  3069  0BF8  30D1               	movlw	(low (_content| 0))& (0+255)
  3070  0BF9  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3071  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  3072  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  3073  0C00  083C               	movf	?_strcspn+1,w
  3074  0C01  1283               	bcf	3,5	;RP0=0, select bank2
  3075  0C02  1703               	bsf	3,6	;RP1=1, select bank2
  3076  0C03  00DB               	movwf	(choice@firstP+1)^(0+256)
  3077  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  3078  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  3079  0C06  083B               	movf	?_strcspn,w
  3080  0C07  1283               	bcf	3,5	;RP0=0, select bank2
  3081  0C08  1703               	bsf	3,6	;RP1=1, select bank2
  3082  0C09  00DA               	movwf	choice@firstP^(0+256)
  3083                           
  3084                           ;main.c: 227: int secondP = strcspn(content, ",");
  3085  0C0A  3056               	movlw	low (STR_38| (0+32768))
  3086  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0C0D  00BB               	movwf	strcspn@s2
  3089  0C0E  3086               	movlw	high (STR_38| (0+32768))
  3090  0C0F  00BC               	movwf	strcspn@s2+1
  3091  0C10  30D1               	movlw	(low (_content| 0))& (0+255)
  3092  0C11  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3093  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0C18  083C               	movf	?_strcspn+1,w
  3096  0C19  1283               	bcf	3,5	;RP0=0, select bank2
  3097  0C1A  1703               	bsf	3,6	;RP1=1, select bank2
  3098  0C1B  00E3               	movwf	(choice@secondP+1)^(0+256)
  3099  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  3100  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  3101  0C1E  083B               	movf	?_strcspn,w
  3102  0C1F  1283               	bcf	3,5	;RP0=0, select bank2
  3103  0C20  1703               	bsf	3,6	;RP1=1, select bank2
  3104  0C21  00E2               	movwf	choice@secondP^(0+256)
  3105                           
  3106                           ;main.c: 228: int thirdP = strcspn(content, ")");
  3107  0C22  300E               	movlw	low ((STR_48+8)| (0+32768))
  3108  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  3110  0C25  00BB               	movwf	strcspn@s2
  3111  0C26  3086               	movlw	high ((STR_48+8)| (0+32768))
  3112  0C27  00BC               	movwf	strcspn@s2+1
  3113  0C28  30D1               	movlw	(low (_content| 0))& (0+255)
  3114  0C29  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3115  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0C30  083C               	movf	?_strcspn+1,w
  3118  0C31  1683               	bsf	3,5	;RP0=1, select bank3
  3119  0C32  1703               	bsf	3,6	;RP1=1, select bank3
  3120  0C33  00CF               	movwf	(choice@thirdP+1)^(0+384)
  3121  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  3122  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  3123  0C36  083B               	movf	?_strcspn,w
  3124  0C37  1683               	bsf	3,5	;RP0=1, select bank3
  3125  0C38  1703               	bsf	3,6	;RP1=1, select bank3
  3126  0C39  00CE               	movwf	choice@thirdP^(0+384)
  3127                           
  3128                           ;main.c: 229: for(int i = 0 ; i<strlen(content); i++){
  3129  0C3A  1283               	bcf	3,5	;RP0=0, select bank2
  3130  0C3B  1703               	bsf	3,6	;RP1=1, select bank2
  3131  0C3C  01E8               	clrf	choice@i^(0+256)
  3132  0C3D  01E9               	clrf	(choice@i+1)^(0+256)
  3133  0C3E                     l4407:	
  3134  0C3E  30D1               	movlw	(low (_content| 0))& (0+255)
  3135  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  3137  0C41  00B5               	movwf	strlen@s
  3138  0C42  3000               	movlw	0
  3139  0C43  00B6               	movwf	strlen@s+1
  3140  0C44  160A  158A  25AC  120A  158A  	fcall	_strlen
  3141  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  3142  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  3143  0C4B  0836               	movf	?_strlen+1,w
  3144  0C4C  1283               	bcf	3,5	;RP0=0, select bank2
  3145  0C4D  1703               	bsf	3,6	;RP1=1, select bank2
  3146  0C4E  0269               	subwf	(choice@i+1)^(0+256),w
  3147  0C4F  1D03               	skipz
  3148  0C50  2C57               	goto	u5435
  3149  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0C53  0835               	movf	?_strlen,w
  3152  0C54  1283               	bcf	3,5	;RP0=0, select bank2
  3153  0C55  1703               	bsf	3,6	;RP1=1, select bank2
  3154  0C56  0268               	subwf	choice@i^(0+256),w
  3155  0C57                     u5435:	
  3156  0C57  1803               	btfsc	3,0
  3157  0C58  2D3C               	goto	l4409
  3158                           
  3159                           ;main.c: 230: if(i < secondP - firstP - 1){
  3160  0C59  085A               	movf	choice@firstP^(0+256),w
  3161  0C5A  3E01               	addlw	1
  3162  0C5B  1683               	bsf	3,5	;RP0=1, select bank1
  3163  0C5C  1303               	bcf	3,6	;RP1=0, select bank1
  3164  0C5D  00C4               	movwf	??_choice^(0+128)
  3165  0C5E  1283               	bcf	3,5	;RP0=0, select bank2
  3166  0C5F  1703               	bsf	3,6	;RP1=1, select bank2
  3167  0C60  085B               	movf	(choice@firstP+1)^(0+256),w
  3168  0C61  1803               	skipnc
  3169  0C62  3E01               	addlw	1
  3170  0C63  3E00               	addlw	0
  3171  0C64  1683               	bsf	3,5	;RP0=1, select bank1
  3172  0C65  1303               	bcf	3,6	;RP1=0, select bank1
  3173  0C66  00C5               	movwf	(??_choice+1)^(0+128)
  3174  0C67  09C4               	comf	??_choice^(0+128),f
  3175  0C68  09C5               	comf	(??_choice^(0+128)+1),f
  3176  0C69  0AC4               	incf	??_choice^(0+128),f
  3177  0C6A  1903               	skipnz
  3178  0C6B  0AC5               	incf	(??_choice^(0+128)+1),f
  3179  0C6C  1283               	bcf	3,5	;RP0=0, select bank2
  3180  0C6D  1703               	bsf	3,6	;RP1=1, select bank2
  3181  0C6E  0862               	movf	choice@secondP^(0+256),w
  3182  0C6F  1683               	bsf	3,5	;RP0=1, select bank1
  3183  0C70  1303               	bcf	3,6	;RP1=0, select bank1
  3184  0C71  0744               	addwf	??_choice^(0+128),w
  3185  0C72  00C6               	movwf	(??_choice+2)^(0+128)
  3186  0C73  1283               	bcf	3,5	;RP0=0, select bank2
  3187  0C74  1703               	bsf	3,6	;RP1=1, select bank2
  3188  0C75  0863               	movf	(choice@secondP+1)^(0+256),w
  3189  0C76  1803               	skipnc
  3190  0C77  0A63               	incf	(choice@secondP+1)^(0+256),w
  3191  0C78  1683               	bsf	3,5	;RP0=1, select bank1
  3192  0C79  1303               	bcf	3,6	;RP1=0, select bank1
  3193  0C7A  0745               	addwf	(??_choice+1)^(0+128),w
  3194  0C7B  00C7               	movwf	(??_choice+3)^(0+128)
  3195  0C7C  1283               	bcf	3,5	;RP0=0, select bank2
  3196  0C7D  1703               	bsf	3,6	;RP1=1, select bank2
  3197  0C7E  0869               	movf	(choice@i+1)^(0+256),w
  3198  0C7F  3A80               	xorlw	128
  3199  0C80  1683               	bsf	3,5	;RP0=1, select bank1
  3200  0C81  1303               	bcf	3,6	;RP1=0, select bank1
  3201  0C82  00C8               	movwf	(??_choice+4)^(0+128)
  3202  0C83  0847               	movf	(??_choice+3)^(0+128),w
  3203  0C84  3A80               	xorlw	128
  3204  0C85  0248               	subwf	(??_choice+4)^(0+128),w
  3205  0C86  1D03               	skipz
  3206  0C87  2C8C               	goto	u5395
  3207  0C88  0846               	movf	(??_choice+2)^(0+128),w
  3208  0C89  1283               	bcf	3,5	;RP0=0, select bank2
  3209  0C8A  1703               	bsf	3,6	;RP1=1, select bank2
  3210  0C8B  0268               	subwf	choice@i^(0+256),w
  3211  0C8C                     u5395:	
  3212  0C8C  1803               	skipnc
  3213  0C8D  2CA5               	goto	l4393
  3214                           
  3215                           ;main.c: 231: duty[i] = content[firstP+i+1];
  3216  0C8E  1283               	bcf	3,5	;RP0=0, select bank2
  3217  0C8F  1703               	bsf	3,6	;RP1=1, select bank2
  3218  0C90  0868               	movf	choice@i^(0+256),w
  3219  0C91  075A               	addwf	choice@firstP^(0+256),w
  3220  0C92  3E01               	addlw	1
  3221  0C93  3ED1               	addlw	(low (_content| 0))& (0+255)
  3222  0C94  0084               	movwf	4
  3223  0C95  1383               	bcf	3,7	;select IRP bank1
  3224  0C96  0800               	movf	0,w
  3225  0C97  1683               	bsf	3,5	;RP0=1, select bank1
  3226  0C98  1303               	bcf	3,6	;RP1=0, select bank1
  3227  0C99  00C4               	movwf	??_choice^(0+128)
  3228  0C9A  1283               	bcf	3,5	;RP0=0, select bank2
  3229  0C9B  1703               	bsf	3,6	;RP1=1, select bank2
  3230  0C9C  0868               	movf	choice@i^(0+256),w
  3231  0C9D  3EB0               	addlw	(low (choice@duty| (0+256)))& (0+255)
  3232  0C9E  0084               	movwf	4
  3233  0C9F  1683               	bsf	3,5	;RP0=1, select bank1
  3234  0CA0  1303               	bcf	3,6	;RP1=0, select bank1
  3235  0CA1  0844               	movf	??_choice^(0+128),w
  3236  0CA2  1783               	bsf	3,7	;select IRP bank3
  3237  0CA3  0080               	movwf	0
  3238                           
  3239                           ;main.c: 232: }
  3240  0CA4  2CC5               	goto	l4397
  3241  0CA5                     l4393:	
  3242                           
  3243                           ;main.c: 233: else if (i<strlen(duty)){
  3244  0CA5  30B0               	movlw	(low (choice@duty| (0+256)))& (0+255)
  3245  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0CA8  00B5               	movwf	strlen@s
  3248  0CA9  3001               	movlw	1
  3249  0CAA  00B6               	movwf	strlen@s+1
  3250  0CAB  160A  158A  25AC  120A  158A  	fcall	_strlen
  3251  0CB0  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0CB1  1303               	bcf	3,6	;RP1=0, select bank0
  3253  0CB2  0836               	movf	?_strlen+1,w
  3254  0CB3  1283               	bcf	3,5	;RP0=0, select bank2
  3255  0CB4  1703               	bsf	3,6	;RP1=1, select bank2
  3256  0CB5  0269               	subwf	(choice@i+1)^(0+256),w
  3257  0CB6  1D03               	skipz
  3258  0CB7  2CBE               	goto	u5405
  3259  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0CBA  0835               	movf	?_strlen,w
  3262  0CBB  1283               	bcf	3,5	;RP0=0, select bank2
  3263  0CBC  1703               	bsf	3,6	;RP1=1, select bank2
  3264  0CBD  0268               	subwf	choice@i^(0+256),w
  3265  0CBE                     u5405:	
  3266  0CBE  1803               	skipnc
  3267  0CBF  2CC5               	goto	l4397
  3268                           
  3269                           ;main.c: 234: duty[i] = '\0';
  3270  0CC0  0868               	movf	choice@i^(0+256),w
  3271  0CC1  3EB0               	addlw	(low (choice@duty| (0+256)))& (0+255)
  3272  0CC2  0084               	movwf	4
  3273  0CC3  1783               	bsf	3,7	;select IRP bank3
  3274  0CC4  0180               	clrf	0
  3275  0CC5                     l4397:	
  3276                           
  3277                           ;main.c: 235: }
  3278                           ;main.c: 236: if(i < thirdP - secondP - 1){
  3279  0CC5  1283               	bcf	3,5	;RP0=0, select bank2
  3280  0CC6  1703               	bsf	3,6	;RP1=1, select bank2
  3281  0CC7  0862               	movf	choice@secondP^(0+256),w
  3282  0CC8  3E01               	addlw	1
  3283  0CC9  1683               	bsf	3,5	;RP0=1, select bank1
  3284  0CCA  1303               	bcf	3,6	;RP1=0, select bank1
  3285  0CCB  00C4               	movwf	??_choice^(0+128)
  3286  0CCC  1283               	bcf	3,5	;RP0=0, select bank2
  3287  0CCD  1703               	bsf	3,6	;RP1=1, select bank2
  3288  0CCE  0863               	movf	(choice@secondP+1)^(0+256),w
  3289  0CCF  1803               	skipnc
  3290  0CD0  3E01               	addlw	1
  3291  0CD1  3E00               	addlw	0
  3292  0CD2  1683               	bsf	3,5	;RP0=1, select bank1
  3293  0CD3  1303               	bcf	3,6	;RP1=0, select bank1
  3294  0CD4  00C5               	movwf	(??_choice+1)^(0+128)
  3295  0CD5  09C4               	comf	??_choice^(0+128),f
  3296  0CD6  09C5               	comf	(??_choice^(0+128)+1),f
  3297  0CD7  0AC4               	incf	??_choice^(0+128),f
  3298  0CD8  1903               	skipnz
  3299  0CD9  0AC5               	incf	(??_choice^(0+128)+1),f
  3300  0CDA  1683               	bsf	3,5	;RP0=1, select bank3
  3301  0CDB  1703               	bsf	3,6	;RP1=1, select bank3
  3302  0CDC  084E               	movf	choice@thirdP^(0+384),w
  3303  0CDD  1683               	bsf	3,5	;RP0=1, select bank1
  3304  0CDE  1303               	bcf	3,6	;RP1=0, select bank1
  3305  0CDF  0744               	addwf	??_choice^(0+128),w
  3306  0CE0  00C6               	movwf	(??_choice+2)^(0+128)
  3307  0CE1  1683               	bsf	3,5	;RP0=1, select bank3
  3308  0CE2  1703               	bsf	3,6	;RP1=1, select bank3
  3309  0CE3  084F               	movf	(choice@thirdP+1)^(0+384),w
  3310  0CE4  1803               	skipnc
  3311  0CE5  0A4F               	incf	(choice@thirdP+1)^(0+384),w
  3312  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  3313  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  3314  0CE8  0745               	addwf	(??_choice+1)^(0+128),w
  3315  0CE9  00C7               	movwf	(??_choice+3)^(0+128)
  3316  0CEA  1283               	bcf	3,5	;RP0=0, select bank2
  3317  0CEB  1703               	bsf	3,6	;RP1=1, select bank2
  3318  0CEC  0869               	movf	(choice@i+1)^(0+256),w
  3319  0CED  3A80               	xorlw	128
  3320  0CEE  1683               	bsf	3,5	;RP0=1, select bank1
  3321  0CEF  1303               	bcf	3,6	;RP1=0, select bank1
  3322  0CF0  00C8               	movwf	(??_choice+4)^(0+128)
  3323  0CF1  0847               	movf	(??_choice+3)^(0+128),w
  3324  0CF2  3A80               	xorlw	128
  3325  0CF3  0248               	subwf	(??_choice+4)^(0+128),w
  3326  0CF4  1D03               	skipz
  3327  0CF5  2CFA               	goto	u5415
  3328  0CF6  0846               	movf	(??_choice+2)^(0+128),w
  3329  0CF7  1283               	bcf	3,5	;RP0=0, select bank2
  3330  0CF8  1703               	bsf	3,6	;RP1=1, select bank2
  3331  0CF9  0268               	subwf	choice@i^(0+256),w
  3332  0CFA                     u5415:	
  3333  0CFA  1803               	skipnc
  3334  0CFB  2D13               	goto	l4401
  3335                           
  3336                           ;main.c: 237: time[i] = content[secondP+i+1];
  3337  0CFC  1283               	bcf	3,5	;RP0=0, select bank2
  3338  0CFD  1703               	bsf	3,6	;RP1=1, select bank2
  3339  0CFE  0868               	movf	choice@i^(0+256),w
  3340  0CFF  0762               	addwf	choice@secondP^(0+256),w
  3341  0D00  3E01               	addlw	1
  3342  0D01  3ED1               	addlw	(low (_content| 0))& (0+255)
  3343  0D02  0084               	movwf	4
  3344  0D03  1383               	bcf	3,7	;select IRP bank1
  3345  0D04  0800               	movf	0,w
  3346  0D05  1683               	bsf	3,5	;RP0=1, select bank1
  3347  0D06  1303               	bcf	3,6	;RP1=0, select bank1
  3348  0D07  00C4               	movwf	??_choice^(0+128)
  3349  0D08  1283               	bcf	3,5	;RP0=0, select bank2
  3350  0D09  1703               	bsf	3,6	;RP1=1, select bank2
  3351  0D0A  0868               	movf	choice@i^(0+256),w
  3352  0D0B  3E50               	addlw	(low (choice@time| (0+256)))& (0+255)
  3353  0D0C  0084               	movwf	4
  3354  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  3355  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  3356  0D0F  0844               	movf	??_choice^(0+128),w
  3357  0D10  1783               	bsf	3,7	;select IRP bank2
  3358  0D11  0080               	movwf	0
  3359                           
  3360                           ;main.c: 238: }
  3361  0D12  2D33               	goto	l4405
  3362  0D13                     l4401:	
  3363                           
  3364                           ;main.c: 239: else if (i<strlen(time)){
  3365  0D13  3050               	movlw	(low (choice@time| (0+256)))& (0+255)
  3366  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0D16  00B5               	movwf	strlen@s
  3369  0D17  3001               	movlw	1
  3370  0D18  00B6               	movwf	strlen@s+1
  3371  0D19  160A  158A  25AC  120A  158A  	fcall	_strlen
  3372  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  3373  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  3374  0D20  0836               	movf	?_strlen+1,w
  3375  0D21  1283               	bcf	3,5	;RP0=0, select bank2
  3376  0D22  1703               	bsf	3,6	;RP1=1, select bank2
  3377  0D23  0269               	subwf	(choice@i+1)^(0+256),w
  3378  0D24  1D03               	skipz
  3379  0D25  2D2C               	goto	u5425
  3380  0D26  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0D27  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0D28  0835               	movf	?_strlen,w
  3383  0D29  1283               	bcf	3,5	;RP0=0, select bank2
  3384  0D2A  1703               	bsf	3,6	;RP1=1, select bank2
  3385  0D2B  0268               	subwf	choice@i^(0+256),w
  3386  0D2C                     u5425:	
  3387  0D2C  1803               	skipnc
  3388  0D2D  2D33               	goto	l4405
  3389                           
  3390                           ;main.c: 240: time[i] = '\0';
  3391  0D2E  0868               	movf	choice@i^(0+256),w
  3392  0D2F  3E50               	addlw	(low (choice@time| (0+256)))& (0+255)
  3393  0D30  0084               	movwf	4
  3394  0D31  1783               	bsf	3,7	;select IRP bank2
  3395  0D32  0180               	clrf	0
  3396  0D33                     l4405:	
  3397  0D33  3001               	movlw	1
  3398  0D34  1283               	bcf	3,5	;RP0=0, select bank2
  3399  0D35  1703               	bsf	3,6	;RP1=1, select bank2
  3400  0D36  07E8               	addwf	choice@i^(0+256),f
  3401  0D37  1803               	skipnc
  3402  0D38  0AE9               	incf	(choice@i+1)^(0+256),f
  3403  0D39  3000               	movlw	0
  3404  0D3A  07E9               	addwf	(choice@i+1)^(0+256),f
  3405  0D3B  2C3E               	goto	l4407
  3406  0D3C                     l4409:	
  3407                           
  3408                           ;main.c: 241: }
  3409                           ;main.c: 242: }
  3410                           ;main.c: 243: int duty_i = atoi(duty);
  3411  0D3C  30B0               	movlw	(low (choice@duty| (0+256)))& (0+255)
  3412  0D3D  160A  118A  236C  120A  158A  	fcall	_atoi
  3413  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  3414  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  3415  0D44  083C               	movf	?_atoi+1,w
  3416  0D45  1283               	bcf	3,5	;RP0=0, select bank2
  3417  0D46  1703               	bsf	3,6	;RP1=1, select bank2
  3418  0D47  00E1               	movwf	(choice@duty_i+1)^(0+256)
  3419  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  3420  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  3421  0D4A  083B               	movf	?_atoi,w
  3422  0D4B  1283               	bcf	3,5	;RP0=0, select bank2
  3423  0D4C  1703               	bsf	3,6	;RP1=1, select bank2
  3424  0D4D  00E0               	movwf	choice@duty_i^(0+256)
  3425                           
  3426                           ;main.c: 244: int time_1 = atoi(time);
  3427  0D4E  3050               	movlw	(low (choice@time| (0+256)))& (0+255)
  3428  0D4F  160A  118A  236C  120A  158A  	fcall	_atoi
  3429  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  3430  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0D56  083C               	movf	?_atoi+1,w
  3432  0D57  1683               	bsf	3,5	;RP0=1, select bank3
  3433  0D58  1703               	bsf	3,6	;RP1=1, select bank3
  3434  0D59  00D5               	movwf	(choice@time_1+1)^(0+384)
  3435  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  3437  0D5C  083B               	movf	?_atoi,w
  3438  0D5D  1683               	bsf	3,5	;RP0=1, select bank3
  3439  0D5E  1703               	bsf	3,6	;RP1=1, select bank3
  3440  0D5F  00D4               	movwf	choice@time_1^(0+384)
  3441                           
  3442                           ;main.c: 245: if(*time == (0)){
  3443  0D60  1283               	bcf	3,5	;RP0=0, select bank2
  3444  0D61  1703               	bsf	3,6	;RP1=1, select bank2
  3445  0D62  0850               	movf	choice@time^(0+256),w
  3446  0D63  1D03               	btfss	3,2
  3447  0D64  2D75               	goto	l4415
  3448                           
  3449                           ;main.c: 246: time_1 = duty_i;
  3450  0D65  0861               	movf	(choice@duty_i+1)^(0+256),w
  3451  0D66  1683               	bsf	3,5	;RP0=1, select bank3
  3452  0D67  1703               	bsf	3,6	;RP1=1, select bank3
  3453  0D68  00D5               	movwf	(choice@time_1+1)^(0+384)
  3454  0D69  1283               	bcf	3,5	;RP0=0, select bank2
  3455  0D6A  1703               	bsf	3,6	;RP1=1, select bank2
  3456  0D6B  0860               	movf	choice@duty_i^(0+256),w
  3457  0D6C  1683               	bsf	3,5	;RP0=1, select bank3
  3458  0D6D  1703               	bsf	3,6	;RP1=1, select bank3
  3459  0D6E  00D4               	movwf	choice@time_1^(0+384)
  3460                           
  3461                           ;main.c: 247: duty_i = 100;
  3462  0D6F  3064               	movlw	100
  3463  0D70  1283               	bcf	3,5	;RP0=0, select bank2
  3464  0D71  1703               	bsf	3,6	;RP1=1, select bank2
  3465  0D72  00E0               	movwf	choice@duty_i^(0+256)
  3466  0D73  3000               	movlw	0
  3467  0D74  00E1               	movwf	(choice@duty_i^(0+256)+1)
  3468  0D75                     l4415:	
  3469                           
  3470                           ;main.c: 248: }
  3471                           ;main.c: 249: step(duty_i,time_1);
  3472  0D75  0861               	movf	(choice@duty_i+1)^(0+256),w
  3473  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  3474  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  3475  0D78  00BD               	movwf	(step@duty+1)^(0+128)
  3476  0D79  1283               	bcf	3,5	;RP0=0, select bank2
  3477  0D7A  1703               	bsf	3,6	;RP1=1, select bank2
  3478  0D7B  0860               	movf	choice@duty_i^(0+256),w
  3479  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  3480  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  3481  0D7E  00BC               	movwf	step@duty^(0+128)
  3482  0D7F  1683               	bsf	3,5	;RP0=1, select bank3
  3483  0D80  1703               	bsf	3,6	;RP1=1, select bank3
  3484  0D81  0854               	movf	choice@time_1^(0+384),w
  3485  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  3486  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  3487  0D84  00BE               	movwf	step@time^(0+128)
  3488  0D85  1683               	bsf	3,5	;RP0=1, select bank3
  3489  0D86  1703               	bsf	3,6	;RP1=1, select bank3
  3490  0D87  0855               	movf	(choice@time_1+1)^(0+384),w
  3491  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  3492  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  3493  0D8A  00BF               	movwf	(step@time+1)^(0+128)
  3494  0D8B  3000               	movlw	0
  3495  0D8C  1BBF               	btfsc	(step@time+1)^(0+128),7
  3496  0D8D  30FF               	movlw	255
  3497  0D8E  00C0               	movwf	(step@time+2)^(0+128)
  3498  0D8F  00C1               	movwf	(step@time+3)^(0+128)
  3499  0D90  160A  118A  246B  120A  158A  	fcall	_step
  3500                           
  3501                           ;main.c: 250: }
  3502  0D95  2FF1               	goto	l4475
  3503  0D96                     l4417:	
  3504                           
  3505                           ;main.c: 251: else if(memcmp(content, "run(", 4) == 0){
  3506  0D96  3047               	movlw	low (STR_40| (0+32768))
  3507  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0D99  00B5               	movwf	memcmp@s2
  3510  0D9A  3086               	movlw	high (STR_40| (0+32768))
  3511  0D9B  00B6               	movwf	memcmp@s2+1
  3512  0D9C  3004               	movlw	4
  3513  0D9D  00B7               	movwf	memcmp@n
  3514  0D9E  3000               	movlw	0
  3515  0D9F  00B8               	movwf	memcmp@n+1
  3516  0DA0  30D1               	movlw	(low (_content| 0))& (0+255)
  3517  0DA1  160A  118A  20A5  120A  158A  	fcall	_memcmp
  3518  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0DA8  0835               	movf	?_memcmp,w
  3521  0DA9  0436               	iorwf	?_memcmp+1,w
  3522  0DAA  1D03               	btfss	3,2
  3523  0DAB  2E86               	goto	l4437
  3524                           
  3525                           ;main.c: 252: char duty[10];
  3526                           ;main.c: 253: int firstP = strcspn(content, "(");
  3527  0DAC  304A               	movlw	low ((STR_40+3)| (0+32768))
  3528  0DAD  00BB               	movwf	strcspn@s2
  3529  0DAE  3086               	movlw	high ((STR_40+3)| (0+32768))
  3530  0DAF  00BC               	movwf	strcspn@s2+1
  3531  0DB0  30D1               	movlw	(low (_content| 0))& (0+255)
  3532  0DB1  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3533  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  3535  0DB8  083C               	movf	?_strcspn+1,w
  3536  0DB9  1283               	bcf	3,5	;RP0=0, select bank2
  3537  0DBA  1703               	bsf	3,6	;RP1=1, select bank2
  3538  0DBB  00DD               	movwf	(choice@firstP_535+1)^(0+256)
  3539  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  3540  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  3541  0DBE  083B               	movf	?_strcspn,w
  3542  0DBF  1283               	bcf	3,5	;RP0=0, select bank2
  3543  0DC0  1703               	bsf	3,6	;RP1=1, select bank2
  3544  0DC1  00DC               	movwf	choice@firstP_535^(0+256)
  3545                           
  3546                           ;main.c: 254: int secondP = strcspn(content, ")");
  3547  0DC2  300E               	movlw	low ((STR_48+8)| (0+32768))
  3548  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  3549  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  3550  0DC5  00BB               	movwf	strcspn@s2
  3551  0DC6  3086               	movlw	high ((STR_48+8)| (0+32768))
  3552  0DC7  00BC               	movwf	strcspn@s2+1
  3553  0DC8  30D1               	movlw	(low (_content| 0))& (0+255)
  3554  0DC9  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3555  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  3557  0DD0  083C               	movf	?_strcspn+1,w
  3558  0DD1  1683               	bsf	3,5	;RP0=1, select bank3
  3559  0DD2  1703               	bsf	3,6	;RP1=1, select bank3
  3560  0DD3  00D1               	movwf	(choice@secondP_537+1)^(0+384)
  3561  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0DD6  083B               	movf	?_strcspn,w
  3564  0DD7  1683               	bsf	3,5	;RP0=1, select bank3
  3565  0DD8  1703               	bsf	3,6	;RP1=1, select bank3
  3566  0DD9  00D0               	movwf	choice@secondP_537^(0+384)
  3567                           
  3568                           ;main.c: 256: for(int i = 0 ; i<strlen(content); i++){
  3569  0DDA  1283               	bcf	3,5	;RP0=0, select bank2
  3570  0DDB  1703               	bsf	3,6	;RP1=1, select bank2
  3571  0DDC  01E4               	clrf	choice@i_539^(0+256)
  3572  0DDD  01E5               	clrf	(choice@i_539+1)^(0+256)
  3573  0DDE                     l4433:	
  3574  0DDE  30D1               	movlw	(low (_content| 0))& (0+255)
  3575  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0DE1  00B5               	movwf	strlen@s
  3578  0DE2  3000               	movlw	0
  3579  0DE3  00B6               	movwf	strlen@s+1
  3580  0DE4  160A  158A  25AC  120A  158A  	fcall	_strlen
  3581  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  3582  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  3583  0DEB  0836               	movf	?_strlen+1,w
  3584  0DEC  1283               	bcf	3,5	;RP0=0, select bank2
  3585  0DED  1703               	bsf	3,6	;RP1=1, select bank2
  3586  0DEE  0265               	subwf	(choice@i_539+1)^(0+256),w
  3587  0DEF  1D03               	skipz
  3588  0DF0  2DF7               	goto	u5485
  3589  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  3590  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  3591  0DF3  0835               	movf	?_strlen,w
  3592  0DF4  1283               	bcf	3,5	;RP0=0, select bank2
  3593  0DF5  1703               	bsf	3,6	;RP1=1, select bank2
  3594  0DF6  0264               	subwf	choice@i_539^(0+256),w
  3595  0DF7                     u5485:	
  3596  0DF7  1803               	btfsc	3,0
  3597  0DF8  2E6E               	goto	l4435
  3598                           
  3599                           ;main.c: 257: if(i < secondP - firstP - 1){
  3600  0DF9  085C               	movf	choice@firstP_535^(0+256),w
  3601  0DFA  3E01               	addlw	1
  3602  0DFB  1683               	bsf	3,5	;RP0=1, select bank1
  3603  0DFC  1303               	bcf	3,6	;RP1=0, select bank1
  3604  0DFD  00C4               	movwf	??_choice^(0+128)
  3605  0DFE  1283               	bcf	3,5	;RP0=0, select bank2
  3606  0DFF  1703               	bsf	3,6	;RP1=1, select bank2
  3607  0E00  085D               	movf	(choice@firstP_535+1)^(0+256),w
  3608  0E01  1803               	skipnc
  3609  0E02  3E01               	addlw	1
  3610  0E03  3E00               	addlw	0
  3611  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  3612  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  3613  0E06  00C5               	movwf	(??_choice+1)^(0+128)
  3614  0E07  09C4               	comf	??_choice^(0+128),f
  3615  0E08  09C5               	comf	(??_choice^(0+128)+1),f
  3616  0E09  0AC4               	incf	??_choice^(0+128),f
  3617  0E0A  1903               	skipnz
  3618  0E0B  0AC5               	incf	(??_choice^(0+128)+1),f
  3619  0E0C  1683               	bsf	3,5	;RP0=1, select bank3
  3620  0E0D  1703               	bsf	3,6	;RP1=1, select bank3
  3621  0E0E  0850               	movf	choice@secondP_537^(0+384),w
  3622  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  3623  0E10  1303               	bcf	3,6	;RP1=0, select bank1
  3624  0E11  0744               	addwf	??_choice^(0+128),w
  3625  0E12  00C6               	movwf	(??_choice+2)^(0+128)
  3626  0E13  1683               	bsf	3,5	;RP0=1, select bank3
  3627  0E14  1703               	bsf	3,6	;RP1=1, select bank3
  3628  0E15  0851               	movf	(choice@secondP_537+1)^(0+384),w
  3629  0E16  1803               	skipnc
  3630  0E17  0A51               	incf	(choice@secondP_537+1)^(0+384),w
  3631  0E18  1683               	bsf	3,5	;RP0=1, select bank1
  3632  0E19  1303               	bcf	3,6	;RP1=0, select bank1
  3633  0E1A  0745               	addwf	(??_choice+1)^(0+128),w
  3634  0E1B  00C7               	movwf	(??_choice+3)^(0+128)
  3635  0E1C  1283               	bcf	3,5	;RP0=0, select bank2
  3636  0E1D  1703               	bsf	3,6	;RP1=1, select bank2
  3637  0E1E  0865               	movf	(choice@i_539+1)^(0+256),w
  3638  0E1F  3A80               	xorlw	128
  3639  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  3640  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  3641  0E22  00C8               	movwf	(??_choice+4)^(0+128)
  3642  0E23  0847               	movf	(??_choice+3)^(0+128),w
  3643  0E24  3A80               	xorlw	128
  3644  0E25  0248               	subwf	(??_choice+4)^(0+128),w
  3645  0E26  1D03               	skipz
  3646  0E27  2E2C               	goto	u5465
  3647  0E28  0846               	movf	(??_choice+2)^(0+128),w
  3648  0E29  1283               	bcf	3,5	;RP0=0, select bank2
  3649  0E2A  1703               	bsf	3,6	;RP1=1, select bank2
  3650  0E2B  0264               	subwf	choice@i_539^(0+256),w
  3651  0E2C                     u5465:	
  3652  0E2C  1803               	skipnc
  3653  0E2D  2E45               	goto	l4427
  3654                           
  3655                           ;main.c: 258: duty[i] = content[firstP+i+1];
  3656  0E2E  1283               	bcf	3,5	;RP0=0, select bank2
  3657  0E2F  1703               	bsf	3,6	;RP1=1, select bank2
  3658  0E30  0864               	movf	choice@i_539^(0+256),w
  3659  0E31  075C               	addwf	choice@firstP_535^(0+256),w
  3660  0E32  3E01               	addlw	1
  3661  0E33  3ED1               	addlw	(low (_content| 0))& (0+255)
  3662  0E34  0084               	movwf	4
  3663  0E35  1383               	bcf	3,7	;select IRP bank1
  3664  0E36  0800               	movf	0,w
  3665  0E37  1683               	bsf	3,5	;RP0=1, select bank1
  3666  0E38  1303               	bcf	3,6	;RP1=0, select bank1
  3667  0E39  00C4               	movwf	??_choice^(0+128)
  3668  0E3A  1283               	bcf	3,5	;RP0=0, select bank2
  3669  0E3B  1703               	bsf	3,6	;RP1=1, select bank2
  3670  0E3C  0864               	movf	choice@i_539^(0+256),w
  3671  0E3D  3EBA               	addlw	(low (choice@duty_534| (0+256)))& (0+255)
  3672  0E3E  0084               	movwf	4
  3673  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  3674  0E40  1303               	bcf	3,6	;RP1=0, select bank1
  3675  0E41  0844               	movf	??_choice^(0+128),w
  3676  0E42  1783               	bsf	3,7	;select IRP bank3
  3677  0E43  0080               	movwf	0
  3678                           
  3679                           ;main.c: 259: }
  3680  0E44  2E65               	goto	l4431
  3681  0E45                     l4427:	
  3682                           
  3683                           ;main.c: 260: else if (i<strlen(duty)){
  3684  0E45  30BA               	movlw	(low (choice@duty_534| (0+256)))& (0+255)
  3685  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  3686  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  3687  0E48  00B5               	movwf	strlen@s
  3688  0E49  3001               	movlw	1
  3689  0E4A  00B6               	movwf	strlen@s+1
  3690  0E4B  160A  158A  25AC  120A  158A  	fcall	_strlen
  3691  0E50  1283               	bcf	3,5	;RP0=0, select bank0
  3692  0E51  1303               	bcf	3,6	;RP1=0, select bank0
  3693  0E52  0836               	movf	?_strlen+1,w
  3694  0E53  1283               	bcf	3,5	;RP0=0, select bank2
  3695  0E54  1703               	bsf	3,6	;RP1=1, select bank2
  3696  0E55  0265               	subwf	(choice@i_539+1)^(0+256),w
  3697  0E56  1D03               	skipz
  3698  0E57  2E5E               	goto	u5475
  3699  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  3700  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  3701  0E5A  0835               	movf	?_strlen,w
  3702  0E5B  1283               	bcf	3,5	;RP0=0, select bank2
  3703  0E5C  1703               	bsf	3,6	;RP1=1, select bank2
  3704  0E5D  0264               	subwf	choice@i_539^(0+256),w
  3705  0E5E                     u5475:	
  3706  0E5E  1803               	skipnc
  3707  0E5F  2E65               	goto	l4431
  3708                           
  3709                           ;main.c: 261: duty[i] = '\0';
  3710  0E60  0864               	movf	choice@i_539^(0+256),w
  3711  0E61  3EBA               	addlw	(low (choice@duty_534| (0+256)))& (0+255)
  3712  0E62  0084               	movwf	4
  3713  0E63  1783               	bsf	3,7	;select IRP bank3
  3714  0E64  0180               	clrf	0
  3715  0E65                     l4431:	
  3716  0E65  3001               	movlw	1
  3717  0E66  1283               	bcf	3,5	;RP0=0, select bank2
  3718  0E67  1703               	bsf	3,6	;RP1=1, select bank2
  3719  0E68  07E4               	addwf	choice@i_539^(0+256),f
  3720  0E69  1803               	skipnc
  3721  0E6A  0AE5               	incf	(choice@i_539+1)^(0+256),f
  3722  0E6B  3000               	movlw	0
  3723  0E6C  07E5               	addwf	(choice@i_539+1)^(0+256),f
  3724  0E6D  2DDE               	goto	l4433
  3725  0E6E                     l4435:	
  3726                           
  3727                           ;main.c: 262: }
  3728                           ;main.c: 263: }
  3729                           ;main.c: 264: run(atoi(duty));
  3730  0E6E  30BA               	movlw	(low (choice@duty_534| (0+256)))& (0+255)
  3731  0E6F  160A  118A  236C  120A  158A  	fcall	_atoi
  3732  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  3733  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  3734  0E76  083C               	movf	?_atoi+1,w
  3735  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3736  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3737  0E79  00BD               	movwf	(run@duty+1)^(0+128)
  3738  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  3739  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  3740  0E7C  083B               	movf	?_atoi,w
  3741  0E7D  1683               	bsf	3,5	;RP0=1, select bank1
  3742  0E7E  1303               	bcf	3,6	;RP1=0, select bank1
  3743  0E7F  00BC               	movwf	run@duty^(0+128)
  3744  0E80  160A  118A  2025  120A  158A  	fcall	_run
  3745                           
  3746                           ;main.c: 265: }
  3747  0E85  2FF1               	goto	l4475
  3748  0E86                     l4437:	
  3749                           
  3750                           ;main.c: 266: else if(memcmp(content, "sys(", 4) == 0){
  3751  0E86  304C               	movlw	low (STR_43| (0+32768))
  3752  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0E89  00B5               	movwf	memcmp@s2
  3755  0E8A  3086               	movlw	high (STR_43| (0+32768))
  3756  0E8B  00B6               	movwf	memcmp@s2+1
  3757  0E8C  3004               	movlw	4
  3758  0E8D  00B7               	movwf	memcmp@n
  3759  0E8E  3000               	movlw	0
  3760  0E8F  00B8               	movwf	memcmp@n+1
  3761  0E90  30D1               	movlw	(low (_content| 0))& (0+255)
  3762  0E91  160A  118A  20A5  120A  158A  	fcall	_memcmp
  3763  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  3764  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  3765  0E98  0835               	movf	?_memcmp,w
  3766  0E99  0436               	iorwf	?_memcmp+1,w
  3767  0E9A  1D03               	btfss	3,2
  3768  0E9B  2F76               	goto	l4457
  3769                           
  3770                           ;main.c: 267: char duty[10];
  3771                           ;main.c: 268: int firstP = strcspn(content, "(");
  3772  0E9C  304A               	movlw	low ((STR_40+3)| (0+32768))
  3773  0E9D  00BB               	movwf	strcspn@s2
  3774  0E9E  3086               	movlw	high ((STR_40+3)| (0+32768))
  3775  0E9F  00BC               	movwf	strcspn@s2+1
  3776  0EA0  30D1               	movlw	(low (_content| 0))& (0+255)
  3777  0EA1  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3778  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0EA8  083C               	movf	?_strcspn+1,w
  3781  0EA9  1283               	bcf	3,5	;RP0=0, select bank2
  3782  0EAA  1703               	bsf	3,6	;RP1=1, select bank2
  3783  0EAB  00DF               	movwf	(choice@firstP_542+1)^(0+256)
  3784  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  3785  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  3786  0EAE  083B               	movf	?_strcspn,w
  3787  0EAF  1283               	bcf	3,5	;RP0=0, select bank2
  3788  0EB0  1703               	bsf	3,6	;RP1=1, select bank2
  3789  0EB1  00DE               	movwf	choice@firstP_542^(0+256)
  3790                           
  3791                           ;main.c: 269: int secondP = strcspn(content, ")");
  3792  0EB2  300E               	movlw	low ((STR_48+8)| (0+32768))
  3793  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  3794  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  3795  0EB5  00BB               	movwf	strcspn@s2
  3796  0EB6  3086               	movlw	high ((STR_48+8)| (0+32768))
  3797  0EB7  00BC               	movwf	strcspn@s2+1
  3798  0EB8  30D1               	movlw	(low (_content| 0))& (0+255)
  3799  0EB9  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3800  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0EC0  083C               	movf	?_strcspn+1,w
  3803  0EC1  1683               	bsf	3,5	;RP0=1, select bank3
  3804  0EC2  1703               	bsf	3,6	;RP1=1, select bank3
  3805  0EC3  00D3               	movwf	(choice@secondP_544+1)^(0+384)
  3806  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  3807  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  3808  0EC6  083B               	movf	?_strcspn,w
  3809  0EC7  1683               	bsf	3,5	;RP0=1, select bank3
  3810  0EC8  1703               	bsf	3,6	;RP1=1, select bank3
  3811  0EC9  00D2               	movwf	choice@secondP_544^(0+384)
  3812                           
  3813                           ;main.c: 271: for(int i = 0 ; i<strlen(content); i++){
  3814  0ECA  1283               	bcf	3,5	;RP0=0, select bank2
  3815  0ECB  1703               	bsf	3,6	;RP1=1, select bank2
  3816  0ECC  01E6               	clrf	choice@i_546^(0+256)
  3817  0ECD  01E7               	clrf	(choice@i_546+1)^(0+256)
  3818  0ECE                     l4453:	
  3819  0ECE  30D1               	movlw	(low (_content| 0))& (0+255)
  3820  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3821  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3822  0ED1  00B5               	movwf	strlen@s
  3823  0ED2  3000               	movlw	0
  3824  0ED3  00B6               	movwf	strlen@s+1
  3825  0ED4  160A  158A  25AC  120A  158A  	fcall	_strlen
  3826  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  3827  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  3828  0EDB  0836               	movf	?_strlen+1,w
  3829  0EDC  1283               	bcf	3,5	;RP0=0, select bank2
  3830  0EDD  1703               	bsf	3,6	;RP1=1, select bank2
  3831  0EDE  0267               	subwf	(choice@i_546+1)^(0+256),w
  3832  0EDF  1D03               	skipz
  3833  0EE0  2EE7               	goto	u5525
  3834  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  3835  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  3836  0EE3  0835               	movf	?_strlen,w
  3837  0EE4  1283               	bcf	3,5	;RP0=0, select bank2
  3838  0EE5  1703               	bsf	3,6	;RP1=1, select bank2
  3839  0EE6  0266               	subwf	choice@i_546^(0+256),w
  3840  0EE7                     u5525:	
  3841  0EE7  1803               	btfsc	3,0
  3842  0EE8  2F5E               	goto	l4455
  3843                           
  3844                           ;main.c: 272: if(i < secondP - firstP - 1){
  3845  0EE9  085E               	movf	choice@firstP_542^(0+256),w
  3846  0EEA  3E01               	addlw	1
  3847  0EEB  1683               	bsf	3,5	;RP0=1, select bank1
  3848  0EEC  1303               	bcf	3,6	;RP1=0, select bank1
  3849  0EED  00C4               	movwf	??_choice^(0+128)
  3850  0EEE  1283               	bcf	3,5	;RP0=0, select bank2
  3851  0EEF  1703               	bsf	3,6	;RP1=1, select bank2
  3852  0EF0  085F               	movf	(choice@firstP_542+1)^(0+256),w
  3853  0EF1  1803               	skipnc
  3854  0EF2  3E01               	addlw	1
  3855  0EF3  3E00               	addlw	0
  3856  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  3857  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  3858  0EF6  00C5               	movwf	(??_choice+1)^(0+128)
  3859  0EF7  09C4               	comf	??_choice^(0+128),f
  3860  0EF8  09C5               	comf	(??_choice^(0+128)+1),f
  3861  0EF9  0AC4               	incf	??_choice^(0+128),f
  3862  0EFA  1903               	skipnz
  3863  0EFB  0AC5               	incf	(??_choice^(0+128)+1),f
  3864  0EFC  1683               	bsf	3,5	;RP0=1, select bank3
  3865  0EFD  1703               	bsf	3,6	;RP1=1, select bank3
  3866  0EFE  0852               	movf	choice@secondP_544^(0+384),w
  3867  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  3868  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  3869  0F01  0744               	addwf	??_choice^(0+128),w
  3870  0F02  00C6               	movwf	(??_choice+2)^(0+128)
  3871  0F03  1683               	bsf	3,5	;RP0=1, select bank3
  3872  0F04  1703               	bsf	3,6	;RP1=1, select bank3
  3873  0F05  0853               	movf	(choice@secondP_544+1)^(0+384),w
  3874  0F06  1803               	skipnc
  3875  0F07  0A53               	incf	(choice@secondP_544+1)^(0+384),w
  3876  0F08  1683               	bsf	3,5	;RP0=1, select bank1
  3877  0F09  1303               	bcf	3,6	;RP1=0, select bank1
  3878  0F0A  0745               	addwf	(??_choice+1)^(0+128),w
  3879  0F0B  00C7               	movwf	(??_choice+3)^(0+128)
  3880  0F0C  1283               	bcf	3,5	;RP0=0, select bank2
  3881  0F0D  1703               	bsf	3,6	;RP1=1, select bank2
  3882  0F0E  0867               	movf	(choice@i_546+1)^(0+256),w
  3883  0F0F  3A80               	xorlw	128
  3884  0F10  1683               	bsf	3,5	;RP0=1, select bank1
  3885  0F11  1303               	bcf	3,6	;RP1=0, select bank1
  3886  0F12  00C8               	movwf	(??_choice+4)^(0+128)
  3887  0F13  0847               	movf	(??_choice+3)^(0+128),w
  3888  0F14  3A80               	xorlw	128
  3889  0F15  0248               	subwf	(??_choice+4)^(0+128),w
  3890  0F16  1D03               	skipz
  3891  0F17  2F1C               	goto	u5505
  3892  0F18  0846               	movf	(??_choice+2)^(0+128),w
  3893  0F19  1283               	bcf	3,5	;RP0=0, select bank2
  3894  0F1A  1703               	bsf	3,6	;RP1=1, select bank2
  3895  0F1B  0266               	subwf	choice@i_546^(0+256),w
  3896  0F1C                     u5505:	
  3897  0F1C  1803               	skipnc
  3898  0F1D  2F35               	goto	l4447
  3899                           
  3900                           ;main.c: 273: duty[i] = content[firstP+i+1];
  3901  0F1E  1283               	bcf	3,5	;RP0=0, select bank2
  3902  0F1F  1703               	bsf	3,6	;RP1=1, select bank2
  3903  0F20  0866               	movf	choice@i_546^(0+256),w
  3904  0F21  075E               	addwf	choice@firstP_542^(0+256),w
  3905  0F22  3E01               	addlw	1
  3906  0F23  3ED1               	addlw	(low (_content| 0))& (0+255)
  3907  0F24  0084               	movwf	4
  3908  0F25  1383               	bcf	3,7	;select IRP bank1
  3909  0F26  0800               	movf	0,w
  3910  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  3911  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  3912  0F29  00C4               	movwf	??_choice^(0+128)
  3913  0F2A  1283               	bcf	3,5	;RP0=0, select bank2
  3914  0F2B  1703               	bsf	3,6	;RP1=1, select bank2
  3915  0F2C  0866               	movf	choice@i_546^(0+256),w
  3916  0F2D  3EC4               	addlw	(low (choice@duty_541| (0+256)))& (0+255)
  3917  0F2E  0084               	movwf	4
  3918  0F2F  1683               	bsf	3,5	;RP0=1, select bank1
  3919  0F30  1303               	bcf	3,6	;RP1=0, select bank1
  3920  0F31  0844               	movf	??_choice^(0+128),w
  3921  0F32  1783               	bsf	3,7	;select IRP bank3
  3922  0F33  0080               	movwf	0
  3923                           
  3924                           ;main.c: 274: }
  3925  0F34  2F55               	goto	l4451
  3926  0F35                     l4447:	
  3927                           
  3928                           ;main.c: 275: else if (i<strlen(duty)){
  3929  0F35  30C4               	movlw	(low (choice@duty_541| (0+256)))& (0+255)
  3930  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  3932  0F38  00B5               	movwf	strlen@s
  3933  0F39  3001               	movlw	1
  3934  0F3A  00B6               	movwf	strlen@s+1
  3935  0F3B  160A  158A  25AC  120A  158A  	fcall	_strlen
  3936  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  3937  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  3938  0F42  0836               	movf	?_strlen+1,w
  3939  0F43  1283               	bcf	3,5	;RP0=0, select bank2
  3940  0F44  1703               	bsf	3,6	;RP1=1, select bank2
  3941  0F45  0267               	subwf	(choice@i_546+1)^(0+256),w
  3942  0F46  1D03               	skipz
  3943  0F47  2F4E               	goto	u5515
  3944  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  3945  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  3946  0F4A  0835               	movf	?_strlen,w
  3947  0F4B  1283               	bcf	3,5	;RP0=0, select bank2
  3948  0F4C  1703               	bsf	3,6	;RP1=1, select bank2
  3949  0F4D  0266               	subwf	choice@i_546^(0+256),w
  3950  0F4E                     u5515:	
  3951  0F4E  1803               	skipnc
  3952  0F4F  2F55               	goto	l4451
  3953                           
  3954                           ;main.c: 276: duty[i] = '\0';
  3955  0F50  0866               	movf	choice@i_546^(0+256),w
  3956  0F51  3EC4               	addlw	(low (choice@duty_541| (0+256)))& (0+255)
  3957  0F52  0084               	movwf	4
  3958  0F53  1783               	bsf	3,7	;select IRP bank3
  3959  0F54  0180               	clrf	0
  3960  0F55                     l4451:	
  3961  0F55  3001               	movlw	1
  3962  0F56  1283               	bcf	3,5	;RP0=0, select bank2
  3963  0F57  1703               	bsf	3,6	;RP1=1, select bank2
  3964  0F58  07E6               	addwf	choice@i_546^(0+256),f
  3965  0F59  1803               	skipnc
  3966  0F5A  0AE7               	incf	(choice@i_546+1)^(0+256),f
  3967  0F5B  3000               	movlw	0
  3968  0F5C  07E7               	addwf	(choice@i_546+1)^(0+256),f
  3969  0F5D  2ECE               	goto	l4453
  3970  0F5E                     l4455:	
  3971                           
  3972                           ;main.c: 277: }
  3973                           ;main.c: 278: }
  3974                           ;main.c: 279: sys(atoi(duty));
  3975  0F5E  30C4               	movlw	(low (choice@duty_541| (0+256)))& (0+255)
  3976  0F5F  160A  118A  236C  120A  158A  	fcall	_atoi
  3977  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3978  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3979  0F66  083C               	movf	?_atoi+1,w
  3980  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  3981  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  3982  0F69  00BD               	movwf	(sys@duty+1)^(0+128)
  3983  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3985  0F6C  083B               	movf	?_atoi,w
  3986  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  3987  0F6E  1303               	bcf	3,6	;RP1=0, select bank1
  3988  0F6F  00BC               	movwf	sys@duty^(0+128)
  3989  0F70  120A  158A  20F9  120A  158A  	fcall	_sys
  3990                           
  3991                           ;main.c: 280: }
  3992  0F75  2FF1               	goto	l4475
  3993  0F76                     l4457:	
  3994                           
  3995                           ;main.c: 281: else if(memcmp(content, "stop()", 6) == 0){
  3996  0F76  303A               	movlw	low (STR_46| (0+32768))
  3997  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  3998  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  3999  0F79  00B5               	movwf	memcmp@s2
  4000  0F7A  3086               	movlw	high (STR_46| (0+32768))
  4001  0F7B  00B6               	movwf	memcmp@s2+1
  4002  0F7C  3006               	movlw	6
  4003  0F7D  00B7               	movwf	memcmp@n
  4004  0F7E  3000               	movlw	0
  4005  0F7F  00B8               	movwf	memcmp@n+1
  4006  0F80  30D1               	movlw	(low (_content| 0))& (0+255)
  4007  0F81  160A  118A  20A5  120A  158A  	fcall	_memcmp
  4008  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  4009  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  4010  0F88  0835               	movf	?_memcmp,w
  4011  0F89  0436               	iorwf	?_memcmp+1,w
  4012  0F8A  1D03               	btfss	3,2
  4013  0F8B  2F92               	goto	l4461
  4014                           
  4015                           ;main.c: 282: stop();
  4016  0F8C  160A  158A  2482  120A  158A  	fcall	_stop
  4017                           
  4018                           ;main.c: 283: }
  4019  0F91  2FF1               	goto	l4475
  4020  0F92                     l4461:	
  4021                           
  4022                           ;main.c: 284: else if(memcmp(content, "status()", 8) == 0){
  4023  0F92  3022               	movlw	low (STR_47| (0+32768))
  4024  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  4025  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  4026  0F95  00B5               	movwf	memcmp@s2
  4027  0F96  3086               	movlw	high (STR_47| (0+32768))
  4028  0F97  00B6               	movwf	memcmp@s2+1
  4029  0F98  3008               	movlw	8
  4030  0F99  00B7               	movwf	memcmp@n
  4031  0F9A  3000               	movlw	0
  4032  0F9B  00B8               	movwf	memcmp@n+1
  4033  0F9C  30D1               	movlw	(low (_content| 0))& (0+255)
  4034  0F9D  160A  118A  20A5  120A  158A  	fcall	_memcmp
  4035  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4036  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4037  0FA4  0835               	movf	?_memcmp,w
  4038  0FA5  0436               	iorwf	?_memcmp+1,w
  4039  0FA6  1D03               	btfss	3,2
  4040  0FA7  2FAE               	goto	l4465
  4041                           
  4042                           ;main.c: 285: status();
  4043  0FA8  120A  158A  200C  120A  158A  	fcall	_status
  4044                           
  4045                           ;main.c: 286: }
  4046  0FAD  2FF1               	goto	l4475
  4047  0FAE                     l4465:	
  4048                           
  4049                           ;main.c: 287: else if(memcmp(content, "acquire()", 8) == 0){
  4050  0FAE  3006               	movlw	low (STR_48| (0+32768))
  4051  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  4052  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  4053  0FB1  00B5               	movwf	memcmp@s2
  4054  0FB2  3086               	movlw	high (STR_48| (0+32768))
  4055  0FB3  00B6               	movwf	memcmp@s2+1
  4056  0FB4  3008               	movlw	8
  4057  0FB5  00B7               	movwf	memcmp@n
  4058  0FB6  3000               	movlw	0
  4059  0FB7  00B8               	movwf	memcmp@n+1
  4060  0FB8  30D1               	movlw	(low (_content| 0))& (0+255)
  4061  0FB9  160A  118A  20A5  120A  158A  	fcall	_memcmp
  4062  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4063  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4064  0FC0  0835               	movf	?_memcmp,w
  4065  0FC1  0436               	iorwf	?_memcmp+1,w
  4066  0FC2  1D03               	btfss	3,2
  4067  0FC3  2FCA               	goto	l4469
  4068                           
  4069                           ;main.c: 288: acquire();
  4070  0FC4  120A  118A  27A0  120A  158A  	fcall	_acquire
  4071                           
  4072                           ;main.c: 289: }
  4073  0FC9  2FF1               	goto	l4475
  4074  0FCA                     l4469:	
  4075                           
  4076                           ;main.c: 290: else if(memcmp(content, "help()", 6) == 0){
  4077  0FCA  3033               	movlw	low (STR_49| (0+32768))
  4078  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  4079  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  4080  0FCD  00B5               	movwf	memcmp@s2
  4081  0FCE  3086               	movlw	high (STR_49| (0+32768))
  4082  0FCF  00B6               	movwf	memcmp@s2+1
  4083  0FD0  3006               	movlw	6
  4084  0FD1  00B7               	movwf	memcmp@n
  4085  0FD2  3000               	movlw	0
  4086  0FD3  00B8               	movwf	memcmp@n+1
  4087  0FD4  30D1               	movlw	(low (_content| 0))& (0+255)
  4088  0FD5  160A  118A  20A5  120A  158A  	fcall	_memcmp
  4089  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  4090  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  4091  0FDC  0835               	movf	?_memcmp,w
  4092  0FDD  0436               	iorwf	?_memcmp+1,w
  4093  0FDE  1D03               	btfss	3,2
  4094  0FDF  2FE6               	goto	l4473
  4095                           
  4096                           ;main.c: 291: help();
  4097  0FE0  120A  158A  2232  120A  158A  	fcall	_help
  4098                           
  4099                           ;main.c: 292: }
  4100  0FE5  2FF1               	goto	l4475
  4101  0FE6                     l4473:	
  4102                           
  4103                           ;main.c: 293: else{
  4104                           ;main.c: 294: USARTWriteLine("You typed something wrong. ");
  4105  0FE6  304A               	movlw	low (STR_50| (0+32768))
  4106  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  4108  0FE9  00B8               	movwf	USARTWriteLine@str
  4109  0FEA  3084               	movlw	high (STR_50| (0+32768))
  4110  0FEB  00B9               	movwf	USARTWriteLine@str+1
  4111  0FEC  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  4112  0FF1                     l4475:	
  4113                           
  4114                           ;main.c: 295: }
  4115                           ;main.c: 296: USARTGotoNewLine();
  4116  0FF1  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  4117                           
  4118                           ;main.c: 297: USARTWriteString(">");
  4119  0FF6  3058               	movlw	low (STR_1| (0+32768))
  4120  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  4121  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  4122  0FF9  00B6               	movwf	USARTWriteString@str
  4123  0FFA  3086               	movlw	high (STR_1| (0+32768))
  4124  0FFB  00B7               	movwf	USARTWriteString@str+1
  4125  0FFC  160A  158A  25F3   	fcall	_USARTWriteString
  4126  0FFF  0008               	return
  4127  1000                     __end_of_choice:	
  4128                           
  4129                           	psect	text4
  4130  08F9                     __ptext4:	
  4131 ;; *************** function _sys *****************
  4132 ;; Defined at:
  4133 ;;		line 407 in file "main.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  duty            2   28[BANK1 ] int 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  max_duty        2   34[BANK1 ] unsigned int 
  4138 ;;  valueAD         2   32[BANK1 ] unsigned int 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4148 ;;      Params:         0       0       2       0       0
  4149 ;;      Locals:         0       0       4       0       0
  4150 ;;      Temps:          0       0       2       0       0
  4151 ;;      Totals:         0       0       8       0       0
  4152 ;;Total ram usage:        8 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    7
  4155 ;; This function calls:
  4156 ;;		_USARTDataAvailable
  4157 ;;		_USARTGotoNewLine
  4158 ;;		_USARTWriteLine
  4159 ;;		_USARTWriteString
  4160 ;;		___awmod
  4161 ;;		___lwmod
  4162 ;;		___wmul
  4163 ;;		_rand
  4164 ;;		_sampling
  4165 ;;		_set_pwm
  4166 ;;		_sprintf
  4167 ;;		_srand
  4168 ;; This function is called by:
  4169 ;;		_choice
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           
  4174                           ;psect for function _sys
  4175  08F9                     _sys:	
  4176                           
  4177                           ;main.c: 408: acquirement = 1;
  4178                           
  4179                           ;incstack = 0
  4180 ;; hardware stack exceeded
  4181                           ; Regs used in _sys: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4182  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  4183  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  4184  08FB  01D8               	clrf	_acquirement
  4185  08FC  0AD8               	incf	_acquirement,f
  4186                           
  4187                           ;main.c: 409: unsigned int valueAD = sampling();
  4188  08FD  160A  158A  24B0  120A  158A  	fcall	_sampling
  4189  0902  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0903  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0904  0836               	movf	?_sampling+1,w
  4192  0905  1683               	bsf	3,5	;RP0=1, select bank1
  4193  0906  1303               	bcf	3,6	;RP1=0, select bank1
  4194  0907  00C1               	movwf	(sys@valueAD+1)^(0+128)
  4195  0908  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0909  1303               	bcf	3,6	;RP1=0, select bank0
  4197  090A  0835               	movf	?_sampling,w
  4198  090B  1683               	bsf	3,5	;RP0=1, select bank1
  4199  090C  1303               	bcf	3,6	;RP1=0, select bank1
  4200  090D  00C0               	movwf	sys@valueAD^(0+128)
  4201                           
  4202                           ;main.c: 410: unsigned int max_duty = duty;
  4203  090E  083D               	movf	(sys@duty+1)^(0+128),w
  4204  090F  00C3               	movwf	(sys@max_duty+1)^(0+128)
  4205  0910  083C               	movf	sys@duty^(0+128),w
  4206  0911  00C2               	movwf	sys@max_duty^(0+128)
  4207                           
  4208                           ;main.c: 411: while(USARTDataAvailable() == 0 && acquirement){
  4209  0912  2A10               	goto	l4347
  4210  0913                     l4317:	
  4211                           
  4212                           ;main.c: 412: srand((unsigned) valueAD*TMR0 );
  4213  0913  1283               	bcf	3,5	;RP0=0, select bank0
  4214  0914  0801               	movf	1,w	;volatile
  4215  0915  1683               	bsf	3,5	;RP0=1, select bank1
  4216  0916  1303               	bcf	3,6	;RP1=0, select bank1
  4217  0917  00BE               	movwf	??_sys^(0+128)
  4218  0918  01BF               	clrf	(??_sys^(0+128)+1)
  4219  0919  083E               	movf	??_sys^(0+128),w
  4220  091A  1283               	bcf	3,5	;RP0=0, select bank0
  4221  091B  1303               	bcf	3,6	;RP1=0, select bank0
  4222  091C  00B5               	movwf	___wmul@multiplier
  4223  091D  1683               	bsf	3,5	;RP0=1, select bank1
  4224  091E  1303               	bcf	3,6	;RP1=0, select bank1
  4225  091F  083F               	movf	(??_sys+1)^(0+128),w
  4226  0920  1283               	bcf	3,5	;RP0=0, select bank0
  4227  0921  1303               	bcf	3,6	;RP1=0, select bank0
  4228  0922  00B6               	movwf	___wmul@multiplier+1
  4229  0923  1683               	bsf	3,5	;RP0=1, select bank1
  4230  0924  1303               	bcf	3,6	;RP1=0, select bank1
  4231  0925  0841               	movf	(sys@valueAD+1)^(0+128),w
  4232  0926  1283               	bcf	3,5	;RP0=0, select bank0
  4233  0927  1303               	bcf	3,6	;RP1=0, select bank0
  4234  0928  00B8               	movwf	___wmul@multiplicand+1
  4235  0929  1683               	bsf	3,5	;RP0=1, select bank1
  4236  092A  1303               	bcf	3,6	;RP1=0, select bank1
  4237  092B  0840               	movf	sys@valueAD^(0+128),w
  4238  092C  1283               	bcf	3,5	;RP0=0, select bank0
  4239  092D  1303               	bcf	3,6	;RP1=0, select bank0
  4240  092E  00B7               	movwf	___wmul@multiplicand
  4241  092F  160A  158A  2566  120A  158A  	fcall	___wmul
  4242  0934  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0935  1303               	bcf	3,6	;RP1=0, select bank0
  4244  0936  0836               	movf	?___wmul+1,w
  4245  0937  00BC               	movwf	srand@x+1
  4246  0938  0835               	movf	?___wmul,w
  4247  0939  00BB               	movwf	srand@x
  4248  093A  160A  158A  246E  120A  158A  	fcall	_srand
  4249                           
  4250                           ;main.c: 413: duty = rand()% max_duty;
  4251  093F  1683               	bsf	3,5	;RP0=1, select bank1
  4252  0940  1303               	bcf	3,6	;RP1=0, select bank1
  4253  0941  0843               	movf	(sys@max_duty+1)^(0+128),w
  4254  0942  00A1               	movwf	(___lwmod@divisor+1)^(0+128)
  4255  0943  0842               	movf	sys@max_duty^(0+128),w
  4256  0944  00A0               	movwf	___lwmod@divisor^(0+128)
  4257  0945  160A  118A  212F  120A  158A  	fcall	_rand
  4258  094A  1283               	bcf	3,5	;RP0=0, select bank0
  4259  094B  1303               	bcf	3,6	;RP1=0, select bank0
  4260  094C  0843               	movf	?_rand+1,w
  4261  094D  1683               	bsf	3,5	;RP0=1, select bank1
  4262  094E  1303               	bcf	3,6	;RP1=0, select bank1
  4263  094F  00A3               	movwf	(___lwmod@dividend+1)^(0+128)
  4264  0950  1283               	bcf	3,5	;RP0=0, select bank0
  4265  0951  1303               	bcf	3,6	;RP1=0, select bank0
  4266  0952  0842               	movf	?_rand,w
  4267  0953  1683               	bsf	3,5	;RP0=1, select bank1
  4268  0954  1303               	bcf	3,6	;RP1=0, select bank1
  4269  0955  00A2               	movwf	___lwmod@dividend^(0+128)
  4270  0956  160A  158A  2711  120A  158A  	fcall	___lwmod
  4271  095B  1683               	bsf	3,5	;RP0=1, select bank1
  4272  095C  1303               	bcf	3,6	;RP1=0, select bank1
  4273  095D  0821               	movf	(?___lwmod+1)^(0+128),w
  4274  095E  00BD               	movwf	(sys@duty+1)^(0+128)
  4275  095F  0820               	movf	?___lwmod^(0+128),w
  4276  0960  00BC               	movwf	sys@duty^(0+128)
  4277                           
  4278                           ;main.c: 414: if(duty>max_duty){
  4279  0961  083D               	movf	(sys@duty+1)^(0+128),w
  4280  0962  0243               	subwf	(sys@max_duty+1)^(0+128),w
  4281  0963  1D03               	skipz
  4282  0964  2967               	goto	u5325
  4283  0965  083C               	movf	sys@duty^(0+128),w
  4284  0966  0242               	subwf	sys@max_duty^(0+128),w
  4285  0967                     u5325:	
  4286  0967  1803               	skipnc
  4287  0968  296D               	goto	l4323
  4288                           
  4289                           ;main.c: 415: duty=max_duty;
  4290  0969  0843               	movf	(sys@max_duty+1)^(0+128),w
  4291  096A  00BD               	movwf	(sys@duty+1)^(0+128)
  4292  096B  0842               	movf	sys@max_duty^(0+128),w
  4293  096C  00BC               	movwf	sys@duty^(0+128)
  4294  096D                     l4323:	
  4295                           
  4296                           ;main.c: 416: }
  4297                           ;main.c: 417: set_pwm(duty);
  4298  096D  083D               	movf	(sys@duty+1)^(0+128),w
  4299  096E  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  4300  096F  083C               	movf	sys@duty^(0+128),w
  4301  0970  00B8               	movwf	set_pwm@percent^(0+128)
  4302  0971  120A  118A  2057  120A  158A  	fcall	_set_pwm
  4303                           
  4304                           ;main.c: 418: PR2 = rand()%255;
  4305  0976  30FF               	movlw	255
  4306  0977  1683               	bsf	3,5	;RP0=1, select bank1
  4307  0978  1303               	bcf	3,6	;RP1=0, select bank1
  4308  0979  00A0               	movwf	___awmod@divisor^(0+128)
  4309  097A  3000               	movlw	0
  4310  097B  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  4311  097C  160A  118A  212F  120A  158A  	fcall	_rand
  4312  0981  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0982  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0983  0843               	movf	?_rand+1,w
  4315  0984  1683               	bsf	3,5	;RP0=1, select bank1
  4316  0985  1303               	bcf	3,6	;RP1=0, select bank1
  4317  0986  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  4318  0987  1283               	bcf	3,5	;RP0=0, select bank0
  4319  0988  1303               	bcf	3,6	;RP1=0, select bank0
  4320  0989  0842               	movf	?_rand,w
  4321  098A  1683               	bsf	3,5	;RP0=1, select bank1
  4322  098B  1303               	bcf	3,6	;RP1=0, select bank1
  4323  098C  00A2               	movwf	___awmod@dividend^(0+128)
  4324  098D  160A  118A  2257  120A  158A  	fcall	___awmod
  4325  0992  1683               	bsf	3,5	;RP0=1, select bank1
  4326  0993  1303               	bcf	3,6	;RP1=0, select bank1
  4327  0994  0820               	movf	?___awmod^(0+128),w
  4328  0995  0092               	movwf	18	;volatile
  4329                           
  4330                           ;main.c: 419: USARTWriteString("Analog: ");
  4331  0996  3010               	movlw	low (STR_65| (0+32768))
  4332  0997  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0998  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0999  00B6               	movwf	USARTWriteString@str
  4335  099A  3086               	movlw	high (STR_65| (0+32768))
  4336  099B  00B7               	movwf	USARTWriteString@str+1
  4337  099C  160A  158A  25F3  120A  158A  	fcall	_USARTWriteString
  4338                           
  4339                           ;main.c: 420: sprintf(strBuffer,"%d",valueAD);
  4340  09A1  3051               	movlw	low (STR_52| (0+32768))
  4341  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  4342  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  4343  09A4  00A5               	movwf	sprintf@f^(0+128)
  4344  09A5  3086               	movlw	high (STR_52| (0+32768))
  4345  09A6  00A6               	movwf	(sprintf@f^(0+128)+1)
  4346  09A7  0841               	movf	(sys@valueAD+1)^(0+128),w
  4347  09A8  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  4348  09A9  0840               	movf	sys@valueAD^(0+128),w
  4349  09AA  00A7               	movwf	(?_sprintf^(0+128)+2)
  4350  09AB  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4351  09AC  160A  118A  26EE  120A  158A  	fcall	_sprintf
  4352                           
  4353                           ;main.c: 421: USARTWriteString(strBuffer);
  4354  09B1  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4355  09B2  1283               	bcf	3,5	;RP0=0, select bank0
  4356  09B3  1303               	bcf	3,6	;RP1=0, select bank0
  4357  09B4  00B6               	movwf	USARTWriteString@str
  4358  09B5  3001               	movlw	1
  4359  09B6  00B7               	movwf	USARTWriteString@str+1
  4360  09B7  160A  158A  25F3  120A  158A  	fcall	_USARTWriteString
  4361                           
  4362                           ;main.c: 422: USARTWriteString(", Duty: ");
  4363  09BC  3019               	movlw	low (STR_67| (0+32768))
  4364  09BD  1283               	bcf	3,5	;RP0=0, select bank0
  4365  09BE  1303               	bcf	3,6	;RP1=0, select bank0
  4366  09BF  00B6               	movwf	USARTWriteString@str
  4367  09C0  3086               	movlw	high (STR_67| (0+32768))
  4368  09C1  00B7               	movwf	USARTWriteString@str+1
  4369  09C2  160A  158A  25F3  120A  158A  	fcall	_USARTWriteString
  4370                           
  4371                           ;main.c: 423: sprintf(strBuffer,"%d",duty);
  4372  09C7  3051               	movlw	low (STR_52| (0+32768))
  4373  09C8  1683               	bsf	3,5	;RP0=1, select bank1
  4374  09C9  1303               	bcf	3,6	;RP1=0, select bank1
  4375  09CA  00A5               	movwf	sprintf@f^(0+128)
  4376  09CB  3086               	movlw	high (STR_52| (0+32768))
  4377  09CC  00A6               	movwf	(sprintf@f^(0+128)+1)
  4378  09CD  083D               	movf	(sys@duty+1)^(0+128),w
  4379  09CE  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  4380  09CF  083C               	movf	sys@duty^(0+128),w
  4381  09D0  00A7               	movwf	(?_sprintf^(0+128)+2)
  4382  09D1  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4383  09D2  160A  118A  26EE  120A  158A  	fcall	_sprintf
  4384                           
  4385                           ;main.c: 424: USARTWriteString(strBuffer);
  4386  09D7  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4387  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  4388  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  4389  09DA  00B6               	movwf	USARTWriteString@str
  4390  09DB  3001               	movlw	1
  4391  09DC  00B7               	movwf	USARTWriteString@str+1
  4392  09DD  160A  158A  25F3  120A  158A  	fcall	_USARTWriteString
  4393                           
  4394                           ;main.c: 425: USARTWriteString(", PR2: ");
  4395  09E2  302B               	movlw	low (STR_69| (0+32768))
  4396  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  4397  09E4  1303               	bcf	3,6	;RP1=0, select bank0
  4398  09E5  00B6               	movwf	USARTWriteString@str
  4399  09E6  3086               	movlw	high (STR_69| (0+32768))
  4400  09E7  00B7               	movwf	USARTWriteString@str+1
  4401  09E8  160A  158A  25F3  120A  158A  	fcall	_USARTWriteString
  4402                           
  4403                           ;main.c: 426: sprintf(strBuffer,"%d",PR2);
  4404  09ED  3051               	movlw	low (STR_52| (0+32768))
  4405  09EE  1683               	bsf	3,5	;RP0=1, select bank1
  4406  09EF  1303               	bcf	3,6	;RP1=0, select bank1
  4407  09F0  00A5               	movwf	sprintf@f^(0+128)
  4408  09F1  3086               	movlw	high (STR_52| (0+32768))
  4409  09F2  00A6               	movwf	(sprintf@f^(0+128)+1)
  4410  09F3  0812               	movf	18,w	;volatile
  4411  09F4  00BE               	movwf	??_sys^(0+128)
  4412  09F5  01BF               	clrf	(??_sys^(0+128)+1)
  4413  09F6  083E               	movf	??_sys^(0+128),w
  4414  09F7  00A7               	movwf	(?_sprintf^(0+128)+2)
  4415  09F8  083F               	movf	(??_sys+1)^(0+128),w
  4416  09F9  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  4417  09FA  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4418  09FB  160A  118A  26EE  120A  158A  	fcall	_sprintf
  4419                           
  4420                           ;main.c: 427: USARTWriteString(strBuffer);
  4421  0A00  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4422  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  4423  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  4424  0A03  00B6               	movwf	USARTWriteString@str
  4425  0A04  3001               	movlw	1
  4426  0A05  00B7               	movwf	USARTWriteString@str+1
  4427  0A06  160A  158A  25F3  120A  158A  	fcall	_USARTWriteString
  4428                           
  4429                           ;main.c: 428: USARTGotoNewLine();
  4430  0A0B  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  4431  0A10                     l4347:	
  4432  0A10  160A  158A  2589  120A  158A  	fcall	_USARTDataAvailable
  4433  0A15  3A00               	xorlw	0
  4434  0A16  1D03               	skipz
  4435  0A17  2A1D               	goto	l4351
  4436  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  4437  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  4438  0A1A  0858               	movf	_acquirement,w
  4439  0A1B  1D03               	btfss	3,2
  4440  0A1C  2913               	goto	l4317
  4441  0A1D                     l4351:	
  4442                           
  4443                           ;main.c: 429: }
  4444                           ;main.c: 430: USARTWriteLine("If you want stop the system, type:");
  4445  0A1D  3005               	movlw	low ((STR_24+8)| (0+32768))
  4446  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  4447  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  4448  0A20  00B8               	movwf	USARTWriteLine@str
  4449  0A21  3084               	movlw	high ((STR_24+8)| (0+32768))
  4450  0A22  00B9               	movwf	USARTWriteLine@str+1
  4451  0A23  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  4452                           
  4453                           ;main.c: 431: USARTWriteLine("stop()");
  4454  0A28  303A               	movlw	low (STR_46| (0+32768))
  4455  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  4456  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  4457  0A2B  00B8               	movwf	USARTWriteLine@str
  4458  0A2C  3086               	movlw	high (STR_46| (0+32768))
  4459  0A2D  00B9               	movwf	USARTWriteLine@str+1
  4460  0A2E  160A  158A  24C5   	fcall	_USARTWriteLine
  4461  0A31  0008               	return
  4462  0A32                     __end_of_sys:	
  4463                           
  4464                           	psect	text5
  4465  1C6E                     __ptext5:	
  4466 ;; *************** function _srand *****************
  4467 ;; Defined at:
  4468 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  x               2   27[BANK0 ] unsigned int 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4482 ;;      Params:         0       2       0       0       0
  4483 ;;      Locals:         0       0       0       0       0
  4484 ;;      Temps:          0       0       0       0       0
  4485 ;;      Totals:         0       2       0       0       0
  4486 ;;Total ram usage:        2 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    4
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_sys
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           
  4497                           ;psect for function _srand
  4498  1C6E                     _srand:	
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _srand: [wreg]
  4502  1C6E  1283               	bcf	3,5	;RP0=0, select bank0
  4503  1C6F  1303               	bcf	3,6	;RP1=0, select bank0
  4504  1C70  083B               	movf	srand@x,w
  4505  1C71  00D4               	movwf	_randx
  4506  1C72  083C               	movf	srand@x+1,w
  4507  1C73  00D5               	movwf	_randx+1
  4508  1C74  01D6               	clrf	_randx+2
  4509  1C75  01D7               	clrf	_randx+3
  4510  1C76  0008               	return
  4511  1C77                     __end_of_srand:	
  4512                           
  4513                           	psect	text6
  4514  112F                     __ptext6:	
  4515 ;; *************** function _rand *****************
  4516 ;; Defined at:
  4517 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;		None
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;		None
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  2   34[BANK0 ] int 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0, pclath, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4531 ;;      Params:         0       2       0       0       0
  4532 ;;      Locals:         0       0       0       0       0
  4533 ;;      Temps:          0       5       0       0       0
  4534 ;;      Totals:         0       7       0       0       0
  4535 ;;Total ram usage:        7 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    5
  4538 ;; This function calls:
  4539 ;;		___lmul
  4540 ;; This function is called by:
  4541 ;;		_sys
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _rand
  4547  112F                     _rand:	
  4548                           
  4549                           ;incstack = 0
  4550 ;; hardware stack exceeded
  4551                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4552  112F  1283               	bcf	3,5	;RP0=0, select bank0
  4553  1130  1303               	bcf	3,6	;RP1=0, select bank0
  4554  1131  0857               	movf	_randx+3,w
  4555  1132  00B8               	movwf	___lmul@multiplier+3
  4556  1133  0856               	movf	_randx+2,w
  4557  1134  00B7               	movwf	___lmul@multiplier+2
  4558  1135  0855               	movf	_randx+1,w
  4559  1136  00B6               	movwf	___lmul@multiplier+1
  4560  1137  0854               	movf	_randx,w
  4561  1138  00B5               	movwf	___lmul@multiplier
  4562  1139  3041               	movlw	65
  4563  113A  00BC               	movwf	___lmul@multiplicand+3
  4564  113B  30C6               	movlw	198
  4565  113C  00BB               	movwf	___lmul@multiplicand+2
  4566  113D  304E               	movlw	78
  4567  113E  00BA               	movwf	___lmul@multiplicand+1
  4568  113F  306D               	movlw	109
  4569  1140  00B9               	movwf	___lmul@multiplicand
  4570  1141  160A  118A  2064  160A  118A  	fcall	___lmul
  4571  1146  1283               	bcf	3,5	;RP0=0, select bank0
  4572  1147  1303               	bcf	3,6	;RP1=0, select bank0
  4573  1148  0838               	movf	?___lmul+3,w
  4574  1149  00D7               	movwf	_randx+3
  4575  114A  0837               	movf	?___lmul+2,w
  4576  114B  00D6               	movwf	_randx+2
  4577  114C  0836               	movf	?___lmul+1,w
  4578  114D  00D5               	movwf	_randx+1
  4579  114E  0835               	movf	?___lmul,w
  4580  114F  00D4               	movwf	_randx
  4581  1150  3039               	movlw	57
  4582  1151  07D4               	addwf	_randx,f
  4583  1152  3030               	movlw	48
  4584  1153  1803               	skipnc
  4585  1154  3031               	movlw	49
  4586  1155  07D5               	addwf	_randx+1,f
  4587  1156  3000               	movlw	0
  4588  1157  1803               	skipnc
  4589  1158  3001               	movlw	1
  4590  1159  07D6               	addwf	_randx+2,f
  4591  115A  3000               	movlw	0
  4592  115B  1803               	skipnc
  4593  115C  3001               	movlw	1
  4594  115D  07D7               	addwf	_randx+3,f
  4595  115E  0854               	movf	_randx,w
  4596  115F  00C4               	movwf	??_rand
  4597  1160  0855               	movf	_randx+1,w
  4598  1161  00C5               	movwf	??_rand+1
  4599  1162  0856               	movf	_randx+2,w
  4600  1163  00C6               	movwf	??_rand+2
  4601  1164  0857               	movf	_randx+3,w
  4602  1165  00C7               	movwf	??_rand+3
  4603  1166  3010               	movlw	16
  4604  1167  00C8               	movwf	??_rand+4
  4605  1168                     u4915:	
  4606  1168  0D47               	rlf	??_rand+3,w
  4607  1169  0CC7               	rrf	??_rand+3,f
  4608  116A  0CC6               	rrf	??_rand+2,f
  4609  116B  0CC5               	rrf	??_rand+1,f
  4610  116C  0CC4               	rrf	??_rand,f
  4611  116D  0BC8               	decfsz	??_rand+4,f
  4612  116E  2968               	goto	u4915
  4613  116F  30FF               	movlw	255
  4614  1170  0544               	andwf	??_rand,w
  4615  1171  00C2               	movwf	?_rand
  4616  1172  307F               	movlw	127
  4617  1173  0545               	andwf	??_rand+1,w
  4618  1174  00C3               	movwf	?_rand+1
  4619  1175  0008               	return
  4620  1176                     __end_of_rand:	
  4621                           
  4622                           	psect	text7
  4623  1064                     __ptext7:	
  4624 ;; *************** function ___lmul *****************
  4625 ;; Defined at:
  4626 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  multiplier      4   21[BANK0 ] unsigned long 
  4629 ;;  multiplicand    4   25[BANK0 ] unsigned long 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  product         4   30[BANK0 ] unsigned long 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  4   21[BANK0 ] unsigned long 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2, status,0
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4641 ;;      Params:         0       8       0       0       0
  4642 ;;      Locals:         0       4       0       0       0
  4643 ;;      Temps:          0       1       0       0       0
  4644 ;;      Totals:         0      13       0       0       0
  4645 ;;Total ram usage:       13 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    4
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_rand
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function ___lmul
  4657  1064                     ___lmul:	
  4658                           
  4659                           ;incstack = 0
  4660 ;; hardware stack exceeded
  4661                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4662  1064  3000               	movlw	0
  4663  1065  1283               	bcf	3,5	;RP0=0, select bank0
  4664  1066  1303               	bcf	3,6	;RP1=0, select bank0
  4665  1067  00C1               	movwf	___lmul@product+3
  4666  1068  3000               	movlw	0
  4667  1069  00C0               	movwf	___lmul@product+2
  4668  106A  3000               	movlw	0
  4669  106B  00BF               	movwf	___lmul@product+1
  4670  106C  3000               	movlw	0
  4671  106D  00BE               	movwf	___lmul@product
  4672  106E                     l3943:	
  4673  106E  1C35               	btfss	___lmul@multiplier,0
  4674  106F  2884               	goto	l3947
  4675  1070  0839               	movf	___lmul@multiplicand,w
  4676  1071  07BE               	addwf	___lmul@product,f
  4677  1072  083A               	movf	___lmul@multiplicand+1,w
  4678  1073  1103               	clrz
  4679  1074  1803               	skipnc
  4680  1075  3E01               	addlw	1
  4681  1076  1D03               	btfss	3,2
  4682  1077  07BF               	addwf	___lmul@product+1,f
  4683  1078  083B               	movf	___lmul@multiplicand+2,w
  4684  1079  1103               	clrz
  4685  107A  1803               	skipnc
  4686  107B  3E01               	addlw	1
  4687  107C  1D03               	btfss	3,2
  4688  107D  07C0               	addwf	___lmul@product+2,f
  4689  107E  083C               	movf	___lmul@multiplicand+3,w
  4690  107F  1103               	clrz
  4691  1080  1803               	skipnc
  4692  1081  3E01               	addlw	1
  4693  1082  1D03               	btfss	3,2
  4694  1083  07C1               	addwf	___lmul@product+3,f
  4695  1084                     l3947:	
  4696  1084  3001               	movlw	1
  4697  1085  00BD               	movwf	??___lmul
  4698  1086                     u4815:	
  4699  1086  1003               	clrc
  4700  1087  0DB9               	rlf	___lmul@multiplicand,f
  4701  1088  0DBA               	rlf	___lmul@multiplicand+1,f
  4702  1089  0DBB               	rlf	___lmul@multiplicand+2,f
  4703  108A  0DBC               	rlf	___lmul@multiplicand+3,f
  4704  108B  0BBD               	decfsz	??___lmul,f
  4705  108C  2886               	goto	u4815
  4706  108D  3001               	movlw	1
  4707  108E                     u4825:	
  4708  108E  1003               	clrc
  4709  108F  0CB8               	rrf	___lmul@multiplier+3,f
  4710  1090  0CB7               	rrf	___lmul@multiplier+2,f
  4711  1091  0CB6               	rrf	___lmul@multiplier+1,f
  4712  1092  0CB5               	rrf	___lmul@multiplier,f
  4713  1093  3EFF               	addlw	-1
  4714  1094  1D03               	skipz
  4715  1095  288E               	goto	u4825
  4716  1096  0838               	movf	___lmul@multiplier+3,w
  4717  1097  0437               	iorwf	___lmul@multiplier+2,w
  4718  1098  0436               	iorwf	___lmul@multiplier+1,w
  4719  1099  0435               	iorwf	___lmul@multiplier,w
  4720  109A  1D03               	skipz
  4721  109B  286E               	goto	l3943
  4722  109C  0841               	movf	___lmul@product+3,w
  4723  109D  00B8               	movwf	?___lmul+3
  4724  109E  0840               	movf	___lmul@product+2,w
  4725  109F  00B7               	movwf	?___lmul+2
  4726  10A0  083F               	movf	___lmul@product+1,w
  4727  10A1  00B6               	movwf	?___lmul+1
  4728  10A2  083E               	movf	___lmul@product,w
  4729  10A3  00B5               	movwf	?___lmul
  4730  10A4  0008               	return
  4731  10A5                     __end_of___lmul:	
  4732                           
  4733                           	psect	text8
  4734  1257                     __ptext8:	
  4735 ;; *************** function ___awmod *****************
  4736 ;; Defined at:
  4737 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  divisor         2    0[BANK1 ] int 
  4740 ;;  dividend        2    2[BANK1 ] int 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  sign            1    5[BANK1 ] unsigned char 
  4743 ;;  counter         1    4[BANK1 ] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  2    0[BANK1 ] int 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4753 ;;      Params:         0       0       4       0       0
  4754 ;;      Locals:         0       0       2       0       0
  4755 ;;      Temps:          0       1       0       0       0
  4756 ;;      Totals:         0       1       6       0       0
  4757 ;;Total ram usage:        7 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    4
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_sys
  4764 ;;		_USARTWriteInt
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function ___awmod
  4770  1257                     ___awmod:	
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4774  1257  1683               	bsf	3,5	;RP0=1, select bank1
  4775  1258  1303               	bcf	3,6	;RP1=0, select bank1
  4776  1259  01A5               	clrf	___awmod@sign^(0+128)
  4777  125A  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  4778  125B  2A63               	goto	l4051
  4779  125C  09A2               	comf	___awmod@dividend^(0+128),f
  4780  125D  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4781  125E  0AA2               	incf	___awmod@dividend^(0+128),f
  4782  125F  1903               	skipnz
  4783  1260  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4784  1261  01A5               	clrf	___awmod@sign^(0+128)
  4785  1262  0AA5               	incf	___awmod@sign^(0+128),f
  4786  1263                     l4051:	
  4787  1263  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  4788  1264  2A6A               	goto	l4055
  4789  1265  09A0               	comf	___awmod@divisor^(0+128),f
  4790  1266  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  4791  1267  0AA0               	incf	___awmod@divisor^(0+128),f
  4792  1268  1903               	skipnz
  4793  1269  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  4794  126A                     l4055:	
  4795  126A  0820               	movf	___awmod@divisor^(0+128),w
  4796  126B  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  4797  126C  1903               	btfsc	3,2
  4798  126D  2A9B               	goto	l4073
  4799  126E  01A4               	clrf	___awmod@counter^(0+128)
  4800  126F  0AA4               	incf	___awmod@counter^(0+128),f
  4801  1270                     l4063:	
  4802  1270  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  4803  1271  2A82               	goto	l4065
  4804  1272  3001               	movlw	1
  4805  1273                     u5015:	
  4806  1273  1003               	clrc
  4807  1274  0DA0               	rlf	___awmod@divisor^(0+128),f
  4808  1275  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  4809  1276  3EFF               	addlw	-1
  4810  1277  1D03               	skipz
  4811  1278  2A73               	goto	u5015
  4812  1279  3001               	movlw	1
  4813  127A  1283               	bcf	3,5	;RP0=0, select bank0
  4814  127B  1303               	bcf	3,6	;RP1=0, select bank0
  4815  127C  00C9               	movwf	??___awmod
  4816  127D  0849               	movf	??___awmod,w
  4817  127E  1683               	bsf	3,5	;RP0=1, select bank1
  4818  127F  1303               	bcf	3,6	;RP1=0, select bank1
  4819  1280  07A4               	addwf	___awmod@counter^(0+128),f
  4820  1281  2A70               	goto	l4063
  4821  1282                     l4065:	
  4822  1282  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4823  1283  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  4824  1284  1D03               	skipz
  4825  1285  2A88               	goto	u5035
  4826  1286  0820               	movf	___awmod@divisor^(0+128),w
  4827  1287  0222               	subwf	___awmod@dividend^(0+128),w
  4828  1288                     u5035:	
  4829  1288  1C03               	skipc
  4830  1289  2A90               	goto	l4069
  4831  128A  0820               	movf	___awmod@divisor^(0+128),w
  4832  128B  02A2               	subwf	___awmod@dividend^(0+128),f
  4833  128C  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4834  128D  1C03               	skipc
  4835  128E  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  4836  128F  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  4837  1290                     l4069:	
  4838  1290  3001               	movlw	1
  4839  1291                     u5045:	
  4840  1291  1003               	clrc
  4841  1292  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  4842  1293  0CA0               	rrf	___awmod@divisor^(0+128),f
  4843  1294  3EFF               	addlw	-1
  4844  1295  1D03               	skipz
  4845  1296  2A91               	goto	u5045
  4846  1297  3001               	movlw	1
  4847  1298  02A4               	subwf	___awmod@counter^(0+128),f
  4848  1299  1D03               	btfss	3,2
  4849  129A  2A82               	goto	l4065
  4850  129B                     l4073:	
  4851  129B  0825               	movf	___awmod@sign^(0+128),w
  4852  129C  1903               	btfsc	3,2
  4853  129D  2AA3               	goto	l4077
  4854  129E  09A2               	comf	___awmod@dividend^(0+128),f
  4855  129F  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4856  12A0  0AA2               	incf	___awmod@dividend^(0+128),f
  4857  12A1  1903               	skipnz
  4858  12A2  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4859  12A3                     l4077:	
  4860  12A3  0823               	movf	(___awmod@dividend+1)^(0+128),w
  4861  12A4  00A1               	movwf	(?___awmod+1)^(0+128)
  4862  12A5  0822               	movf	___awmod@dividend^(0+128),w
  4863  12A6  00A0               	movwf	?___awmod^(0+128)
  4864  12A7  0008               	return
  4865  12A8                     __end_of___awmod:	
  4866                           
  4867                           	psect	text9
  4868  1DAC                     __ptext9:	
  4869 ;; *************** function _strlen *****************
  4870 ;; Defined at:
  4871 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  s               2   21[BANK0 ] PTR const unsigned char 
  4874 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  4875 ;;		 -> content(25), 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  4878 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  4879 ;;		 -> content(25), 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2   21[BANK0 ] unsigned int 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4889 ;;      Params:         0       2       0       0       0
  4890 ;;      Locals:         0       2       0       0       0
  4891 ;;      Temps:          0       2       0       0       0
  4892 ;;      Totals:         0       6       0       0       0
  4893 ;;Total ram usage:        6 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    4
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_choice
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _strlen
  4905  1DAC                     _strlen:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  4909  1DAC  1283               	bcf	3,5	;RP0=0, select bank0
  4910  1DAD  1303               	bcf	3,6	;RP1=0, select bank0
  4911  1DAE  0835               	movf	strlen@s,w
  4912  1DAF  00B9               	movwf	strlen@cp
  4913  1DB0  0836               	movf	strlen@s+1,w
  4914  1DB1  00BA               	movwf	strlen@cp+1
  4915  1DB2                     l4225:	
  4916  1DB2  0839               	movf	strlen@cp,w
  4917  1DB3  0084               	movwf	4
  4918  1DB4  1783               	bsf	3,7
  4919  1DB5  1C3A               	btfss	strlen@cp+1,0
  4920  1DB6  1383               	bcf	3,7
  4921  1DB7  0800               	movf	0,w
  4922  1DB8  1903               	btfsc	3,2
  4923  1DB9  2DBF               	goto	l4227
  4924  1DBA  3001               	movlw	1
  4925  1DBB  07B9               	addwf	strlen@cp,f
  4926  1DBC  1803               	skipnc
  4927  1DBD  0ABA               	incf	strlen@cp+1,f
  4928  1DBE  2DB2               	goto	l4225
  4929  1DBF                     l4227:	
  4930  1DBF  0935               	comf	strlen@s,w
  4931  1DC0  00B7               	movwf	??_strlen
  4932  1DC1  0936               	comf	strlen@s+1,w
  4933  1DC2  00B8               	movwf	??_strlen+1
  4934  1DC3  0AB7               	incf	??_strlen,f
  4935  1DC4  1903               	skipnz
  4936  1DC5  0AB8               	incf	??_strlen+1,f
  4937  1DC6  0839               	movf	strlen@cp,w
  4938  1DC7  0737               	addwf	??_strlen,w
  4939  1DC8  00B5               	movwf	?_strlen
  4940  1DC9  083A               	movf	strlen@cp+1,w
  4941  1DCA  1803               	skipnc
  4942  1DCB  0A3A               	incf	strlen@cp+1,w
  4943  1DCC  0738               	addwf	??_strlen+1,w
  4944  1DCD  00B6               	movwf	?_strlen+1
  4945  1DCE  0008               	return
  4946  1DCF                     __end_of_strlen:	
  4947                           
  4948                           	psect	text10
  4949  1EA7                     __ptext10:	
  4950 ;; *************** function _strcspn *****************
  4951 ;; Defined at:
  4952 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  s1              1    wreg     PTR const unsigned char 
  4955 ;;		 -> content(25), 
  4956 ;;  s2              2   27[BANK0 ] PTR const unsigned char 
  4957 ;;		 -> STR_45(2), STR_44(2), STR_42(2), STR_41(2), 
  4958 ;;		 -> STR_39(2), STR_38(2), STR_37(2), 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  s1              1   33[BANK0 ] PTR const unsigned char 
  4961 ;;		 -> content(25), 
  4962 ;;  i               2   31[BANK0 ] unsigned int 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  2   27[BANK0 ] unsigned int 
  4965 ;; Registers used:
  4966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4972 ;;      Params:         0       2       0       0       0
  4973 ;;      Locals:         0       3       0       0       0
  4974 ;;      Temps:          0       2       0       0       0
  4975 ;;      Totals:         0       7       0       0       0
  4976 ;;Total ram usage:        7 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    5
  4979 ;; This function calls:
  4980 ;;		_strchr
  4981 ;; This function is called by:
  4982 ;;		_choice
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           
  4987                           ;psect for function _strcspn
  4988  1EA7                     _strcspn:	
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _strcspn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4992                           ;strcspn@s1 stored from wreg
  4993  1EA7  1283               	bcf	3,5	;RP0=0, select bank0
  4994  1EA8  1303               	bcf	3,6	;RP1=0, select bank0
  4995  1EA9  00C1               	movwf	strcspn@s1
  4996  1EAA  01BF               	clrf	strcspn@i
  4997  1EAB  01C0               	clrf	strcspn@i+1
  4998  1EAC  2EB7               	goto	l4215
  4999  1EAD                     l4213:	
  5000  1EAD  3001               	movlw	1
  5001  1EAE  00BD               	movwf	??_strcspn
  5002  1EAF  083D               	movf	??_strcspn,w
  5003  1EB0  07C1               	addwf	strcspn@s1,f
  5004  1EB1  3001               	movlw	1
  5005  1EB2  07BF               	addwf	strcspn@i,f
  5006  1EB3  1803               	skipnc
  5007  1EB4  0AC0               	incf	strcspn@i+1,f
  5008  1EB5  3000               	movlw	0
  5009  1EB6  07C0               	addwf	strcspn@i+1,f
  5010  1EB7                     l4215:	
  5011  1EB7  0841               	movf	strcspn@s1,w
  5012  1EB8  0084               	movwf	4
  5013  1EB9  1383               	bcf	3,7	;select IRP bank0
  5014  1EBA  0800               	movf	0,w
  5015  1EBB  1903               	btfsc	3,2
  5016  1EBC  2ED5               	goto	l4219
  5017  1EBD  083B               	movf	strcspn@s2,w
  5018  1EBE  00B5               	movwf	strchr@ptr
  5019  1EBF  083C               	movf	strcspn@s2+1,w
  5020  1EC0  00B6               	movwf	strchr@ptr+1
  5021  1EC1  0841               	movf	strcspn@s1,w
  5022  1EC2  0084               	movwf	4
  5023  1EC3  0800               	movf	0,w
  5024  1EC4  00BD               	movwf	??_strcspn
  5025  1EC5  01BE               	clrf	??_strcspn+1
  5026  1EC6  083D               	movf	??_strcspn,w
  5027  1EC7  00B7               	movwf	strchr@chr
  5028  1EC8  083E               	movf	??_strcspn+1,w
  5029  1EC9  00B8               	movwf	strchr@chr+1
  5030  1ECA  160A  158A  25CF  160A  158A  	fcall	_strchr
  5031  1ECF  1283               	bcf	3,5	;RP0=0, select bank0
  5032  1ED0  1303               	bcf	3,6	;RP1=0, select bank0
  5033  1ED1  0835               	movf	?_strchr,w
  5034  1ED2  0436               	iorwf	?_strchr+1,w
  5035  1ED3  1903               	btfsc	3,2
  5036  1ED4  2EAD               	goto	l4213
  5037  1ED5                     l4219:	
  5038  1ED5  0840               	movf	strcspn@i+1,w
  5039  1ED6  00BC               	movwf	?_strcspn+1
  5040  1ED7  083F               	movf	strcspn@i,w
  5041  1ED8  00BB               	movwf	?_strcspn
  5042  1ED9  0008               	return
  5043  1EDA                     __end_of_strcspn:	
  5044                           
  5045                           	psect	text11
  5046  1DCF                     __ptext11:	
  5047 ;; *************** function _strchr *****************
  5048 ;; Defined at:
  5049 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  ptr             2   21[BANK0 ] PTR const unsigned char 
  5052 ;;		 -> STR_45(2), STR_44(2), STR_42(2), STR_41(2), 
  5053 ;;		 -> STR_39(2), STR_38(2), STR_37(2), 
  5054 ;;  chr             2   23[BANK0 ] int 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;		None
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  2   21[BANK0 ] PTR unsigned char 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr0l, fsr0h, status,2, btemp+1, pclath
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5066 ;;      Params:         0       4       0       0       0
  5067 ;;      Locals:         0       0       0       0       0
  5068 ;;      Temps:          0       2       0       0       0
  5069 ;;      Totals:         0       6       0       0       0
  5070 ;;Total ram usage:        6 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    4
  5073 ;; This function calls:
  5074 ;;		Nothing
  5075 ;; This function is called by:
  5076 ;;		_strcspn
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           
  5081                           ;psect for function _strchr
  5082  1DCF                     _strchr:	
  5083  1DCF                     l900:	
  5084                           ;incstack = 0
  5085 ;; using string table level
  5086                           ; Regs used in _strchr: [wreg-fsr0h+status,2+btemp+1+pclath]
  5087                           
  5088  1DCF  1283               	bcf	3,5	;RP0=0, select bank0
  5089  1DD0  1303               	bcf	3,6	;RP1=0, select bank0
  5090  1DD1  0836               	movf	strchr@ptr+1,w
  5091  1DD2  00FF               	movwf	127
  5092  1DD3  0835               	movf	strchr@ptr,w
  5093  1DD4  0084               	movwf	4
  5094  1DD5  120A  118A  2100  160A  158A  	fcall	stringtab
  5095  1DDA  0637               	xorwf	strchr@chr,w
  5096  1DDB  1903               	btfsc	3,2
  5097  1DDC  0008               	return
  5098  1DDD  0836               	movf	strchr@ptr+1,w
  5099  1DDE  00BA               	movwf	??_strchr+1
  5100  1DDF  0835               	movf	strchr@ptr,w
  5101  1DE0  00B9               	movwf	??_strchr
  5102  1DE1  0AB5               	incf	strchr@ptr,f
  5103  1DE2  1903               	skipnz
  5104  1DE3  0AB6               	incf	strchr@ptr+1,f
  5105  1DE4  083A               	movf	??_strchr+1,w
  5106  1DE5  00FF               	movwf	127
  5107  1DE6  0839               	movf	??_strchr,w
  5108  1DE7  0084               	movwf	4
  5109  1DE8  120A  118A  2100  160A  158A  	fcall	stringtab
  5110  1DED  3A00               	xorlw	0
  5111  1DEE  1D03               	skipz
  5112  1DEF  2DCF               	goto	l900
  5113  1DF0  01B5               	clrf	?_strchr
  5114  1DF1  01B6               	clrf	?_strchr+1
  5115  1DF2  0008               	return
  5116  1DF3                     __end_of_strchr:	
  5117                           
  5118                           	psect	text12
  5119  146B                     __ptext12:	
  5120 ;; *************** function _step *****************
  5121 ;; Defined at:
  5122 ;;		line 310 in file "main.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  duty            2   28[BANK1 ] int 
  5125 ;;  time            4   30[BANK1 ] unsigned long 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5137 ;;      Params:         0       0       6       0       0
  5138 ;;      Locals:         0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0
  5140 ;;      Totals:         0       0       6       0       0
  5141 ;;Total ram usage:        6 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    8
  5144 ;; This function calls:
  5145 ;;		_USARTWriteLine
  5146 ;;		_acquire
  5147 ;;		_set_pwm
  5148 ;;		_sprintf
  5149 ;;		_stop
  5150 ;; This function is called by:
  5151 ;;		_choice
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           
  5156                           ;psect for function _step
  5157  146B                     _step:	
  5158                           
  5159                           ;main.c: 312: if(duty>100){
  5160                           
  5161                           ;incstack = 0
  5162 ;; hardware stack exceeded
  5163                           ; Regs used in _step: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5164  146B  1683               	bsf	3,5	;RP0=1, select bank1
  5165  146C  1303               	bcf	3,6	;RP1=0, select bank1
  5166  146D  083D               	movf	(step@duty+1)^(0+128),w
  5167  146E  3A80               	xorlw	128
  5168  146F  00FF               	movwf	127
  5169  1470  3080               	movlw	128
  5170  1471  027F               	subwf	127,w
  5171  1472  1D03               	skipz
  5172  1473  2C76               	goto	u5285
  5173  1474  3065               	movlw	101
  5174  1475  023C               	subwf	step@duty^(0+128),w
  5175  1476                     u5285:	
  5176  1476  1C03               	skipc
  5177  1477  2C7C               	goto	l4269
  5178                           
  5179                           ;main.c: 313: duty=0;
  5180  1478  1683               	bsf	3,5	;RP0=1, select bank1
  5181  1479  1303               	bcf	3,6	;RP1=0, select bank1
  5182  147A  01BC               	clrf	step@duty^(0+128)
  5183  147B  01BD               	clrf	(step@duty+1)^(0+128)
  5184  147C                     l4269:	
  5185                           
  5186                           ;main.c: 314: }
  5187                           ;main.c: 315: set_pwm(duty);
  5188  147C  1683               	bsf	3,5	;RP0=1, select bank1
  5189  147D  1303               	bcf	3,6	;RP1=0, select bank1
  5190  147E  083D               	movf	(step@duty+1)^(0+128),w
  5191  147F  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  5192  1480  083C               	movf	step@duty^(0+128),w
  5193  1481  00B8               	movwf	set_pwm@percent^(0+128)
  5194  1482  120A  118A  2057  160A  118A  	fcall	_set_pwm
  5195                           
  5196                           ;main.c: 317: sprintf(strBuffer,"%d",duty);
  5197  1487  3051               	movlw	low (STR_52| (0+32768))
  5198  1488  1683               	bsf	3,5	;RP0=1, select bank1
  5199  1489  1303               	bcf	3,6	;RP1=0, select bank1
  5200  148A  00A5               	movwf	sprintf@f^(0+128)
  5201  148B  3086               	movlw	high (STR_52| (0+32768))
  5202  148C  00A6               	movwf	(sprintf@f^(0+128)+1)
  5203  148D  083D               	movf	(step@duty+1)^(0+128),w
  5204  148E  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5205  148F  083C               	movf	step@duty^(0+128),w
  5206  1490  00A7               	movwf	(?_sprintf^(0+128)+2)
  5207  1491  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5208  1492  160A  118A  26EE  160A  118A  	fcall	_sprintf
  5209                           
  5210                           ;main.c: 318: USARTWriteLine(strBuffer);
  5211  1497  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5212  1498  1283               	bcf	3,5	;RP0=0, select bank0
  5213  1499  1303               	bcf	3,6	;RP1=0, select bank0
  5214  149A  00B8               	movwf	USARTWriteLine@str
  5215  149B  3001               	movlw	1
  5216  149C  00B9               	movwf	USARTWriteLine@str+1
  5217  149D  160A  158A  24C5  160A  118A  	fcall	_USARTWriteLine
  5218                           
  5219                           ;main.c: 319: sprintf(strBuffer,"%d",time);
  5220  14A2  3051               	movlw	low (STR_52| (0+32768))
  5221  14A3  1683               	bsf	3,5	;RP0=1, select bank1
  5222  14A4  1303               	bcf	3,6	;RP1=0, select bank1
  5223  14A5  00A5               	movwf	sprintf@f^(0+128)
  5224  14A6  3086               	movlw	high (STR_52| (0+32768))
  5225  14A7  00A6               	movwf	(sprintf@f^(0+128)+1)
  5226  14A8  0841               	movf	(step@time+3)^(0+128),w
  5227  14A9  00AA               	movwf	((?_sprintf+3)^(0+128)+2)
  5228  14AA  0840               	movf	(step@time+2)^(0+128),w
  5229  14AB  00A9               	movwf	((?_sprintf+2)^(0+128)+2)
  5230  14AC  083F               	movf	(step@time+1)^(0+128),w
  5231  14AD  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5232  14AE  083E               	movf	step@time^(0+128),w
  5233  14AF  00A7               	movwf	(?_sprintf^(0+128)+2)
  5234  14B0  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5235  14B1  160A  118A  26EE  160A  118A  	fcall	_sprintf
  5236                           
  5237                           ;main.c: 320: USARTWriteLine(strBuffer);
  5238  14B6  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5239  14B7  1283               	bcf	3,5	;RP0=0, select bank0
  5240  14B8  1303               	bcf	3,6	;RP1=0, select bank0
  5241  14B9  00B8               	movwf	USARTWriteLine@str
  5242  14BA  3001               	movlw	1
  5243  14BB  00B9               	movwf	USARTWriteLine@str+1
  5244  14BC  160A  158A  24C5  160A  118A  	fcall	_USARTWriteLine
  5245                           
  5246                           ;main.c: 322: if(time == 0){
  5247  14C1  1683               	bsf	3,5	;RP0=1, select bank1
  5248  14C2  1303               	bcf	3,6	;RP1=0, select bank1
  5249  14C3  0841               	movf	(step@time+3)^(0+128),w
  5250  14C4  0440               	iorwf	(step@time+2)^(0+128),w
  5251  14C5  043F               	iorwf	(step@time+1)^(0+128),w
  5252  14C6  043E               	iorwf	step@time^(0+128),w
  5253  14C7  1D03               	skipz
  5254  14C8  2CD2               	goto	l321
  5255                           
  5256                           ;main.c: 324: acquire();
  5257  14C9  120A  118A  27A0  160A  118A  	fcall	_acquire
  5258                           
  5259                           ;main.c: 325: stop();
  5260  14CE  160A  158A  2482   	fcall	_stop
  5261                           
  5262                           ;main.c: 326: }
  5263  14D1  0008               	return
  5264  14D2                     l321:	
  5265                           
  5266                           ;main.c: 327: else{
  5267                           ;main.c: 328: stepEnable = 1;
  5268  14D2  1283               	bcf	3,5	;RP0=0, select bank0
  5269  14D3  1303               	bcf	3,6	;RP1=0, select bank0
  5270  14D4  01D3               	clrf	_stepEnable
  5271  14D5  0AD3               	incf	_stepEnable,f
  5272                           
  5273                           ;main.c: 329: count = 0;
  5274  14D6  01D1               	clrf	_count
  5275  14D7  01D2               	clrf	_count+1
  5276                           
  5277                           ;main.c: 330: max_counters = time;
  5278  14D8  1683               	bsf	3,5	;RP0=1, select bank1
  5279  14D9  1303               	bcf	3,6	;RP1=0, select bank1
  5280  14DA  083F               	movf	(step@time+1)^(0+128),w
  5281  14DB  1283               	bcf	3,5	;RP0=0, select bank0
  5282  14DC  1303               	bcf	3,6	;RP1=0, select bank0
  5283  14DD  00D0               	movwf	_max_counters+1
  5284  14DE  1683               	bsf	3,5	;RP0=1, select bank1
  5285  14DF  1303               	bcf	3,6	;RP1=0, select bank1
  5286  14E0  083E               	movf	step@time^(0+128),w
  5287  14E1  1283               	bcf	3,5	;RP0=0, select bank0
  5288  14E2  1303               	bcf	3,6	;RP1=0, select bank0
  5289  14E3  00CF               	movwf	_max_counters
  5290                           
  5291                           ;main.c: 332: acquire();
  5292  14E4  120A  118A  27A0  160A  118A  	fcall	_acquire
  5293                           
  5294                           ;main.c: 333: USARTWriteLine("If you want stop the system, type:");
  5295  14E9  3005               	movlw	low ((STR_24+8)| (0+32768))
  5296  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  5297  14EB  1303               	bcf	3,6	;RP1=0, select bank0
  5298  14EC  00B8               	movwf	USARTWriteLine@str
  5299  14ED  3084               	movlw	high ((STR_24+8)| (0+32768))
  5300  14EE  00B9               	movwf	USARTWriteLine@str+1
  5301  14EF  160A  158A  24C5  160A  118A  	fcall	_USARTWriteLine
  5302                           
  5303                           ;main.c: 334: USARTWriteLine("stop()");
  5304  14F4  303A               	movlw	low (STR_46| (0+32768))
  5305  14F5  1283               	bcf	3,5	;RP0=0, select bank0
  5306  14F6  1303               	bcf	3,6	;RP1=0, select bank0
  5307  14F7  00B8               	movwf	USARTWriteLine@str
  5308  14F8  3086               	movlw	high (STR_46| (0+32768))
  5309  14F9  00B9               	movwf	USARTWriteLine@str+1
  5310  14FA  160A  158A  24C5   	fcall	_USARTWriteLine
  5311  14FD  0008               	return
  5312  14FE                     __end_of_step:	
  5313                           
  5314                           	psect	text13
  5315  1C82                     __ptext13:	
  5316 ;; *************** function _stop *****************
  5317 ;; Defined at:
  5318 ;;		line 371 in file "main.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;		None
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, pclath, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5332 ;;      Params:         0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0
  5335 ;;      Totals:         0       0       0       0       0
  5336 ;;Total ram usage:        0 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    7
  5339 ;; This function calls:
  5340 ;;		_set_pwm
  5341 ;; This function is called by:
  5342 ;;		_main
  5343 ;;		_choice
  5344 ;;		_step
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _stop
  5350  1C82                     _stop:	
  5351                           
  5352                           ;main.c: 372: set_pwm(0);
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5356  1C82  3000               	movlw	0
  5357  1C83  1683               	bsf	3,5	;RP0=1, select bank1
  5358  1C84  1303               	bcf	3,6	;RP1=0, select bank1
  5359  1C85  00B8               	movwf	set_pwm@percent^(0+128)
  5360  1C86  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  5361  1C87  120A  118A  2057   	fcall	_set_pwm
  5362                           
  5363                           ;main.c: 373: stepEnable = 0;
  5364  1C8A  1283               	bcf	3,5	;RP0=0, select bank0
  5365  1C8B  1303               	bcf	3,6	;RP1=0, select bank0
  5366  1C8C  01D3               	clrf	_stepEnable
  5367                           
  5368                           ;main.c: 374: acquirement = 0;
  5369  1C8D  01D8               	clrf	_acquirement
  5370  1C8E  0008               	return
  5371  1C8F                     __end_of_stop:	
  5372                           
  5373                           	psect	text14
  5374  080C                     __ptext14:	
  5375 ;; *************** function _status *****************
  5376 ;; Defined at:
  5377 ;;		line 355 in file "main.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  i               2   30[BANK3 ] int 
  5382 ;;  output         25    0[BANK3 ] unsigned char [25]
  5383 ;;  aux             3   25[BANK3 ] float 
  5384 ;;  duty            2   28[BANK3 ] int 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5394 ;;      Params:         0       0       0       0       0
  5395 ;;      Locals:         0       0       0      32       0
  5396 ;;      Temps:          0       0       0       0       0
  5397 ;;      Totals:         0       0       0      32       0
  5398 ;;Total ram usage:       32 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    7
  5401 ;; This function calls:
  5402 ;;		_USARTGotoNewLine
  5403 ;;		_USARTWriteLine
  5404 ;;		___awtoft
  5405 ;;		___ftdiv
  5406 ;;		___ftmul
  5407 ;;		___fttol
  5408 ;;		_adReadA0
  5409 ;;		_sprintf
  5410 ;;		_strcat
  5411 ;;		_strcpy
  5412 ;; This function is called by:
  5413 ;;		_choice
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           
  5418                           ;psect for function _status
  5419  080C                     _status:	
  5420                           
  5421                           ;main.c: 356: char output[25];
  5422                           ;main.c: 357: for(int i=0 ; i<25;i++){
  5423                           
  5424                           ;incstack = 0
  5425 ;; hardware stack exceeded
  5426                           ; Regs used in _status: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5427  080C  1683               	bsf	3,5	;RP0=1, select bank3
  5428  080D  1703               	bsf	3,6	;RP1=1, select bank3
  5429  080E  01AE               	clrf	status@i^(0+384)
  5430  080F  01AF               	clrf	(status@i+1)^(0+384)
  5431  0810  082F               	movf	(status@i+1)^(0+384),w
  5432  0811  3A80               	xorlw	128
  5433  0812  00FF               	movwf	127
  5434  0813  3080               	movlw	128
  5435  0814  027F               	subwf	127,w
  5436  0815  1D03               	skipz
  5437  0816  2819               	goto	u5355
  5438  0817  3019               	movlw	25
  5439  0818  022E               	subwf	status@i^(0+384),w
  5440  0819                     u5355:	
  5441  0819  1803               	btfsc	3,0
  5442  081A  2833               	goto	l4365
  5443  081B                     l4359:	
  5444                           
  5445                           ;main.c: 358: output[i] = '\0';
  5446  081B  1683               	bsf	3,5	;RP0=1, select bank3
  5447  081C  1703               	bsf	3,6	;RP1=1, select bank3
  5448  081D  082E               	movf	status@i^(0+384),w
  5449  081E  3E90               	addlw	(low (status@output| (0+256)))& (0+255)
  5450  081F  0084               	movwf	4
  5451  0820  1783               	bsf	3,7	;select IRP bank3
  5452  0821  0180               	clrf	0
  5453  0822  3001               	movlw	1
  5454  0823  07AE               	addwf	status@i^(0+384),f
  5455  0824  1803               	skipnc
  5456  0825  0AAF               	incf	(status@i+1)^(0+384),f
  5457  0826  3000               	movlw	0
  5458  0827  07AF               	addwf	(status@i+1)^(0+384),f
  5459  0828  082F               	movf	(status@i+1)^(0+384),w
  5460  0829  3A80               	xorlw	128
  5461  082A  00FF               	movwf	127
  5462  082B  3080               	movlw	128
  5463  082C  027F               	subwf	127,w
  5464  082D  1D03               	skipz
  5465  082E  2831               	goto	u5365
  5466  082F  3019               	movlw	25
  5467  0830  022E               	subwf	status@i^(0+384),w
  5468  0831                     u5365:	
  5469  0831  1C03               	skipc
  5470  0832  281B               	goto	l4359
  5471  0833                     l4365:	
  5472                           
  5473                           ;main.c: 359: }
  5474                           ;main.c: 360: float aux = (float)(pwm)/1023;
  5475  0833  30C0               	movlw	192
  5476  0834  1283               	bcf	3,5	;RP0=0, select bank0
  5477  0835  1303               	bcf	3,6	;RP1=0, select bank0
  5478  0836  00C3               	movwf	___ftdiv@f2
  5479  0837  307F               	movlw	127
  5480  0838  00C4               	movwf	___ftdiv@f2+1
  5481  0839  3044               	movlw	68
  5482  083A  00C5               	movwf	___ftdiv@f2+2
  5483  083B  1683               	bsf	3,5	;RP0=1, select bank1
  5484  083C  1303               	bcf	3,6	;RP1=0, select bank1
  5485  083D  084F               	movf	(_pwm+1)^(0+128),w
  5486  083E  1283               	bcf	3,5	;RP0=0, select bank0
  5487  083F  1303               	bcf	3,6	;RP1=0, select bank0
  5488  0840  00BE               	movwf	___awtoft@c+1
  5489  0841  1683               	bsf	3,5	;RP0=1, select bank1
  5490  0842  1303               	bcf	3,6	;RP1=0, select bank1
  5491  0843  084E               	movf	_pwm^(0+128),w
  5492  0844  1283               	bcf	3,5	;RP0=0, select bank0
  5493  0845  1303               	bcf	3,6	;RP1=0, select bank0
  5494  0846  00BD               	movwf	___awtoft@c
  5495  0847  160A  118A  2000  120A  158A  	fcall	___awtoft
  5496  084C  1283               	bcf	3,5	;RP0=0, select bank0
  5497  084D  1303               	bcf	3,6	;RP1=0, select bank0
  5498  084E  083D               	movf	?___awtoft,w
  5499  084F  00C6               	movwf	___ftdiv@f1
  5500  0850  083E               	movf	?___awtoft+1,w
  5501  0851  00C7               	movwf	___ftdiv@f1+1
  5502  0852  083F               	movf	?___awtoft+2,w
  5503  0853  00C8               	movwf	___ftdiv@f1+2
  5504  0854  160A  118A  25E6  120A  158A  	fcall	___ftdiv
  5505  0859  1283               	bcf	3,5	;RP0=0, select bank0
  5506  085A  1303               	bcf	3,6	;RP1=0, select bank0
  5507  085B  0843               	movf	?___ftdiv,w
  5508  085C  1683               	bsf	3,5	;RP0=1, select bank3
  5509  085D  1703               	bsf	3,6	;RP1=1, select bank3
  5510  085E  00A9               	movwf	status@aux^(0+384)
  5511  085F  1283               	bcf	3,5	;RP0=0, select bank0
  5512  0860  1303               	bcf	3,6	;RP1=0, select bank0
  5513  0861  0844               	movf	?___ftdiv+1,w
  5514  0862  1683               	bsf	3,5	;RP0=1, select bank3
  5515  0863  1703               	bsf	3,6	;RP1=1, select bank3
  5516  0864  00AA               	movwf	(status@aux+1)^(0+384)
  5517  0865  1283               	bcf	3,5	;RP0=0, select bank0
  5518  0866  1303               	bcf	3,6	;RP1=0, select bank0
  5519  0867  0845               	movf	?___ftdiv+2,w
  5520  0868  1683               	bsf	3,5	;RP0=1, select bank3
  5521  0869  1703               	bsf	3,6	;RP1=1, select bank3
  5522  086A  00AB               	movwf	(status@aux+2)^(0+384)
  5523                           
  5524                           ;main.c: 361: int duty = (int) (aux*100);
  5525  086B  0829               	movf	status@aux^(0+384),w
  5526  086C  1283               	bcf	3,5	;RP0=0, select bank0
  5527  086D  1303               	bcf	3,6	;RP1=0, select bank0
  5528  086E  00C6               	movwf	___ftmul@f2
  5529  086F  1683               	bsf	3,5	;RP0=1, select bank3
  5530  0870  1703               	bsf	3,6	;RP1=1, select bank3
  5531  0871  082A               	movf	(status@aux+1)^(0+384),w
  5532  0872  1283               	bcf	3,5	;RP0=0, select bank0
  5533  0873  1303               	bcf	3,6	;RP1=0, select bank0
  5534  0874  00C7               	movwf	___ftmul@f2+1
  5535  0875  1683               	bsf	3,5	;RP0=1, select bank3
  5536  0876  1703               	bsf	3,6	;RP1=1, select bank3
  5537  0877  082B               	movf	(status@aux+2)^(0+384),w
  5538  0878  1283               	bcf	3,5	;RP0=0, select bank0
  5539  0879  1303               	bcf	3,6	;RP1=0, select bank0
  5540  087A  00C8               	movwf	___ftmul@f2+2
  5541  087B  3000               	movlw	0
  5542  087C  00C3               	movwf	___ftmul@f1
  5543  087D  30C8               	movlw	200
  5544  087E  00C4               	movwf	___ftmul@f1+1
  5545  087F  3042               	movlw	66
  5546  0880  00C5               	movwf	___ftmul@f1+2
  5547  0881  120A  118A  265A  120A  158A  	fcall	___ftmul
  5548  0886  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0887  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0888  0843               	movf	?___ftmul,w
  5551  0889  1683               	bsf	3,5	;RP0=1, select bank1
  5552  088A  1303               	bcf	3,6	;RP1=0, select bank1
  5553  088B  00AA               	movwf	___fttol@f1^(0+128)
  5554  088C  1283               	bcf	3,5	;RP0=0, select bank0
  5555  088D  1303               	bcf	3,6	;RP1=0, select bank0
  5556  088E  0844               	movf	?___ftmul+1,w
  5557  088F  1683               	bsf	3,5	;RP0=1, select bank1
  5558  0890  1303               	bcf	3,6	;RP1=0, select bank1
  5559  0891  00AB               	movwf	(___fttol@f1+1)^(0+128)
  5560  0892  1283               	bcf	3,5	;RP0=0, select bank0
  5561  0893  1303               	bcf	3,6	;RP1=0, select bank0
  5562  0894  0845               	movf	?___ftmul+2,w
  5563  0895  1683               	bsf	3,5	;RP0=1, select bank1
  5564  0896  1303               	bcf	3,6	;RP1=0, select bank1
  5565  0897  00AC               	movwf	(___fttol@f1+2)^(0+128)
  5566  0898  160A  118A  23DD  120A  158A  	fcall	___fttol
  5567  089D  1683               	bsf	3,5	;RP0=1, select bank1
  5568  089E  1303               	bcf	3,6	;RP1=0, select bank1
  5569  089F  082B               	movf	(?___fttol+1)^(0+128),w
  5570  08A0  1683               	bsf	3,5	;RP0=1, select bank3
  5571  08A1  1703               	bsf	3,6	;RP1=1, select bank3
  5572  08A2  00AD               	movwf	(status@duty+1)^(0+384)
  5573  08A3  1683               	bsf	3,5	;RP0=1, select bank1
  5574  08A4  1303               	bcf	3,6	;RP1=0, select bank1
  5575  08A5  082A               	movf	?___fttol^(0+128),w
  5576  08A6  1683               	bsf	3,5	;RP0=1, select bank3
  5577  08A7  1703               	bsf	3,6	;RP1=1, select bank3
  5578  08A8  00AC               	movwf	status@duty^(0+384)
  5579                           
  5580                           ;main.c: 362: strcpy(output, "The duty-cycle of PWM is: ");
  5581  08A9  3082               	movlw	low (STR_58| (0+32768))
  5582  08AA  1283               	bcf	3,5	;RP0=0, select bank0
  5583  08AB  1303               	bcf	3,6	;RP1=0, select bank0
  5584  08AC  00B5               	movwf	strcpy@from
  5585  08AD  3084               	movlw	high (STR_58| (0+32768))
  5586  08AE  00B6               	movwf	strcpy@from+1
  5587  08AF  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5588  08B0  160A  158A  24DB  120A  158A  	fcall	_strcpy
  5589                           
  5590                           ;main.c: 363: sprintf(strBuffer,"%d",duty);
  5591  08B5  3051               	movlw	low (STR_52| (0+32768))
  5592  08B6  1683               	bsf	3,5	;RP0=1, select bank1
  5593  08B7  1303               	bcf	3,6	;RP1=0, select bank1
  5594  08B8  00A5               	movwf	sprintf@f^(0+128)
  5595  08B9  3086               	movlw	high (STR_52| (0+32768))
  5596  08BA  00A6               	movwf	(sprintf@f^(0+128)+1)
  5597  08BB  1683               	bsf	3,5	;RP0=1, select bank3
  5598  08BC  1703               	bsf	3,6	;RP1=1, select bank3
  5599  08BD  082D               	movf	(status@duty+1)^(0+384),w
  5600  08BE  1683               	bsf	3,5	;RP0=1, select bank1
  5601  08BF  1303               	bcf	3,6	;RP1=0, select bank1
  5602  08C0  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5603  08C1  1683               	bsf	3,5	;RP0=1, select bank3
  5604  08C2  1703               	bsf	3,6	;RP1=1, select bank3
  5605  08C3  082C               	movf	status@duty^(0+384),w
  5606  08C4  1683               	bsf	3,5	;RP0=1, select bank1
  5607  08C5  1303               	bcf	3,6	;RP1=0, select bank1
  5608  08C6  00A7               	movwf	(?_sprintf^(0+128)+2)
  5609  08C7  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5610  08C8  160A  118A  26EE  120A  158A  	fcall	_sprintf
  5611                           
  5612                           ;main.c: 364: strcat(output, strBuffer);
  5613  08CD  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5614  08CE  1283               	bcf	3,5	;RP0=0, select bank0
  5615  08CF  1303               	bcf	3,6	;RP1=0, select bank0
  5616  08D0  00B5               	movwf	strcat@from
  5617  08D1  3001               	movlw	1
  5618  08D2  00B6               	movwf	strcat@from+1
  5619  08D3  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5620  08D4  160A  158A  2618  120A  158A  	fcall	_strcat
  5621                           
  5622                           ;main.c: 365: strcat(output, "%");
  5623  08D9  3054               	movlw	low (STR_60| (0+32768))
  5624  08DA  1283               	bcf	3,5	;RP0=0, select bank0
  5625  08DB  1303               	bcf	3,6	;RP1=0, select bank0
  5626  08DC  00B5               	movwf	strcat@from
  5627  08DD  3086               	movlw	high (STR_60| (0+32768))
  5628  08DE  00B6               	movwf	strcat@from+1
  5629  08DF  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5630  08E0  160A  158A  2618  120A  158A  	fcall	_strcat
  5631                           
  5632                           ;main.c: 366: USARTWriteLine(output);
  5633  08E5  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5634  08E6  1283               	bcf	3,5	;RP0=0, select bank0
  5635  08E7  1303               	bcf	3,6	;RP1=0, select bank0
  5636  08E8  00B8               	movwf	USARTWriteLine@str
  5637  08E9  3001               	movlw	1
  5638  08EA  00B9               	movwf	USARTWriteLine@str+1
  5639  08EB  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  5640                           
  5641                           ;main.c: 367: USARTGotoNewLine();
  5642  08F0  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  5643                           
  5644                           ;main.c: 368: adReadA0();
  5645  08F5  160A  158A  2785   	fcall	_adReadA0
  5646  08F8  0008               	return
  5647  08F9                     __end_of_status:	
  5648                           
  5649                           	psect	text15
  5650  1CDB                     __ptext15:	
  5651 ;; *************** function _strcpy *****************
  5652 ;; Defined at:
  5653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  to              1    wreg     PTR unsigned char 
  5656 ;;		 -> status@output(25), 
  5657 ;;  from            2   21[BANK0 ] PTR const unsigned char 
  5658 ;;		 -> STR_58(27), 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  to              1   24[BANK0 ] PTR unsigned char 
  5661 ;;		 -> status@output(25), 
  5662 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  5663 ;;		 -> status@output(25), 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      PTR unsigned char 
  5666 ;; Registers used:
  5667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5673 ;;      Params:         0       2       0       0       0
  5674 ;;      Locals:         0       2       0       0       0
  5675 ;;      Temps:          0       1       0       0       0
  5676 ;;      Totals:         0       5       0       0       0
  5677 ;;Total ram usage:        5 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    4
  5680 ;; This function calls:
  5681 ;;		Nothing
  5682 ;; This function is called by:
  5683 ;;		_status
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function _strcpy
  5689  1CDB                     _strcpy:	
  5690                           
  5691                           ;incstack = 0
  5692 ;; using string table level
  5693                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5694                           ;strcpy@to stored from wreg
  5695  1CDB  1283               	bcf	3,5	;RP0=0, select bank0
  5696  1CDC  1303               	bcf	3,6	;RP1=0, select bank0
  5697  1CDD  00B8               	movwf	strcpy@to
  5698  1CDE  0838               	movf	strcpy@to,w
  5699  1CDF  00B7               	movwf	??_strcpy
  5700  1CE0  0837               	movf	??_strcpy,w
  5701  1CE1  00B9               	movwf	strcpy@cp
  5702  1CE2                     l3987:	
  5703  1CE2  0836               	movf	strcpy@from+1,w
  5704  1CE3  00FF               	movwf	127
  5705  1CE4  0835               	movf	strcpy@from,w
  5706  1CE5  0084               	movwf	4
  5707  1CE6  120A  118A  2100  160A  158A  	fcall	stringtab
  5708  1CEB  00B7               	movwf	??_strcpy
  5709  1CEC  0839               	movf	strcpy@cp,w
  5710  1CED  0084               	movwf	4
  5711  1CEE  0837               	movf	??_strcpy,w
  5712  1CEF  1783               	bsf	3,7	;select IRP bank2
  5713  1CF0  0080               	movwf	0
  5714  1CF1  0800               	movf	0,w
  5715  1CF2  1903               	btfsc	3,2
  5716  1CF3  0008               	return
  5717  1CF4  3001               	movlw	1
  5718  1CF5  00B7               	movwf	??_strcpy
  5719  1CF6  0837               	movf	??_strcpy,w
  5720  1CF7  07B9               	addwf	strcpy@cp,f
  5721  1CF8  3001               	movlw	1
  5722  1CF9  07B5               	addwf	strcpy@from,f
  5723  1CFA  1803               	skipnc
  5724  1CFB  0AB6               	incf	strcpy@from+1,f
  5725  1CFC  2CE2               	goto	l3987
  5726  1CFD                     __end_of_strcpy:	
  5727                           ;	Return value of _strcpy is never used
  5728                           
  5729                           
  5730                           	psect	text16
  5731  1E18                     __ptext16:	
  5732 ;; *************** function _strcat *****************
  5733 ;; Defined at:
  5734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  to              1    wreg     PTR unsigned char 
  5737 ;;		 -> status@output(25), 
  5738 ;;  from            2   21[BANK0 ] PTR const unsigned char 
  5739 ;;		 -> STR_60(2), strBuffer(25), 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  to              1   24[BANK0 ] PTR unsigned char 
  5742 ;;		 -> status@output(25), 
  5743 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  5744 ;;		 -> status@output(25), 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      PTR unsigned char 
  5747 ;; Registers used:
  5748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5754 ;;      Params:         0       2       0       0       0
  5755 ;;      Locals:         0       2       0       0       0
  5756 ;;      Temps:          0       1       0       0       0
  5757 ;;      Totals:         0       5       0       0       0
  5758 ;;Total ram usage:        5 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    4
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_status
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _strcat
  5770  1E18                     _strcat:	
  5771                           
  5772                           ;incstack = 0
  5773 ;; using string table level
  5774                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5775                           ;strcat@to stored from wreg
  5776  1E18  1283               	bcf	3,5	;RP0=0, select bank0
  5777  1E19  1303               	bcf	3,6	;RP1=0, select bank0
  5778  1E1A  00B8               	movwf	strcat@to
  5779  1E1B  0838               	movf	strcat@to,w
  5780  1E1C  00B7               	movwf	??_strcat
  5781  1E1D  0837               	movf	??_strcat,w
  5782  1E1E  00B9               	movwf	strcat@cp
  5783  1E1F                     l3993:	
  5784  1E1F  0839               	movf	strcat@cp,w
  5785  1E20  0084               	movwf	4
  5786  1E21  1783               	bsf	3,7	;select IRP bank2
  5787  1E22  0800               	movf	0,w
  5788  1E23  1903               	btfsc	3,2
  5789  1E24  2E32               	goto	l3999
  5790  1E25  3001               	movlw	1
  5791  1E26  00B7               	movwf	??_strcat
  5792  1E27  0837               	movf	??_strcat,w
  5793  1E28  07B9               	addwf	strcat@cp,f
  5794  1E29  2E1F               	goto	l3993
  5795  1E2A                     l3995:	
  5796  1E2A  3001               	movlw	1
  5797  1E2B  00B7               	movwf	??_strcat
  5798  1E2C  0837               	movf	??_strcat,w
  5799  1E2D  07B9               	addwf	strcat@cp,f
  5800  1E2E  3001               	movlw	1
  5801  1E2F  07B5               	addwf	strcat@from,f
  5802  1E30  1803               	skipnc
  5803  1E31  0AB6               	incf	strcat@from+1,f
  5804  1E32                     l3999:	
  5805  1E32  0836               	movf	strcat@from+1,w
  5806  1E33  00FF               	movwf	127
  5807  1E34  0835               	movf	strcat@from,w
  5808  1E35  0084               	movwf	4
  5809  1E36  120A  118A  2100  160A  158A  	fcall	stringtab
  5810  1E3B  00B7               	movwf	??_strcat
  5811  1E3C  0839               	movf	strcat@cp,w
  5812  1E3D  0084               	movwf	4
  5813  1E3E  0837               	movf	??_strcat,w
  5814  1E3F  1783               	bsf	3,7	;select IRP bank2
  5815  1E40  0080               	movwf	0
  5816  1E41  0800               	movf	0,w
  5817  1E42  1903               	btfsc	3,2
  5818  1E43  0008               	return
  5819  1E44  2E2A               	goto	l3995
  5820  1E45                     __end_of_strcat:	
  5821                           ;	Return value of _strcat is never used
  5822                           
  5823                           
  5824                           	psect	text17
  5825  1F85                     __ptext17:	
  5826 ;; *************** function _adReadA0 *****************
  5827 ;; Defined at:
  5828 ;;		line 398 in file "main.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  valueAD         2   21[BANK1 ] unsigned int 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5842 ;;      Params:         0       0       0       0       0
  5843 ;;      Locals:         0       0       2       0       0
  5844 ;;      Temps:          0       0       0       0       0
  5845 ;;      Totals:         0       0       2       0       0
  5846 ;;Total ram usage:        2 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    6
  5849 ;; This function calls:
  5850 ;;		_USARTWriteString
  5851 ;;		_sampling
  5852 ;;		_sprintf
  5853 ;; This function is called by:
  5854 ;;		_status
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function _adReadA0
  5860  1F85                     _adReadA0:	
  5861                           
  5862                           ;main.c: 399: unsigned int valueAD = sampling();
  5863                           
  5864                           ;incstack = 0
  5865 ;; hardware stack exceeded
  5866                           ; Regs used in _adReadA0: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5867  1F85  160A  158A  24B0  160A  158A  	fcall	_sampling
  5868  1F8A  1283               	bcf	3,5	;RP0=0, select bank0
  5869  1F8B  1303               	bcf	3,6	;RP1=0, select bank0
  5870  1F8C  0836               	movf	?_sampling+1,w
  5871  1F8D  1683               	bsf	3,5	;RP0=1, select bank1
  5872  1F8E  1303               	bcf	3,6	;RP1=0, select bank1
  5873  1F8F  00B6               	movwf	(adReadA0@valueAD+1)^(0+128)
  5874  1F90  1283               	bcf	3,5	;RP0=0, select bank0
  5875  1F91  1303               	bcf	3,6	;RP1=0, select bank0
  5876  1F92  0835               	movf	?_sampling,w
  5877  1F93  1683               	bsf	3,5	;RP0=1, select bank1
  5878  1F94  1303               	bcf	3,6	;RP1=0, select bank1
  5879  1F95  00B5               	movwf	adReadA0@valueAD^(0+128)
  5880                           
  5881                           ;main.c: 400: if(valueAD<=1023 && valueAD >= 0){
  5882  1F96  3004               	movlw	4
  5883  1F97  0236               	subwf	(adReadA0@valueAD+1)^(0+128),w
  5884  1F98  3000               	movlw	0
  5885  1F99  1903               	skipnz
  5886  1F9A  0235               	subwf	adReadA0@valueAD^(0+128),w
  5887  1F9B  1803               	skipnc
  5888  1F9C  0008               	return
  5889                           
  5890                           ;main.c: 401: USARTWriteString("The analog value is: ");
  5891  1F9D  309D               	movlw	low (STR_61| (0+32768))
  5892  1F9E  1283               	bcf	3,5	;RP0=0, select bank0
  5893  1F9F  1303               	bcf	3,6	;RP1=0, select bank0
  5894  1FA0  00B6               	movwf	USARTWriteString@str
  5895  1FA1  3084               	movlw	high (STR_61| (0+32768))
  5896  1FA2  00B7               	movwf	USARTWriteString@str+1
  5897  1FA3  160A  158A  25F3  160A  158A  	fcall	_USARTWriteString
  5898                           
  5899                           ;main.c: 402: sprintf(strBuffer,"%d",valueAD);
  5900  1FA8  3051               	movlw	low (STR_52| (0+32768))
  5901  1FA9  1683               	bsf	3,5	;RP0=1, select bank1
  5902  1FAA  1303               	bcf	3,6	;RP1=0, select bank1
  5903  1FAB  00A5               	movwf	sprintf@f^(0+128)
  5904  1FAC  3086               	movlw	high (STR_52| (0+32768))
  5905  1FAD  00A6               	movwf	(sprintf@f^(0+128)+1)
  5906  1FAE  0836               	movf	(adReadA0@valueAD+1)^(0+128),w
  5907  1FAF  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5908  1FB0  0835               	movf	adReadA0@valueAD^(0+128),w
  5909  1FB1  00A7               	movwf	(?_sprintf^(0+128)+2)
  5910  1FB2  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5911  1FB3  160A  118A  26EE  160A  158A  	fcall	_sprintf
  5912                           
  5913                           ;main.c: 403: USARTWriteString(strBuffer);
  5914  1FB8  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5915  1FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5916  1FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5917  1FBB  00B6               	movwf	USARTWriteString@str
  5918  1FBC  3001               	movlw	1
  5919  1FBD  00B7               	movwf	USARTWriteString@str+1
  5920  1FBE  160A  158A  25F3   	fcall	_USARTWriteString
  5921  1FC1  0008               	return
  5922  1FC2                     __end_of_adReadA0:	
  5923                           
  5924                           	psect	text18
  5925  15E6                     __ptext18:	
  5926 ;; *************** function ___ftdiv *****************
  5927 ;; Defined at:
  5928 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  f2              3   35[BANK0 ] float 
  5931 ;;  f1              3   38[BANK0 ] float 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  f3              3    5[BANK1 ] float 
  5934 ;;  sign            1    9[BANK1 ] unsigned char 
  5935 ;;  exp             1    8[BANK1 ] unsigned char 
  5936 ;;  cntr            1    4[BANK1 ] unsigned char 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;                  3   35[BANK0 ] float 
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0, pclath, cstack
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5946 ;;      Params:         0       6       0       0       0
  5947 ;;      Locals:         0       0       6       0       0
  5948 ;;      Temps:          0       0       4       0       0
  5949 ;;      Totals:         0       6      10       0       0
  5950 ;;Total ram usage:       16 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    5
  5953 ;; This function calls:
  5954 ;;		___ftpack
  5955 ;; This function is called by:
  5956 ;;		_status
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function ___ftdiv
  5962  15E6                     ___ftdiv:	
  5963                           
  5964                           ;incstack = 0
  5965 ;; hardware stack exceeded
  5966                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5967  15E6  1283               	bcf	3,5	;RP0=0, select bank0
  5968  15E7  1303               	bcf	3,6	;RP1=0, select bank0
  5969  15E8  0846               	movf	___ftdiv@f1,w
  5970  15E9  1683               	bsf	3,5	;RP0=1, select bank1
  5971  15EA  1303               	bcf	3,6	;RP1=0, select bank1
  5972  15EB  00A0               	movwf	??___ftdiv^(0+128)
  5973  15EC  1283               	bcf	3,5	;RP0=0, select bank0
  5974  15ED  1303               	bcf	3,6	;RP1=0, select bank0
  5975  15EE  0847               	movf	___ftdiv@f1+1,w
  5976  15EF  1683               	bsf	3,5	;RP0=1, select bank1
  5977  15F0  1303               	bcf	3,6	;RP1=0, select bank1
  5978  15F1  00A1               	movwf	(??___ftdiv^(0+128)+1)
  5979  15F2  1283               	bcf	3,5	;RP0=0, select bank0
  5980  15F3  1303               	bcf	3,6	;RP1=0, select bank0
  5981  15F4  0848               	movf	___ftdiv@f1+2,w
  5982  15F5  1683               	bsf	3,5	;RP0=1, select bank1
  5983  15F6  1303               	bcf	3,6	;RP1=0, select bank1
  5984  15F7  00A2               	movwf	(??___ftdiv^(0+128)+2)
  5985  15F8  1003               	clrc
  5986  15F9  0D21               	rlf	(??___ftdiv^(0+128)+1),w
  5987  15FA  0D22               	rlf	(??___ftdiv^(0+128)+2),w
  5988  15FB  00A3               	movwf	(??___ftdiv+3)^(0+128)
  5989  15FC  0823               	movf	(??___ftdiv+3)^(0+128),w
  5990  15FD  00A8               	movwf	___ftdiv@exp^(0+128)
  5991  15FE  0828               	movf	___ftdiv@exp^(0+128),w
  5992  15FF  1D03               	btfss	3,2
  5993  1600  2E0A               	goto	l4087
  5994  1601  3000               	movlw	0
  5995  1602  1283               	bcf	3,5	;RP0=0, select bank0
  5996  1603  1303               	bcf	3,6	;RP1=0, select bank0
  5997  1604  00C3               	movwf	?___ftdiv
  5998  1605  3000               	movlw	0
  5999  1606  00C4               	movwf	?___ftdiv+1
  6000  1607  3000               	movlw	0
  6001  1608  00C5               	movwf	?___ftdiv+2
  6002  1609  0008               	return
  6003  160A                     l4087:	
  6004  160A  1283               	bcf	3,5	;RP0=0, select bank0
  6005  160B  0843               	movf	___ftdiv@f2,w
  6006  160C  1683               	bsf	3,5	;RP0=1, select bank1
  6007  160D  1303               	bcf	3,6	;RP1=0, select bank1
  6008  160E  00A0               	movwf	??___ftdiv^(0+128)
  6009  160F  1283               	bcf	3,5	;RP0=0, select bank0
  6010  1610  1303               	bcf	3,6	;RP1=0, select bank0
  6011  1611  0844               	movf	___ftdiv@f2+1,w
  6012  1612  1683               	bsf	3,5	;RP0=1, select bank1
  6013  1613  1303               	bcf	3,6	;RP1=0, select bank1
  6014  1614  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6015  1615  1283               	bcf	3,5	;RP0=0, select bank0
  6016  1616  1303               	bcf	3,6	;RP1=0, select bank0
  6017  1617  0845               	movf	___ftdiv@f2+2,w
  6018  1618  1683               	bsf	3,5	;RP0=1, select bank1
  6019  1619  1303               	bcf	3,6	;RP1=0, select bank1
  6020  161A  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6021  161B  1003               	clrc
  6022  161C  0D21               	rlf	(??___ftdiv^(0+128)+1),w
  6023  161D  0D22               	rlf	(??___ftdiv^(0+128)+2),w
  6024  161E  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6025  161F  0823               	movf	(??___ftdiv+3)^(0+128),w
  6026  1620  00A9               	movwf	___ftdiv@sign^(0+128)
  6027  1621  0829               	movf	___ftdiv@sign^(0+128),w
  6028  1622  1D03               	btfss	3,2
  6029  1623  2E2D               	goto	l4093
  6030  1624  3000               	movlw	0
  6031  1625  1283               	bcf	3,5	;RP0=0, select bank0
  6032  1626  1303               	bcf	3,6	;RP1=0, select bank0
  6033  1627  00C3               	movwf	?___ftdiv
  6034  1628  3000               	movlw	0
  6035  1629  00C4               	movwf	?___ftdiv+1
  6036  162A  3000               	movlw	0
  6037  162B  00C5               	movwf	?___ftdiv+2
  6038  162C  0008               	return
  6039  162D                     l4093:	
  6040  162D  3000               	movlw	0
  6041  162E  1683               	bsf	3,5	;RP0=1, select bank1
  6042  162F  1303               	bcf	3,6	;RP1=0, select bank1
  6043  1630  00A5               	movwf	___ftdiv@f3^(0+128)
  6044  1631  3000               	movlw	0
  6045  1632  00A6               	movwf	(___ftdiv@f3+1)^(0+128)
  6046  1633  3000               	movlw	0
  6047  1634  00A7               	movwf	(___ftdiv@f3+2)^(0+128)
  6048  1635  3089               	movlw	137
  6049  1636  0729               	addwf	___ftdiv@sign^(0+128),w
  6050  1637  00A0               	movwf	??___ftdiv^(0+128)
  6051  1638  0820               	movf	??___ftdiv^(0+128),w
  6052  1639  02A8               	subwf	___ftdiv@exp^(0+128),f
  6053  163A  1283               	bcf	3,5	;RP0=0, select bank0
  6054  163B  1303               	bcf	3,6	;RP1=0, select bank0
  6055  163C  0846               	movf	___ftdiv@f1,w
  6056  163D  1683               	bsf	3,5	;RP0=1, select bank1
  6057  163E  1303               	bcf	3,6	;RP1=0, select bank1
  6058  163F  00A0               	movwf	??___ftdiv^(0+128)
  6059  1640  1283               	bcf	3,5	;RP0=0, select bank0
  6060  1641  1303               	bcf	3,6	;RP1=0, select bank0
  6061  1642  0847               	movf	___ftdiv@f1+1,w
  6062  1643  1683               	bsf	3,5	;RP0=1, select bank1
  6063  1644  1303               	bcf	3,6	;RP1=0, select bank1
  6064  1645  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6065  1646  1283               	bcf	3,5	;RP0=0, select bank0
  6066  1647  1303               	bcf	3,6	;RP1=0, select bank0
  6067  1648  0848               	movf	___ftdiv@f1+2,w
  6068  1649  1683               	bsf	3,5	;RP0=1, select bank1
  6069  164A  1303               	bcf	3,6	;RP1=0, select bank1
  6070  164B  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6071  164C  3010               	movlw	16
  6072  164D                     u5095:	
  6073  164D  1003               	clrc
  6074  164E  0CA2               	rrf	(??___ftdiv^(0+128)+2),f
  6075  164F  0CA1               	rrf	(??___ftdiv^(0+128)+1),f
  6076  1650  0CA0               	rrf	??___ftdiv^(0+128),f
  6077  1651  3EFF               	addlw	-1
  6078  1652  1D03               	skipz
  6079  1653  2E4D               	goto	u5095
  6080  1654  0820               	movf	??___ftdiv^(0+128),w
  6081  1655  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6082  1656  0823               	movf	(??___ftdiv+3)^(0+128),w
  6083  1657  00A9               	movwf	___ftdiv@sign^(0+128)
  6084  1658  1283               	bcf	3,5	;RP0=0, select bank0
  6085  1659  1303               	bcf	3,6	;RP1=0, select bank0
  6086  165A  0843               	movf	___ftdiv@f2,w
  6087  165B  1683               	bsf	3,5	;RP0=1, select bank1
  6088  165C  1303               	bcf	3,6	;RP1=0, select bank1
  6089  165D  00A0               	movwf	??___ftdiv^(0+128)
  6090  165E  1283               	bcf	3,5	;RP0=0, select bank0
  6091  165F  1303               	bcf	3,6	;RP1=0, select bank0
  6092  1660  0844               	movf	___ftdiv@f2+1,w
  6093  1661  1683               	bsf	3,5	;RP0=1, select bank1
  6094  1662  1303               	bcf	3,6	;RP1=0, select bank1
  6095  1663  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6096  1664  1283               	bcf	3,5	;RP0=0, select bank0
  6097  1665  1303               	bcf	3,6	;RP1=0, select bank0
  6098  1666  0845               	movf	___ftdiv@f2+2,w
  6099  1667  1683               	bsf	3,5	;RP0=1, select bank1
  6100  1668  1303               	bcf	3,6	;RP1=0, select bank1
  6101  1669  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6102  166A  3010               	movlw	16
  6103  166B                     u5105:	
  6104  166B  1003               	clrc
  6105  166C  0CA2               	rrf	(??___ftdiv^(0+128)+2),f
  6106  166D  0CA1               	rrf	(??___ftdiv^(0+128)+1),f
  6107  166E  0CA0               	rrf	??___ftdiv^(0+128),f
  6108  166F  3EFF               	addlw	-1
  6109  1670  1D03               	skipz
  6110  1671  2E6B               	goto	u5105
  6111  1672  0820               	movf	??___ftdiv^(0+128),w
  6112  1673  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6113  1674  0823               	movf	(??___ftdiv+3)^(0+128),w
  6114  1675  06A9               	xorwf	___ftdiv@sign^(0+128),f
  6115  1676  3080               	movlw	128
  6116  1677  00A0               	movwf	??___ftdiv^(0+128)
  6117  1678  0820               	movf	??___ftdiv^(0+128),w
  6118  1679  05A9               	andwf	___ftdiv@sign^(0+128),f
  6119  167A  1283               	bcf	3,5	;RP0=0, select bank0
  6120  167B  1303               	bcf	3,6	;RP1=0, select bank0
  6121  167C  17C7               	bsf	___ftdiv@f1+1,7
  6122  167D  30FF               	movlw	255
  6123  167E  05C6               	andwf	___ftdiv@f1,f
  6124  167F  30FF               	movlw	255
  6125  1680  05C7               	andwf	___ftdiv@f1+1,f
  6126  1681  3000               	movlw	0
  6127  1682  05C8               	andwf	___ftdiv@f1+2,f
  6128  1683  17C4               	bsf	___ftdiv@f2+1,7
  6129  1684  30FF               	movlw	255
  6130  1685  05C3               	andwf	___ftdiv@f2,f
  6131  1686  30FF               	movlw	255
  6132  1687  05C4               	andwf	___ftdiv@f2+1,f
  6133  1688  3000               	movlw	0
  6134  1689  05C5               	andwf	___ftdiv@f2+2,f
  6135  168A  3018               	movlw	24
  6136  168B  1683               	bsf	3,5	;RP0=1, select bank1
  6137  168C  1303               	bcf	3,6	;RP1=0, select bank1
  6138  168D  00A0               	movwf	??___ftdiv^(0+128)
  6139  168E  0820               	movf	??___ftdiv^(0+128),w
  6140  168F  00A4               	movwf	___ftdiv@cntr^(0+128)
  6141  1690                     l4107:	
  6142  1690  3001               	movlw	1
  6143  1691                     u5115:	
  6144  1691  1003               	clrc
  6145  1692  0DA5               	rlf	___ftdiv@f3^(0+128),f
  6146  1693  0DA6               	rlf	(___ftdiv@f3+1)^(0+128),f
  6147  1694  0DA7               	rlf	(___ftdiv@f3+2)^(0+128),f
  6148  1695  3EFF               	addlw	-1
  6149  1696  1D03               	skipz
  6150  1697  2E91               	goto	u5115
  6151  1698  1283               	bcf	3,5	;RP0=0, select bank0
  6152  1699  1303               	bcf	3,6	;RP1=0, select bank0
  6153  169A  0845               	movf	___ftdiv@f2+2,w
  6154  169B  0248               	subwf	___ftdiv@f1+2,w
  6155  169C  1D03               	skipz
  6156  169D  2EA4               	goto	u5125
  6157  169E  0844               	movf	___ftdiv@f2+1,w
  6158  169F  0247               	subwf	___ftdiv@f1+1,w
  6159  16A0  1D03               	skipz
  6160  16A1  2EA4               	goto	u5125
  6161  16A2  0843               	movf	___ftdiv@f2,w
  6162  16A3  0246               	subwf	___ftdiv@f1,w
  6163  16A4                     u5125:	
  6164  16A4  1C03               	skipc
  6165  16A5  2EB3               	goto	l4115
  6166  16A6  0843               	movf	___ftdiv@f2,w
  6167  16A7  02C6               	subwf	___ftdiv@f1,f
  6168  16A8  0844               	movf	___ftdiv@f2+1,w
  6169  16A9  1C03               	skipc
  6170  16AA  0F44               	incfsz	___ftdiv@f2+1,w
  6171  16AB  02C7               	subwf	___ftdiv@f1+1,f
  6172  16AC  0845               	movf	___ftdiv@f2+2,w
  6173  16AD  1C03               	skipc
  6174  16AE  0A45               	incf	___ftdiv@f2+2,w
  6175  16AF  02C8               	subwf	___ftdiv@f1+2,f
  6176  16B0  1683               	bsf	3,5	;RP0=1, select bank1
  6177  16B1  1303               	bcf	3,6	;RP1=0, select bank1
  6178  16B2  1425               	bsf	___ftdiv@f3^(0+128),0
  6179  16B3                     l4115:	
  6180  16B3  3001               	movlw	1
  6181  16B4                     u5135:	
  6182  16B4  1003               	clrc
  6183  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  6184  16B6  0DC6               	rlf	___ftdiv@f1,f
  6185  16B7  0DC7               	rlf	___ftdiv@f1+1,f
  6186  16B8  0DC8               	rlf	___ftdiv@f1+2,f
  6187  16B9  3EFF               	addlw	-1
  6188  16BA  1D03               	skipz
  6189  16BB  2EB4               	goto	u5135
  6190  16BC  3001               	movlw	1
  6191  16BD  1683               	bsf	3,5	;RP0=1, select bank1
  6192  16BE  1303               	bcf	3,6	;RP1=0, select bank1
  6193  16BF  02A4               	subwf	___ftdiv@cntr^(0+128),f
  6194  16C0  1D03               	btfss	3,2
  6195  16C1  2E90               	goto	l4107
  6196  16C2  0825               	movf	___ftdiv@f3^(0+128),w
  6197  16C3  1283               	bcf	3,5	;RP0=0, select bank0
  6198  16C4  1303               	bcf	3,6	;RP1=0, select bank0
  6199  16C5  00B5               	movwf	___ftpack@arg
  6200  16C6  1683               	bsf	3,5	;RP0=1, select bank1
  6201  16C7  1303               	bcf	3,6	;RP1=0, select bank1
  6202  16C8  0826               	movf	(___ftdiv@f3+1)^(0+128),w
  6203  16C9  1283               	bcf	3,5	;RP0=0, select bank0
  6204  16CA  1303               	bcf	3,6	;RP1=0, select bank0
  6205  16CB  00B6               	movwf	___ftpack@arg+1
  6206  16CC  1683               	bsf	3,5	;RP0=1, select bank1
  6207  16CD  1303               	bcf	3,6	;RP1=0, select bank1
  6208  16CE  0827               	movf	(___ftdiv@f3+2)^(0+128),w
  6209  16CF  1283               	bcf	3,5	;RP0=0, select bank0
  6210  16D0  1303               	bcf	3,6	;RP1=0, select bank0
  6211  16D1  00B7               	movwf	___ftpack@arg+2
  6212  16D2  1683               	bsf	3,5	;RP0=1, select bank1
  6213  16D3  1303               	bcf	3,6	;RP1=0, select bank1
  6214  16D4  0828               	movf	___ftdiv@exp^(0+128),w
  6215  16D5  00A0               	movwf	??___ftdiv^(0+128)
  6216  16D6  0820               	movf	??___ftdiv^(0+128),w
  6217  16D7  1283               	bcf	3,5	;RP0=0, select bank0
  6218  16D8  1303               	bcf	3,6	;RP1=0, select bank0
  6219  16D9  00B8               	movwf	___ftpack@exp
  6220  16DA  1683               	bsf	3,5	;RP0=1, select bank1
  6221  16DB  1303               	bcf	3,6	;RP1=0, select bank1
  6222  16DC  0829               	movf	___ftdiv@sign^(0+128),w
  6223  16DD  00A1               	movwf	(??___ftdiv+1)^(0+128)
  6224  16DE  0821               	movf	(??___ftdiv+1)^(0+128),w
  6225  16DF  1283               	bcf	3,5	;RP0=0, select bank0
  6226  16E0  1303               	bcf	3,6	;RP1=0, select bank0
  6227  16E1  00B9               	movwf	___ftpack@sign
  6228  16E2  160A  118A  22FE   	fcall	___ftpack
  6229  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  6230  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  6231  16E7  0835               	movf	?___ftpack,w
  6232  16E8  00C3               	movwf	?___ftdiv
  6233  16E9  0836               	movf	?___ftpack+1,w
  6234  16EA  00C4               	movwf	?___ftdiv+1
  6235  16EB  0837               	movf	?___ftpack+2,w
  6236  16EC  00C5               	movwf	?___ftdiv+2
  6237  16ED  0008               	return
  6238  16EE                     __end_of___ftdiv:	
  6239                           
  6240                           	psect	text19
  6241  1025                     __ptext19:	
  6242 ;; *************** function _run *****************
  6243 ;; Defined at:
  6244 ;;		line 339 in file "main.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  duty            2   28[BANK1 ] int 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6258 ;;      Params:         0       0       2       0       0
  6259 ;;      Locals:         0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0
  6261 ;;      Totals:         0       0       2       0       0
  6262 ;;Total ram usage:        2 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    7
  6265 ;; This function calls:
  6266 ;;		_USARTWriteLine
  6267 ;;		_acquire
  6268 ;;		_set_pwm
  6269 ;; This function is called by:
  6270 ;;		_choice
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function _run
  6276  1025                     _run:	
  6277                           
  6278                           ;main.c: 341: if(duty>100){
  6279                           
  6280                           ;incstack = 0
  6281 ;; hardware stack exceeded
  6282                           ; Regs used in _run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6283  1025  1683               	bsf	3,5	;RP0=1, select bank1
  6284  1026  1303               	bcf	3,6	;RP1=0, select bank1
  6285  1027  083D               	movf	(run@duty+1)^(0+128),w
  6286  1028  3A80               	xorlw	128
  6287  1029  00FF               	movwf	127
  6288  102A  3080               	movlw	128
  6289  102B  027F               	subwf	127,w
  6290  102C  1D03               	skipz
  6291  102D  2830               	goto	u5305
  6292  102E  3065               	movlw	101
  6293  102F  023C               	subwf	run@duty^(0+128),w
  6294  1030                     u5305:	
  6295  1030  1C03               	skipc
  6296  1031  2837               	goto	l4299
  6297                           
  6298                           ;main.c: 342: duty=0;
  6299  1032  1683               	bsf	3,5	;RP0=1, select bank1
  6300  1033  1303               	bcf	3,6	;RP1=0, select bank1
  6301  1034  01BC               	clrf	run@duty^(0+128)
  6302  1035  01BD               	clrf	(run@duty+1)^(0+128)
  6303                           
  6304                           ;main.c: 343: }
  6305  1036  2841               	goto	l4303
  6306  1037                     l4299:	
  6307                           
  6308                           ;main.c: 344: else if(duty == 0){
  6309  1037  1683               	bsf	3,5	;RP0=1, select bank1
  6310  1038  1303               	bcf	3,6	;RP1=0, select bank1
  6311  1039  083C               	movf	run@duty^(0+128),w
  6312  103A  043D               	iorwf	(run@duty+1)^(0+128),w
  6313  103B  1D03               	btfss	3,2
  6314  103C  2841               	goto	l4303
  6315                           
  6316                           ;main.c: 346: duty = 100;
  6317  103D  3064               	movlw	100
  6318  103E  00BC               	movwf	run@duty^(0+128)
  6319  103F  3000               	movlw	0
  6320  1040  00BD               	movwf	(run@duty^(0+128)+1)
  6321  1041                     l4303:	
  6322                           
  6323                           ;main.c: 347: }
  6324                           ;main.c: 348: set_pwm(duty);
  6325  1041  083D               	movf	(run@duty+1)^(0+128),w
  6326  1042  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  6327  1043  083C               	movf	run@duty^(0+128),w
  6328  1044  00B8               	movwf	set_pwm@percent^(0+128)
  6329  1045  120A  118A  2057  160A  118A  	fcall	_set_pwm
  6330                           
  6331                           ;main.c: 350: acquire();
  6332  104A  120A  118A  27A0  160A  118A  	fcall	_acquire
  6333                           
  6334                           ;main.c: 351: USARTWriteLine("If you want stop the system, type:");
  6335  104F  3005               	movlw	low ((STR_24+8)| (0+32768))
  6336  1050  1283               	bcf	3,5	;RP0=0, select bank0
  6337  1051  1303               	bcf	3,6	;RP1=0, select bank0
  6338  1052  00B8               	movwf	USARTWriteLine@str
  6339  1053  3084               	movlw	high ((STR_24+8)| (0+32768))
  6340  1054  00B9               	movwf	USARTWriteLine@str+1
  6341  1055  160A  158A  24C5  160A  118A  	fcall	_USARTWriteLine
  6342                           
  6343                           ;main.c: 352: USARTWriteLine("stop()");
  6344  105A  303A               	movlw	low (STR_46| (0+32768))
  6345  105B  1283               	bcf	3,5	;RP0=0, select bank0
  6346  105C  1303               	bcf	3,6	;RP1=0, select bank0
  6347  105D  00B8               	movwf	USARTWriteLine@str
  6348  105E  3086               	movlw	high (STR_46| (0+32768))
  6349  105F  00B9               	movwf	USARTWriteLine@str+1
  6350  1060  160A  158A  24C5   	fcall	_USARTWriteLine
  6351  1063  0008               	return
  6352  1064                     __end_of_run:	
  6353                           
  6354                           	psect	text20
  6355  0057                     __ptext20:	
  6356 ;; *************** function _set_pwm *****************
  6357 ;; Defined at:
  6358 ;;		line 300 in file "main.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  percent         2   24[BANK1 ] int 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      void 
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0, pclath, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6372 ;;      Params:         0       0       2       0       0
  6373 ;;      Locals:         0       0       0       0       0
  6374 ;;      Temps:          0       0       2       0       0
  6375 ;;      Totals:         0       0       4       0       0
  6376 ;;Total ram usage:        4 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    6
  6379 ;; This function calls:
  6380 ;;		___awtoft
  6381 ;;		___ftmul
  6382 ;;		___fttol
  6383 ;; This function is called by:
  6384 ;;		_step
  6385 ;;		_run
  6386 ;;		_stop
  6387 ;;		_sys
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _set_pwm
  6393  0057                     _set_pwm:	
  6394                           
  6395                           ;main.c: 301: pwm = (percent*10.23);
  6396                           
  6397                           ;incstack = 0
  6398                           ; Regs used in _set_pwm: [wreg+status,2+status,0+pclath+cstack]
  6399  0057  1683               	bsf	3,5	;RP0=1, select bank1
  6400  0058  1303               	bcf	3,6	;RP1=0, select bank1
  6401  0059  0839               	movf	(set_pwm@percent+1)^(0+128),w
  6402  005A  1283               	bcf	3,5	;RP0=0, select bank0
  6403  005B  1303               	bcf	3,6	;RP1=0, select bank0
  6404  005C  00BE               	movwf	___awtoft@c+1
  6405  005D  1683               	bsf	3,5	;RP0=1, select bank1
  6406  005E  1303               	bcf	3,6	;RP1=0, select bank1
  6407  005F  0838               	movf	set_pwm@percent^(0+128),w
  6408  0060  1283               	bcf	3,5	;RP0=0, select bank0
  6409  0061  1303               	bcf	3,6	;RP1=0, select bank0
  6410  0062  00BD               	movwf	___awtoft@c
  6411  0063  160A  118A  2000  120A  118A  	fcall	___awtoft
  6412  0068  1283               	bcf	3,5	;RP0=0, select bank0
  6413  0069  1303               	bcf	3,6	;RP1=0, select bank0
  6414  006A  083D               	movf	?___awtoft,w
  6415  006B  00C6               	movwf	___ftmul@f2
  6416  006C  083E               	movf	?___awtoft+1,w
  6417  006D  00C7               	movwf	___ftmul@f2+1
  6418  006E  083F               	movf	?___awtoft+2,w
  6419  006F  00C8               	movwf	___ftmul@f2+2
  6420  0070  30AE               	movlw	174
  6421  0071  00C3               	movwf	___ftmul@f1
  6422  0072  3023               	movlw	35
  6423  0073  00C4               	movwf	___ftmul@f1+1
  6424  0074  3041               	movlw	65
  6425  0075  00C5               	movwf	___ftmul@f1+2
  6426  0076  120A  118A  265A  120A  118A  	fcall	___ftmul
  6427  007B  1283               	bcf	3,5	;RP0=0, select bank0
  6428  007C  1303               	bcf	3,6	;RP1=0, select bank0
  6429  007D  0843               	movf	?___ftmul,w
  6430  007E  1683               	bsf	3,5	;RP0=1, select bank1
  6431  007F  1303               	bcf	3,6	;RP1=0, select bank1
  6432  0080  00AA               	movwf	___fttol@f1^(0+128)
  6433  0081  1283               	bcf	3,5	;RP0=0, select bank0
  6434  0082  1303               	bcf	3,6	;RP1=0, select bank0
  6435  0083  0844               	movf	?___ftmul+1,w
  6436  0084  1683               	bsf	3,5	;RP0=1, select bank1
  6437  0085  1303               	bcf	3,6	;RP1=0, select bank1
  6438  0086  00AB               	movwf	(___fttol@f1+1)^(0+128)
  6439  0087  1283               	bcf	3,5	;RP0=0, select bank0
  6440  0088  1303               	bcf	3,6	;RP1=0, select bank0
  6441  0089  0845               	movf	?___ftmul+2,w
  6442  008A  1683               	bsf	3,5	;RP0=1, select bank1
  6443  008B  1303               	bcf	3,6	;RP1=0, select bank1
  6444  008C  00AC               	movwf	(___fttol@f1+2)^(0+128)
  6445  008D  160A  118A  23DD  120A  118A  	fcall	___fttol
  6446  0092  1683               	bsf	3,5	;RP0=1, select bank1
  6447  0093  1303               	bcf	3,6	;RP1=0, select bank1
  6448  0094  082B               	movf	(?___fttol+1)^(0+128),w
  6449  0095  00CF               	movwf	(_pwm+1)^(0+128)
  6450  0096  082A               	movf	?___fttol^(0+128),w
  6451  0097  00CE               	movwf	_pwm^(0+128)
  6452                           
  6453                           ;main.c: 302: CCPR1L = pwm>>2;
  6454  0098  084F               	movf	(_pwm+1)^(0+128),w
  6455  0099  00BB               	movwf	(??_set_pwm^(0+128)+1)
  6456  009A  084E               	movf	_pwm^(0+128),w
  6457  009B  00BA               	movwf	??_set_pwm^(0+128)
  6458  009C  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6459  009D  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6460  009E  0CBA               	rrf	??_set_pwm^(0+128),f
  6461  009F  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6462  00A0  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6463  00A1  0CBA               	rrf	??_set_pwm^(0+128),f
  6464  00A2  083A               	movf	??_set_pwm^(0+128),w
  6465  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  6466  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  6467  00A5  0095               	movwf	21	;volatile
  6468                           
  6469                           ;main.c: 303: CCPR2L = pwm>>2;
  6470  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  6471  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  6472  00A8  084F               	movf	(_pwm+1)^(0+128),w
  6473  00A9  00BB               	movwf	(??_set_pwm^(0+128)+1)
  6474  00AA  084E               	movf	_pwm^(0+128),w
  6475  00AB  00BA               	movwf	??_set_pwm^(0+128)
  6476  00AC  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6477  00AD  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6478  00AE  0CBA               	rrf	??_set_pwm^(0+128),f
  6479  00AF  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6480  00B0  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6481  00B1  0CBA               	rrf	??_set_pwm^(0+128),f
  6482  00B2  083A               	movf	??_set_pwm^(0+128),w
  6483  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  6484  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  6485  00B5  009B               	movwf	27	;volatile
  6486                           
  6487                           ;main.c: 304: CCP1CONbits.CCP1Y = pwm & 0b00000001;
  6488  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  6489  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  6490  00B8  084E               	movf	_pwm^(0+128),w
  6491  00B9  3901               	andlw	1
  6492  00BA  00BA               	movwf	??_set_pwm^(0+128)
  6493  00BB  0EBA               	swapf	??_set_pwm^(0+128),f
  6494  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  6495  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  6496  00BE  0817               	movf	23,w	;volatile
  6497  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  6498  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  6499  00C1  063A               	xorwf	??_set_pwm^(0+128),w
  6500  00C2  39EF               	andlw	-17
  6501  00C3  063A               	xorwf	??_set_pwm^(0+128),w
  6502  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  6503  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  6504  00C6  0097               	movwf	23	;volatile
  6505                           
  6506                           ;main.c: 305: CCP1CONbits.CCP1X = pwm & 0b00000010;
  6507  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  6508  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  6509  00C9  084E               	movf	_pwm^(0+128),w
  6510  00CA  3902               	andlw	2
  6511  00CB  00BA               	movwf	??_set_pwm^(0+128)
  6512  00CC  0EBA               	swapf	??_set_pwm^(0+128),f
  6513  00CD  0DBA               	rlf	??_set_pwm^(0+128),f
  6514  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  6515  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  6516  00D0  0817               	movf	23,w	;volatile
  6517  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  6518  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  6519  00D3  063A               	xorwf	??_set_pwm^(0+128),w
  6520  00D4  39DF               	andlw	-33
  6521  00D5  063A               	xorwf	??_set_pwm^(0+128),w
  6522  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  6523  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  6524  00D8  0097               	movwf	23	;volatile
  6525                           
  6526                           ;main.c: 306: CCP2CONbits.CCP2Y = pwm & 0b00000001;
  6527  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  6528  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  6529  00DB  084E               	movf	_pwm^(0+128),w
  6530  00DC  3901               	andlw	1
  6531  00DD  00BA               	movwf	??_set_pwm^(0+128)
  6532  00DE  0EBA               	swapf	??_set_pwm^(0+128),f
  6533  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6534  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6535  00E1  081D               	movf	29,w	;volatile
  6536  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6537  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6538  00E4  063A               	xorwf	??_set_pwm^(0+128),w
  6539  00E5  39EF               	andlw	-17
  6540  00E6  063A               	xorwf	??_set_pwm^(0+128),w
  6541  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  6542  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  6543  00E9  009D               	movwf	29	;volatile
  6544                           
  6545                           ;main.c: 307: CCP2CONbits.CCP2X = pwm & 0b00000010;
  6546  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  6547  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  6548  00EC  084E               	movf	_pwm^(0+128),w
  6549  00ED  3902               	andlw	2
  6550  00EE  00BA               	movwf	??_set_pwm^(0+128)
  6551  00EF  0EBA               	swapf	??_set_pwm^(0+128),f
  6552  00F0  0DBA               	rlf	??_set_pwm^(0+128),f
  6553  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  6554  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  6555  00F3  081D               	movf	29,w	;volatile
  6556  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  6557  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  6558  00F6  063A               	xorwf	??_set_pwm^(0+128),w
  6559  00F7  39DF               	andlw	-33
  6560  00F8  063A               	xorwf	??_set_pwm^(0+128),w
  6561  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  6562  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  6563  00FB  009D               	movwf	29	;volatile
  6564  00FC  0008               	return
  6565  00FD                     __end_of_set_pwm:	
  6566                           
  6567                           	psect	text21
  6568  13DD                     __ptext21:	
  6569 ;; *************** function ___fttol *****************
  6570 ;; Defined at:
  6571 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  f1              3   10[BANK1 ] float 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  lval            4   19[BANK1 ] unsigned long 
  6576 ;;  exp1            1   23[BANK1 ] unsigned char 
  6577 ;;  sign1           1   18[BANK1 ] unsigned char 
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  4   10[BANK1 ] long 
  6580 ;; Registers used:
  6581 ;;		wreg, status,2, status,0
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6587 ;;      Params:         0       0       4       0       0
  6588 ;;      Locals:         0       0       6       0       0
  6589 ;;      Temps:          0       0       4       0       0
  6590 ;;      Totals:         0       0      14       0       0
  6591 ;;Total ram usage:       14 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    4
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		_set_pwm
  6598 ;;		_status
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function ___fttol
  6604  13DD                     ___fttol:	
  6605                           
  6606                           ;incstack = 0
  6607                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6608  13DD  1683               	bsf	3,5	;RP0=1, select bank1
  6609  13DE  1303               	bcf	3,6	;RP1=0, select bank1
  6610  13DF  082A               	movf	___fttol@f1^(0+128),w
  6611  13E0  00AE               	movwf	??___fttol^(0+128)
  6612  13E1  082B               	movf	(___fttol@f1+1)^(0+128),w
  6613  13E2  00AF               	movwf	(??___fttol^(0+128)+1)
  6614  13E3  082C               	movf	(___fttol@f1+2)^(0+128),w
  6615  13E4  00B0               	movwf	(??___fttol^(0+128)+2)
  6616  13E5  1003               	clrc
  6617  13E6  0D2F               	rlf	(??___fttol^(0+128)+1),w
  6618  13E7  0D30               	rlf	(??___fttol^(0+128)+2),w
  6619  13E8  00B1               	movwf	(??___fttol+3)^(0+128)
  6620  13E9  0831               	movf	(??___fttol+3)^(0+128),w
  6621  13EA  00B7               	movwf	___fttol@exp1^(0+128)
  6622  13EB  0837               	movf	___fttol@exp1^(0+128),w
  6623  13EC  1D03               	btfss	3,2
  6624  13ED  2BF7               	goto	l3741
  6625  13EE  3000               	movlw	0
  6626  13EF  00AD               	movwf	(?___fttol+3)^(0+128)
  6627  13F0  3000               	movlw	0
  6628  13F1  00AC               	movwf	(?___fttol+2)^(0+128)
  6629  13F2  3000               	movlw	0
  6630  13F3  00AB               	movwf	(?___fttol+1)^(0+128)
  6631  13F4  3000               	movlw	0
  6632  13F5  00AA               	movwf	?___fttol^(0+128)
  6633  13F6  0008               	return
  6634  13F7                     l3741:	
  6635  13F7  082A               	movf	___fttol@f1^(0+128),w
  6636  13F8  00AE               	movwf	??___fttol^(0+128)
  6637  13F9  082B               	movf	(___fttol@f1+1)^(0+128),w
  6638  13FA  00AF               	movwf	(??___fttol^(0+128)+1)
  6639  13FB  082C               	movf	(___fttol@f1+2)^(0+128),w
  6640  13FC  00B0               	movwf	(??___fttol^(0+128)+2)
  6641  13FD  3017               	movlw	23
  6642  13FE                     u4445:	
  6643  13FE  1003               	clrc
  6644  13FF  0CB0               	rrf	(??___fttol^(0+128)+2),f
  6645  1400  0CAF               	rrf	(??___fttol^(0+128)+1),f
  6646  1401  0CAE               	rrf	??___fttol^(0+128),f
  6647  1402  3EFF               	addlw	-1
  6648  1403  1D03               	skipz
  6649  1404  2BFE               	goto	u4445
  6650  1405  082E               	movf	??___fttol^(0+128),w
  6651  1406  00B1               	movwf	(??___fttol+3)^(0+128)
  6652  1407  0831               	movf	(??___fttol+3)^(0+128),w
  6653  1408  00B2               	movwf	___fttol@sign1^(0+128)
  6654  1409  17AB               	bsf	(___fttol@f1^(0+128)+1),7
  6655  140A  30FF               	movlw	255
  6656  140B  05AA               	andwf	___fttol@f1^(0+128),f
  6657  140C  30FF               	movlw	255
  6658  140D  05AB               	andwf	(___fttol@f1+1)^(0+128),f
  6659  140E  3000               	movlw	0
  6660  140F  05AC               	andwf	(___fttol@f1+2)^(0+128),f
  6661  1410  082A               	movf	___fttol@f1^(0+128),w
  6662  1411  00B3               	movwf	___fttol@lval^(0+128)
  6663  1412  082B               	movf	(___fttol@f1+1)^(0+128),w
  6664  1413  00B4               	movwf	(___fttol@lval^(0+128)+1)
  6665  1414  082C               	movf	(___fttol@f1+2)^(0+128),w
  6666  1415  00B5               	movwf	(___fttol@lval^(0+128)+2)
  6667  1416  01B6               	clrf	(___fttol@lval^(0+128)+3)
  6668  1417  308E               	movlw	142
  6669  1418  02B7               	subwf	___fttol@exp1^(0+128),f
  6670  1419  1FB7               	btfss	___fttol@exp1^(0+128),7
  6671  141A  2C39               	goto	l3761
  6672  141B  0837               	movf	___fttol@exp1^(0+128),w
  6673  141C  3A80               	xorlw	128
  6674  141D  3E8F               	addlw	143
  6675  141E  1803               	skipnc
  6676  141F  2C29               	goto	l3759
  6677  1420  3000               	movlw	0
  6678  1421  00AD               	movwf	(?___fttol+3)^(0+128)
  6679  1422  3000               	movlw	0
  6680  1423  00AC               	movwf	(?___fttol+2)^(0+128)
  6681  1424  3000               	movlw	0
  6682  1425  00AB               	movwf	(?___fttol+1)^(0+128)
  6683  1426  3000               	movlw	0
  6684  1427  00AA               	movwf	?___fttol^(0+128)
  6685  1428  0008               	return
  6686  1429                     l3759:	
  6687  1429  3001               	movlw	1
  6688  142A                     u4475:	
  6689  142A  1003               	clrc
  6690  142B  0CB6               	rrf	(___fttol@lval+3)^(0+128),f
  6691  142C  0CB5               	rrf	(___fttol@lval+2)^(0+128),f
  6692  142D  0CB4               	rrf	(___fttol@lval+1)^(0+128),f
  6693  142E  0CB3               	rrf	___fttol@lval^(0+128),f
  6694  142F  3EFF               	addlw	-1
  6695  1430  1D03               	skipz
  6696  1431  2C2A               	goto	u4475
  6697  1432  3001               	movlw	1
  6698  1433  00AE               	movwf	??___fttol^(0+128)
  6699  1434  082E               	movf	??___fttol^(0+128),w
  6700  1435  07B7               	addwf	___fttol@exp1^(0+128),f
  6701  1436  1903               	btfsc	3,2
  6702  1437  2C54               	goto	l3769
  6703  1438  2C29               	goto	l3759
  6704  1439                     l3761:	
  6705  1439  3018               	movlw	24
  6706  143A  0237               	subwf	___fttol@exp1^(0+128),w
  6707  143B  1C03               	skipc
  6708  143C  2C51               	goto	l744
  6709  143D  3000               	movlw	0
  6710  143E  00AD               	movwf	(?___fttol+3)^(0+128)
  6711  143F  3000               	movlw	0
  6712  1440  00AC               	movwf	(?___fttol+2)^(0+128)
  6713  1441  3000               	movlw	0
  6714  1442  00AB               	movwf	(?___fttol+1)^(0+128)
  6715  1443  3000               	movlw	0
  6716  1444  00AA               	movwf	?___fttol^(0+128)
  6717  1445  0008               	return
  6718  1446                     l3767:	
  6719  1446  3001               	movlw	1
  6720  1447  00AE               	movwf	??___fttol^(0+128)
  6721  1448                     u4505:	
  6722  1448  1003               	clrc
  6723  1449  0DB3               	rlf	___fttol@lval^(0+128),f
  6724  144A  0DB4               	rlf	(___fttol@lval+1)^(0+128),f
  6725  144B  0DB5               	rlf	(___fttol@lval+2)^(0+128),f
  6726  144C  0DB6               	rlf	(___fttol@lval+3)^(0+128),f
  6727  144D  0BAE               	decfsz	??___fttol^(0+128),f
  6728  144E  2C48               	goto	u4505
  6729  144F  3001               	movlw	1
  6730  1450  02B7               	subwf	___fttol@exp1^(0+128),f
  6731  1451                     l744:	
  6732  1451  0837               	movf	___fttol@exp1^(0+128),w
  6733  1452  1D03               	btfss	3,2
  6734  1453  2C46               	goto	l3767
  6735  1454                     l3769:	
  6736  1454  0832               	movf	___fttol@sign1^(0+128),w
  6737  1455  1903               	btfsc	3,2
  6738  1456  2C62               	goto	l3773
  6739  1457  09B3               	comf	___fttol@lval^(0+128),f
  6740  1458  09B4               	comf	(___fttol@lval+1)^(0+128),f
  6741  1459  09B5               	comf	(___fttol@lval+2)^(0+128),f
  6742  145A  09B6               	comf	(___fttol@lval+3)^(0+128),f
  6743  145B  0AB3               	incf	___fttol@lval^(0+128),f
  6744  145C  1903               	skipnz
  6745  145D  0AB4               	incf	(___fttol@lval+1)^(0+128),f
  6746  145E  1903               	skipnz
  6747  145F  0AB5               	incf	(___fttol@lval+2)^(0+128),f
  6748  1460  1903               	skipnz
  6749  1461  0AB6               	incf	(___fttol@lval+3)^(0+128),f
  6750  1462                     l3773:	
  6751  1462  0836               	movf	(___fttol@lval+3)^(0+128),w
  6752  1463  00AD               	movwf	(?___fttol+3)^(0+128)
  6753  1464  0835               	movf	(___fttol@lval+2)^(0+128),w
  6754  1465  00AC               	movwf	(?___fttol+2)^(0+128)
  6755  1466  0834               	movf	(___fttol@lval+1)^(0+128),w
  6756  1467  00AB               	movwf	(?___fttol+1)^(0+128)
  6757  1468  0833               	movf	___fttol@lval^(0+128),w
  6758  1469  00AA               	movwf	?___fttol^(0+128)
  6759  146A  0008               	return
  6760  146B                     __end_of___fttol:	
  6761                           
  6762                           	psect	text22
  6763  065A                     __ptext22:	
  6764 ;; *************** function ___ftmul *****************
  6765 ;; Defined at:
  6766 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  f1              3   35[BANK0 ] float 
  6769 ;;  f2              3   38[BANK0 ] float 
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;  f3_as_produc    3    5[BANK1 ] unsigned um
  6772 ;;  sign            1    9[BANK1 ] unsigned char 
  6773 ;;  cntr            1    8[BANK1 ] unsigned char 
  6774 ;;  exp             1    4[BANK1 ] unsigned char 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  3   35[BANK0 ] float 
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0, pclath, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6784 ;;      Params:         0       6       0       0       0
  6785 ;;      Locals:         0       0       6       0       0
  6786 ;;      Temps:          0       0       4       0       0
  6787 ;;      Totals:         0       6      10       0       0
  6788 ;;Total ram usage:       16 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    5
  6791 ;; This function calls:
  6792 ;;		___ftpack
  6793 ;; This function is called by:
  6794 ;;		_set_pwm
  6795 ;;		_status
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function ___ftmul
  6801  065A                     ___ftmul:	
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6805  065A  1283               	bcf	3,5	;RP0=0, select bank0
  6806  065B  1303               	bcf	3,6	;RP1=0, select bank0
  6807  065C  0843               	movf	___ftmul@f1,w
  6808  065D  1683               	bsf	3,5	;RP0=1, select bank1
  6809  065E  1303               	bcf	3,6	;RP1=0, select bank1
  6810  065F  00A0               	movwf	??___ftmul^(0+128)
  6811  0660  1283               	bcf	3,5	;RP0=0, select bank0
  6812  0661  1303               	bcf	3,6	;RP1=0, select bank0
  6813  0662  0844               	movf	___ftmul@f1+1,w
  6814  0663  1683               	bsf	3,5	;RP0=1, select bank1
  6815  0664  1303               	bcf	3,6	;RP1=0, select bank1
  6816  0665  00A1               	movwf	(??___ftmul^(0+128)+1)
  6817  0666  1283               	bcf	3,5	;RP0=0, select bank0
  6818  0667  1303               	bcf	3,6	;RP1=0, select bank0
  6819  0668  0845               	movf	___ftmul@f1+2,w
  6820  0669  1683               	bsf	3,5	;RP0=1, select bank1
  6821  066A  1303               	bcf	3,6	;RP1=0, select bank1
  6822  066B  00A2               	movwf	(??___ftmul^(0+128)+2)
  6823  066C  1003               	clrc
  6824  066D  0D21               	rlf	(??___ftmul^(0+128)+1),w
  6825  066E  0D22               	rlf	(??___ftmul^(0+128)+2),w
  6826  066F  00A3               	movwf	(??___ftmul+3)^(0+128)
  6827  0670  0823               	movf	(??___ftmul+3)^(0+128),w
  6828  0671  00A4               	movwf	___ftmul@exp^(0+128)
  6829  0672  0824               	movf	___ftmul@exp^(0+128),w
  6830  0673  1D03               	btfss	3,2
  6831  0674  2E7E               	goto	l3691
  6832  0675  3000               	movlw	0
  6833  0676  1283               	bcf	3,5	;RP0=0, select bank0
  6834  0677  1303               	bcf	3,6	;RP1=0, select bank0
  6835  0678  00C3               	movwf	?___ftmul
  6836  0679  3000               	movlw	0
  6837  067A  00C4               	movwf	?___ftmul+1
  6838  067B  3000               	movlw	0
  6839  067C  00C5               	movwf	?___ftmul+2
  6840  067D  0008               	return
  6841  067E                     l3691:	
  6842  067E  1283               	bcf	3,5	;RP0=0, select bank0
  6843  067F  0846               	movf	___ftmul@f2,w
  6844  0680  1683               	bsf	3,5	;RP0=1, select bank1
  6845  0681  1303               	bcf	3,6	;RP1=0, select bank1
  6846  0682  00A0               	movwf	??___ftmul^(0+128)
  6847  0683  1283               	bcf	3,5	;RP0=0, select bank0
  6848  0684  1303               	bcf	3,6	;RP1=0, select bank0
  6849  0685  0847               	movf	___ftmul@f2+1,w
  6850  0686  1683               	bsf	3,5	;RP0=1, select bank1
  6851  0687  1303               	bcf	3,6	;RP1=0, select bank1
  6852  0688  00A1               	movwf	(??___ftmul^(0+128)+1)
  6853  0689  1283               	bcf	3,5	;RP0=0, select bank0
  6854  068A  1303               	bcf	3,6	;RP1=0, select bank0
  6855  068B  0848               	movf	___ftmul@f2+2,w
  6856  068C  1683               	bsf	3,5	;RP0=1, select bank1
  6857  068D  1303               	bcf	3,6	;RP1=0, select bank1
  6858  068E  00A2               	movwf	(??___ftmul^(0+128)+2)
  6859  068F  1003               	clrc
  6860  0690  0D21               	rlf	(??___ftmul^(0+128)+1),w
  6861  0691  0D22               	rlf	(??___ftmul^(0+128)+2),w
  6862  0692  00A3               	movwf	(??___ftmul+3)^(0+128)
  6863  0693  0823               	movf	(??___ftmul+3)^(0+128),w
  6864  0694  00A9               	movwf	___ftmul@sign^(0+128)
  6865  0695  0829               	movf	___ftmul@sign^(0+128),w
  6866  0696  1D03               	btfss	3,2
  6867  0697  2EA1               	goto	l3697
  6868  0698  3000               	movlw	0
  6869  0699  1283               	bcf	3,5	;RP0=0, select bank0
  6870  069A  1303               	bcf	3,6	;RP1=0, select bank0
  6871  069B  00C3               	movwf	?___ftmul
  6872  069C  3000               	movlw	0
  6873  069D  00C4               	movwf	?___ftmul+1
  6874  069E  3000               	movlw	0
  6875  069F  00C5               	movwf	?___ftmul+2
  6876  06A0  0008               	return
  6877  06A1                     l3697:	
  6878  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  6879  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  6880  06A3  0829               	movf	___ftmul@sign^(0+128),w
  6881  06A4  3E7B               	addlw	123
  6882  06A5  00A0               	movwf	??___ftmul^(0+128)
  6883  06A6  0820               	movf	??___ftmul^(0+128),w
  6884  06A7  07A4               	addwf	___ftmul@exp^(0+128),f
  6885  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  6886  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  6887  06AA  0843               	movf	___ftmul@f1,w
  6888  06AB  1683               	bsf	3,5	;RP0=1, select bank1
  6889  06AC  1303               	bcf	3,6	;RP1=0, select bank1
  6890  06AD  00A0               	movwf	??___ftmul^(0+128)
  6891  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  6892  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  6893  06B0  0844               	movf	___ftmul@f1+1,w
  6894  06B1  1683               	bsf	3,5	;RP0=1, select bank1
  6895  06B2  1303               	bcf	3,6	;RP1=0, select bank1
  6896  06B3  00A1               	movwf	(??___ftmul^(0+128)+1)
  6897  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  6898  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  6899  06B6  0845               	movf	___ftmul@f1+2,w
  6900  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  6901  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  6902  06B9  00A2               	movwf	(??___ftmul^(0+128)+2)
  6903  06BA  3010               	movlw	16
  6904  06BB                     u4315:	
  6905  06BB  1003               	clrc
  6906  06BC  0CA2               	rrf	(??___ftmul^(0+128)+2),f
  6907  06BD  0CA1               	rrf	(??___ftmul^(0+128)+1),f
  6908  06BE  0CA0               	rrf	??___ftmul^(0+128),f
  6909  06BF  3EFF               	addlw	-1
  6910  06C0  1D03               	skipz
  6911  06C1  2EBB               	goto	u4315
  6912  06C2  0820               	movf	??___ftmul^(0+128),w
  6913  06C3  00A3               	movwf	(??___ftmul+3)^(0+128)
  6914  06C4  0823               	movf	(??___ftmul+3)^(0+128),w
  6915  06C5  00A9               	movwf	___ftmul@sign^(0+128)
  6916  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  6917  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  6918  06C8  0846               	movf	___ftmul@f2,w
  6919  06C9  1683               	bsf	3,5	;RP0=1, select bank1
  6920  06CA  1303               	bcf	3,6	;RP1=0, select bank1
  6921  06CB  00A0               	movwf	??___ftmul^(0+128)
  6922  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  6923  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  6924  06CE  0847               	movf	___ftmul@f2+1,w
  6925  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  6926  06D0  1303               	bcf	3,6	;RP1=0, select bank1
  6927  06D1  00A1               	movwf	(??___ftmul^(0+128)+1)
  6928  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  6929  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  6930  06D4  0848               	movf	___ftmul@f2+2,w
  6931  06D5  1683               	bsf	3,5	;RP0=1, select bank1
  6932  06D6  1303               	bcf	3,6	;RP1=0, select bank1
  6933  06D7  00A2               	movwf	(??___ftmul^(0+128)+2)
  6934  06D8  3010               	movlw	16
  6935  06D9                     u4325:	
  6936  06D9  1003               	clrc
  6937  06DA  0CA2               	rrf	(??___ftmul^(0+128)+2),f
  6938  06DB  0CA1               	rrf	(??___ftmul^(0+128)+1),f
  6939  06DC  0CA0               	rrf	??___ftmul^(0+128),f
  6940  06DD  3EFF               	addlw	-1
  6941  06DE  1D03               	skipz
  6942  06DF  2ED9               	goto	u4325
  6943  06E0  0820               	movf	??___ftmul^(0+128),w
  6944  06E1  00A3               	movwf	(??___ftmul+3)^(0+128)
  6945  06E2  0823               	movf	(??___ftmul+3)^(0+128),w
  6946  06E3  06A9               	xorwf	___ftmul@sign^(0+128),f
  6947  06E4  3080               	movlw	128
  6948  06E5  00A0               	movwf	??___ftmul^(0+128)
  6949  06E6  0820               	movf	??___ftmul^(0+128),w
  6950  06E7  05A9               	andwf	___ftmul@sign^(0+128),f
  6951  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  6952  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  6953  06EA  17C4               	bsf	___ftmul@f1+1,7
  6954  06EB  17C7               	bsf	___ftmul@f2+1,7
  6955  06EC  30FF               	movlw	255
  6956  06ED  05C6               	andwf	___ftmul@f2,f
  6957  06EE  30FF               	movlw	255
  6958  06EF  05C7               	andwf	___ftmul@f2+1,f
  6959  06F0  3000               	movlw	0
  6960  06F1  05C8               	andwf	___ftmul@f2+2,f
  6961  06F2  3000               	movlw	0
  6962  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  6963  06F4  1303               	bcf	3,6	;RP1=0, select bank1
  6964  06F5  00A5               	movwf	___ftmul@f3_as_product^(0+128)
  6965  06F6  3000               	movlw	0
  6966  06F7  00A6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  6967  06F8  3000               	movlw	0
  6968  06F9  00A7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  6969  06FA  3007               	movlw	7
  6970  06FB  00A0               	movwf	??___ftmul^(0+128)
  6971  06FC  0820               	movf	??___ftmul^(0+128),w
  6972  06FD  00A8               	movwf	___ftmul@cntr^(0+128)
  6973  06FE                     l3709:	
  6974  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  6975  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  6976  0700  1C43               	btfss	___ftmul@f1,0
  6977  0701  2F20               	goto	l3713
  6978  0702  0846               	movf	___ftmul@f2,w
  6979  0703  1683               	bsf	3,5	;RP0=1, select bank1
  6980  0704  1303               	bcf	3,6	;RP1=0, select bank1
  6981  0705  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
  6982  0706  1283               	bcf	3,5	;RP0=0, select bank0
  6983  0707  1303               	bcf	3,6	;RP1=0, select bank0
  6984  0708  0847               	movf	___ftmul@f2+1,w
  6985  0709  1103               	clrz
  6986  070A  1803               	skipnc
  6987  070B  0A47               	incf	___ftmul@f2+1,w
  6988  070C  1903               	skipnz
  6989  070D  2F11               	goto	u4341
  6990  070E  1683               	bsf	3,5	;RP0=1, select bank1
  6991  070F  1303               	bcf	3,6	;RP1=0, select bank1
  6992  0710  07A6               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  6993  0711                     u4341:	
  6994  0711  1283               	bcf	3,5	;RP0=0, select bank0
  6995  0712  1303               	bcf	3,6	;RP1=0, select bank0
  6996  0713  0848               	movf	___ftmul@f2+2,w
  6997  0714  1103               	clrz
  6998  0715  1803               	skipnc
  6999  0716  0A48               	incf	___ftmul@f2+2,w
  7000  0717  1903               	skipnz
  7001  0718  2F1C               	goto	u4342
  7002  0719  1683               	bsf	3,5	;RP0=1, select bank1
  7003  071A  1303               	bcf	3,6	;RP1=0, select bank1
  7004  071B  07A7               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  7005  071C                     u4342:	
  7006  071C  1283               	bcf	3,5	;RP0=0, select bank0
  7007  071D  1303               	bcf	3,6	;RP1=0, select bank0
  7008  071E  1683               	bsf	3,5	;RP0=1, select bank1
  7009  071F  1303               	bcf	3,6	;RP1=0, select bank1
  7010  0720                     l3713:	
  7011  0720  3001               	movlw	1
  7012  0721                     u4355:	
  7013  0721  1003               	clrc
  7014  0722  1283               	bcf	3,5	;RP0=0, select bank0
  7015  0723  0CC5               	rrf	___ftmul@f1+2,f
  7016  0724  0CC4               	rrf	___ftmul@f1+1,f
  7017  0725  0CC3               	rrf	___ftmul@f1,f
  7018  0726  3EFF               	addlw	-1
  7019  0727  1D03               	skipz
  7020  0728  2F21               	goto	u4355
  7021  0729  3001               	movlw	1
  7022  072A                     u4365:	
  7023  072A  1003               	clrc
  7024  072B  0DC6               	rlf	___ftmul@f2,f
  7025  072C  0DC7               	rlf	___ftmul@f2+1,f
  7026  072D  0DC8               	rlf	___ftmul@f2+2,f
  7027  072E  3EFF               	addlw	-1
  7028  072F  1D03               	skipz
  7029  0730  2F2A               	goto	u4365
  7030  0731  3001               	movlw	1
  7031  0732  1683               	bsf	3,5	;RP0=1, select bank1
  7032  0733  1303               	bcf	3,6	;RP1=0, select bank1
  7033  0734  02A8               	subwf	___ftmul@cntr^(0+128),f
  7034  0735  1D03               	btfss	3,2
  7035  0736  2EFE               	goto	l3709
  7036  0737  3009               	movlw	9
  7037  0738  00A0               	movwf	??___ftmul^(0+128)
  7038  0739  0820               	movf	??___ftmul^(0+128),w
  7039  073A  00A8               	movwf	___ftmul@cntr^(0+128)
  7040  073B                     l3721:	
  7041  073B  1283               	bcf	3,5	;RP0=0, select bank0
  7042  073C  1303               	bcf	3,6	;RP1=0, select bank0
  7043  073D  1C43               	btfss	___ftmul@f1,0
  7044  073E  2F5D               	goto	l3725
  7045  073F  0846               	movf	___ftmul@f2,w
  7046  0740  1683               	bsf	3,5	;RP0=1, select bank1
  7047  0741  1303               	bcf	3,6	;RP1=0, select bank1
  7048  0742  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
  7049  0743  1283               	bcf	3,5	;RP0=0, select bank0
  7050  0744  1303               	bcf	3,6	;RP1=0, select bank0
  7051  0745  0847               	movf	___ftmul@f2+1,w
  7052  0746  1103               	clrz
  7053  0747  1803               	skipnc
  7054  0748  0A47               	incf	___ftmul@f2+1,w
  7055  0749  1903               	skipnz
  7056  074A  2F4E               	goto	u4391
  7057  074B  1683               	bsf	3,5	;RP0=1, select bank1
  7058  074C  1303               	bcf	3,6	;RP1=0, select bank1
  7059  074D  07A6               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  7060  074E                     u4391:	
  7061  074E  1283               	bcf	3,5	;RP0=0, select bank0
  7062  074F  1303               	bcf	3,6	;RP1=0, select bank0
  7063  0750  0848               	movf	___ftmul@f2+2,w
  7064  0751  1103               	clrz
  7065  0752  1803               	skipnc
  7066  0753  0A48               	incf	___ftmul@f2+2,w
  7067  0754  1903               	skipnz
  7068  0755  2F59               	goto	u4392
  7069  0756  1683               	bsf	3,5	;RP0=1, select bank1
  7070  0757  1303               	bcf	3,6	;RP1=0, select bank1
  7071  0758  07A7               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  7072  0759                     u4392:	
  7073  0759  1283               	bcf	3,5	;RP0=0, select bank0
  7074  075A  1303               	bcf	3,6	;RP1=0, select bank0
  7075  075B  1683               	bsf	3,5	;RP0=1, select bank1
  7076  075C  1303               	bcf	3,6	;RP1=0, select bank1
  7077  075D                     l3725:	
  7078  075D  3001               	movlw	1
  7079  075E                     u4405:	
  7080  075E  1003               	clrc
  7081  075F  1283               	bcf	3,5	;RP0=0, select bank0
  7082  0760  0CC5               	rrf	___ftmul@f1+2,f
  7083  0761  0CC4               	rrf	___ftmul@f1+1,f
  7084  0762  0CC3               	rrf	___ftmul@f1,f
  7085  0763  3EFF               	addlw	-1
  7086  0764  1D03               	skipz
  7087  0765  2F5E               	goto	u4405
  7088  0766  3001               	movlw	1
  7089  0767                     u4415:	
  7090  0767  1003               	clrc
  7091  0768  1683               	bsf	3,5	;RP0=1, select bank1
  7092  0769  1303               	bcf	3,6	;RP1=0, select bank1
  7093  076A  0CA7               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  7094  076B  0CA6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7095  076C  0CA5               	rrf	___ftmul@f3_as_product^(0+128),f
  7096  076D  3EFF               	addlw	-1
  7097  076E  1D03               	skipz
  7098  076F  2F67               	goto	u4415
  7099  0770  3001               	movlw	1
  7100  0771  02A8               	subwf	___ftmul@cntr^(0+128),f
  7101  0772  1D03               	btfss	3,2
  7102  0773  2F3B               	goto	l3721
  7103  0774  0825               	movf	___ftmul@f3_as_product^(0+128),w
  7104  0775  1283               	bcf	3,5	;RP0=0, select bank0
  7105  0776  1303               	bcf	3,6	;RP1=0, select bank0
  7106  0777  00B5               	movwf	___ftpack@arg
  7107  0778  1683               	bsf	3,5	;RP0=1, select bank1
  7108  0779  1303               	bcf	3,6	;RP1=0, select bank1
  7109  077A  0826               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7110  077B  1283               	bcf	3,5	;RP0=0, select bank0
  7111  077C  1303               	bcf	3,6	;RP1=0, select bank0
  7112  077D  00B6               	movwf	___ftpack@arg+1
  7113  077E  1683               	bsf	3,5	;RP0=1, select bank1
  7114  077F  1303               	bcf	3,6	;RP1=0, select bank1
  7115  0780  0827               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7116  0781  1283               	bcf	3,5	;RP0=0, select bank0
  7117  0782  1303               	bcf	3,6	;RP1=0, select bank0
  7118  0783  00B7               	movwf	___ftpack@arg+2
  7119  0784  1683               	bsf	3,5	;RP0=1, select bank1
  7120  0785  1303               	bcf	3,6	;RP1=0, select bank1
  7121  0786  0824               	movf	___ftmul@exp^(0+128),w
  7122  0787  00A0               	movwf	??___ftmul^(0+128)
  7123  0788  0820               	movf	??___ftmul^(0+128),w
  7124  0789  1283               	bcf	3,5	;RP0=0, select bank0
  7125  078A  1303               	bcf	3,6	;RP1=0, select bank0
  7126  078B  00B8               	movwf	___ftpack@exp
  7127  078C  1683               	bsf	3,5	;RP0=1, select bank1
  7128  078D  1303               	bcf	3,6	;RP1=0, select bank1
  7129  078E  0829               	movf	___ftmul@sign^(0+128),w
  7130  078F  00A1               	movwf	(??___ftmul+1)^(0+128)
  7131  0790  0821               	movf	(??___ftmul+1)^(0+128),w
  7132  0791  1283               	bcf	3,5	;RP0=0, select bank0
  7133  0792  1303               	bcf	3,6	;RP1=0, select bank0
  7134  0793  00B9               	movwf	___ftpack@sign
  7135  0794  160A  118A  22FE   	fcall	___ftpack
  7136  0797  1283               	bcf	3,5	;RP0=0, select bank0
  7137  0798  1303               	bcf	3,6	;RP1=0, select bank0
  7138  0799  0835               	movf	?___ftpack,w
  7139  079A  00C3               	movwf	?___ftmul
  7140  079B  0836               	movf	?___ftpack+1,w
  7141  079C  00C4               	movwf	?___ftmul+1
  7142  079D  0837               	movf	?___ftpack+2,w
  7143  079E  00C5               	movwf	?___ftmul+2
  7144  079F  0008               	return
  7145  07A0                     __end_of___ftmul:	
  7146                           
  7147                           	psect	text23
  7148  1000                     __ptext23:	
  7149 ;; *************** function ___awtoft *****************
  7150 ;; Defined at:
  7151 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  c               2   29[BANK0 ] int 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  sign            1   34[BANK0 ] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  3   29[BANK0 ] float 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0, pclath, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7165 ;;      Params:         0       3       0       0       0
  7166 ;;      Locals:         0       1       0       0       0
  7167 ;;      Temps:          0       2       0       0       0
  7168 ;;      Totals:         0       6       0       0       0
  7169 ;;Total ram usage:        6 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    5
  7172 ;; This function calls:
  7173 ;;		___ftpack
  7174 ;; This function is called by:
  7175 ;;		_set_pwm
  7176 ;;		_status
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function ___awtoft
  7182  1000                     ___awtoft:	
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7186  1000  1283               	bcf	3,5	;RP0=0, select bank0
  7187  1001  1303               	bcf	3,6	;RP1=0, select bank0
  7188  1002  01C2               	clrf	___awtoft@sign
  7189  1003  1FBE               	btfss	___awtoft@c+1,7
  7190  1004  280C               	goto	l3681
  7191  1005  09BD               	comf	___awtoft@c,f
  7192  1006  09BE               	comf	___awtoft@c+1,f
  7193  1007  0ABD               	incf	___awtoft@c,f
  7194  1008  1903               	skipnz
  7195  1009  0ABE               	incf	___awtoft@c+1,f
  7196  100A  01C2               	clrf	___awtoft@sign
  7197  100B  0AC2               	incf	___awtoft@sign,f
  7198  100C                     l3681:	
  7199  100C  083D               	movf	___awtoft@c,w
  7200  100D  00B5               	movwf	___ftpack@arg
  7201  100E  083E               	movf	___awtoft@c+1,w
  7202  100F  00B6               	movwf	___ftpack@arg+1
  7203  1010  01B7               	clrf	___ftpack@arg+2
  7204  1011  308E               	movlw	142
  7205  1012  00C0               	movwf	??___awtoft
  7206  1013  0840               	movf	??___awtoft,w
  7207  1014  00B8               	movwf	___ftpack@exp
  7208  1015  0842               	movf	___awtoft@sign,w
  7209  1016  00C1               	movwf	??___awtoft+1
  7210  1017  0841               	movf	??___awtoft+1,w
  7211  1018  00B9               	movwf	___ftpack@sign
  7212  1019  160A  118A  22FE   	fcall	___ftpack
  7213  101C  1283               	bcf	3,5	;RP0=0, select bank0
  7214  101D  1303               	bcf	3,6	;RP1=0, select bank0
  7215  101E  0835               	movf	?___ftpack,w
  7216  101F  00BD               	movwf	?___awtoft
  7217  1020  0836               	movf	?___ftpack+1,w
  7218  1021  00BE               	movwf	?___awtoft+1
  7219  1022  0837               	movf	?___ftpack+2,w
  7220  1023  00BF               	movwf	?___awtoft+2
  7221  1024  0008               	return
  7222  1025                     __end_of___awtoft:	
  7223                           
  7224                           	psect	text24
  7225  12FE                     __ptext24:	
  7226 ;; *************** function ___ftpack *****************
  7227 ;; Defined at:
  7228 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  arg             3   21[BANK0 ] unsigned um
  7231 ;;  exp             1   24[BANK0 ] unsigned char 
  7232 ;;  sign            1   25[BANK0 ] unsigned char 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  3   21[BANK0 ] float 
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7244 ;;      Params:         0       5       0       0       0
  7245 ;;      Locals:         0       0       0       0       0
  7246 ;;      Temps:          0       3       0       0       0
  7247 ;;      Totals:         0       8       0       0       0
  7248 ;;Total ram usage:        8 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    4
  7251 ;; This function calls:
  7252 ;;		Nothing
  7253 ;; This function is called by:
  7254 ;;		___awtoft
  7255 ;;		___ftdiv
  7256 ;;		___ftmul
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           
  7261                           ;psect for function ___ftpack
  7262  12FE                     ___ftpack:	
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7266  12FE  1283               	bcf	3,5	;RP0=0, select bank0
  7267  12FF  1303               	bcf	3,6	;RP1=0, select bank0
  7268  1300  0838               	movf	___ftpack@exp,w
  7269  1301  1903               	btfsc	3,2
  7270  1302  2B08               	goto	l3641
  7271  1303  0837               	movf	___ftpack@arg+2,w
  7272  1304  0436               	iorwf	___ftpack@arg+1,w
  7273  1305  0435               	iorwf	___ftpack@arg,w
  7274  1306  1D03               	skipz
  7275  1307  2B1B               	goto	l3647
  7276  1308                     l3641:	
  7277  1308  3000               	movlw	0
  7278  1309  00B5               	movwf	?___ftpack
  7279  130A  3000               	movlw	0
  7280  130B  00B6               	movwf	?___ftpack+1
  7281  130C  3000               	movlw	0
  7282  130D  00B7               	movwf	?___ftpack+2
  7283  130E  0008               	return
  7284  130F                     l3645:	
  7285  130F  3001               	movlw	1
  7286  1310  00BA               	movwf	??___ftpack
  7287  1311  083A               	movf	??___ftpack,w
  7288  1312  07B8               	addwf	___ftpack@exp,f
  7289  1313  3001               	movlw	1
  7290  1314                     u4175:	
  7291  1314  1003               	clrc
  7292  1315  0CB7               	rrf	___ftpack@arg+2,f
  7293  1316  0CB6               	rrf	___ftpack@arg+1,f
  7294  1317  0CB5               	rrf	___ftpack@arg,f
  7295  1318  3EFF               	addlw	-1
  7296  1319  1D03               	skipz
  7297  131A  2B14               	goto	u4175
  7298  131B                     l3647:	
  7299  131B  30FE               	movlw	254
  7300  131C  0537               	andwf	___ftpack@arg+2,w
  7301  131D  1903               	btfsc	3,2
  7302  131E  2B36               	goto	l653
  7303  131F  2B0F               	goto	l3645
  7304  1320                     l3649:	
  7305  1320  3001               	movlw	1
  7306  1321  00BA               	movwf	??___ftpack
  7307  1322  083A               	movf	??___ftpack,w
  7308  1323  07B8               	addwf	___ftpack@exp,f
  7309  1324  3001               	movlw	1
  7310  1325  07B5               	addwf	___ftpack@arg,f
  7311  1326  3000               	movlw	0
  7312  1327  1803               	skipnc
  7313  1328  3001               	movlw	1
  7314  1329  07B6               	addwf	___ftpack@arg+1,f
  7315  132A  3000               	movlw	0
  7316  132B  1803               	skipnc
  7317  132C  3001               	movlw	1
  7318  132D  07B7               	addwf	___ftpack@arg+2,f
  7319  132E  3001               	movlw	1
  7320  132F                     u4195:	
  7321  132F  1003               	clrc
  7322  1330  0CB7               	rrf	___ftpack@arg+2,f
  7323  1331  0CB6               	rrf	___ftpack@arg+1,f
  7324  1332  0CB5               	rrf	___ftpack@arg,f
  7325  1333  3EFF               	addlw	-1
  7326  1334  1D03               	skipz
  7327  1335  2B2F               	goto	u4195
  7328  1336                     l653:	
  7329  1336  30FF               	movlw	255
  7330  1337  0537               	andwf	___ftpack@arg+2,w
  7331  1338  1903               	btfsc	3,2
  7332  1339  2B45               	goto	l3657
  7333  133A  2B20               	goto	l3649
  7334  133B                     l3655:	
  7335  133B  3001               	movlw	1
  7336  133C  02B8               	subwf	___ftpack@exp,f
  7337  133D  3001               	movlw	1
  7338  133E                     u4215:	
  7339  133E  1003               	clrc
  7340  133F  0DB5               	rlf	___ftpack@arg,f
  7341  1340  0DB6               	rlf	___ftpack@arg+1,f
  7342  1341  0DB7               	rlf	___ftpack@arg+2,f
  7343  1342  3EFF               	addlw	-1
  7344  1343  1D03               	skipz
  7345  1344  2B3E               	goto	u4215
  7346  1345                     l3657:	
  7347  1345  1BB6               	btfsc	___ftpack@arg+1,7
  7348  1346  2B4B               	goto	l660
  7349  1347  3002               	movlw	2
  7350  1348  0238               	subwf	___ftpack@exp,w
  7351  1349  1803               	skipnc
  7352  134A  2B3B               	goto	l3655
  7353  134B                     l660:	
  7354  134B  1838               	btfsc	___ftpack@exp,0
  7355  134C  2B53               	goto	l661
  7356  134D  30FF               	movlw	255
  7357  134E  05B5               	andwf	___ftpack@arg,f
  7358  134F  307F               	movlw	127
  7359  1350  05B6               	andwf	___ftpack@arg+1,f
  7360  1351  30FF               	movlw	255
  7361  1352  05B7               	andwf	___ftpack@arg+2,f
  7362  1353                     l661:	
  7363  1353  1003               	clrc
  7364  1354  0CB8               	rrf	___ftpack@exp,f
  7365  1355  0838               	movf	___ftpack@exp,w
  7366  1356  00BA               	movwf	??___ftpack
  7367  1357  01BB               	clrf	??___ftpack+1
  7368  1358  01BC               	clrf	??___ftpack+2
  7369  1359  3010               	movlw	16
  7370  135A                     u4255:	
  7371  135A  1003               	clrc
  7372  135B  0DBA               	rlf	??___ftpack,f
  7373  135C  0DBB               	rlf	??___ftpack+1,f
  7374  135D  0DBC               	rlf	??___ftpack+2,f
  7375  135E  3EFF               	addlw	-1
  7376  135F  1D03               	skipz
  7377  1360  2B5A               	goto	u4255
  7378  1361  083A               	movf	??___ftpack,w
  7379  1362  04B5               	iorwf	___ftpack@arg,f
  7380  1363  083B               	movf	??___ftpack+1,w
  7381  1364  04B6               	iorwf	___ftpack@arg+1,f
  7382  1365  083C               	movf	??___ftpack+2,w
  7383  1366  04B7               	iorwf	___ftpack@arg+2,f
  7384  1367  0839               	movf	___ftpack@sign,w
  7385  1368  1903               	btfsc	3,2
  7386  1369  0008               	return
  7387  136A  17B7               	bsf	___ftpack@arg+2,7
  7388  136B  0008               	return
  7389  136C                     __end_of___ftpack:	
  7390                           
  7391                           	psect	text25
  7392  07A0                     __ptext25:	
  7393 ;; *************** function _acquire *****************
  7394 ;; Defined at:
  7395 ;;		line 384 in file "main.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  valueAD         2   21[BANK1 ] unsigned int 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7409 ;;      Params:         0       0       0       0       0
  7410 ;;      Locals:         0       0       2       0       0
  7411 ;;      Temps:          0       0       0       0       0
  7412 ;;      Totals:         0       0       2       0       0
  7413 ;;Total ram usage:        2 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    6
  7416 ;; This function calls:
  7417 ;;		_USARTDataAvailable
  7418 ;;		_USARTGotoNewLine
  7419 ;;		_USARTWriteString
  7420 ;;		_sampling
  7421 ;;		_sprintf
  7422 ;; This function is called by:
  7423 ;;		_choice
  7424 ;;		_step
  7425 ;;		_run
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           
  7430                           ;psect for function _acquire
  7431  07A0                     _acquire:	
  7432                           
  7433                           ;main.c: 385: USARTGotoNewLine();
  7434                           
  7435                           ;incstack = 0
  7436 ;; hardware stack exceeded
  7437                           ; Regs used in _acquire: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7438  07A0  120A  158A  2001  120A  118A  	fcall	_USARTGotoNewLine
  7439                           
  7440                           ;main.c: 386: acquirement = 1;
  7441  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  7442  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  7443  07A7  01D8               	clrf	_acquirement
  7444  07A8  0AD8               	incf	_acquirement,f
  7445  07A9                     l3971:	
  7446                           ;main.c: 387: while(USARTDataAvailable() == 0 &&acquirement){
  7447                           
  7448  07A9  160A  158A  2589  120A  118A  	fcall	_USARTDataAvailable
  7449  07AE  3A00               	xorlw	0
  7450  07AF  1D03               	skipz
  7451  07B0  0008               	return
  7452  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  7453  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  7454  07B3  0858               	movf	_acquirement,w
  7455  07B4  1903               	btfsc	3,2
  7456  07B5  0008               	return
  7457                           
  7458                           ;main.c: 388: unsigned int valueAD = sampling();
  7459  07B6  160A  158A  24B0  120A  118A  	fcall	_sampling
  7460  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  7461  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  7462  07BD  0836               	movf	?_sampling+1,w
  7463  07BE  1683               	bsf	3,5	;RP0=1, select bank1
  7464  07BF  1303               	bcf	3,6	;RP1=0, select bank1
  7465  07C0  00B6               	movwf	(acquire@valueAD+1)^(0+128)
  7466  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  7467  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  7468  07C3  0835               	movf	?_sampling,w
  7469  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  7470  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  7471  07C6  00B5               	movwf	acquire@valueAD^(0+128)
  7472                           
  7473                           ;main.c: 389: if(valueAD<=1023 && valueAD >= 0){
  7474  07C7  3004               	movlw	4
  7475  07C8  0236               	subwf	(acquire@valueAD+1)^(0+128),w
  7476  07C9  3000               	movlw	0
  7477  07CA  1903               	skipnz
  7478  07CB  0235               	subwf	acquire@valueAD^(0+128),w
  7479  07CC  1803               	skipnc
  7480  07CD  2FA9               	goto	l3971
  7481                           
  7482                           ;main.c: 390: USARTWriteString("The analog value is: ");
  7483  07CE  309D               	movlw	low (STR_61| (0+32768))
  7484  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  7485  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  7486  07D1  00B6               	movwf	USARTWriteString@str
  7487  07D2  3084               	movlw	high (STR_61| (0+32768))
  7488  07D3  00B7               	movwf	USARTWriteString@str+1
  7489  07D4  160A  158A  25F3  120A  118A  	fcall	_USARTWriteString
  7490                           
  7491                           ;main.c: 391: sprintf(strBuffer,"%d",valueAD);
  7492  07D9  3051               	movlw	low (STR_52| (0+32768))
  7493  07DA  1683               	bsf	3,5	;RP0=1, select bank1
  7494  07DB  1303               	bcf	3,6	;RP1=0, select bank1
  7495  07DC  00A5               	movwf	sprintf@f^(0+128)
  7496  07DD  3086               	movlw	high (STR_52| (0+32768))
  7497  07DE  00A6               	movwf	(sprintf@f^(0+128)+1)
  7498  07DF  0836               	movf	(acquire@valueAD+1)^(0+128),w
  7499  07E0  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  7500  07E1  0835               	movf	acquire@valueAD^(0+128),w
  7501  07E2  00A7               	movwf	(?_sprintf^(0+128)+2)
  7502  07E3  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  7503  07E4  160A  118A  26EE  120A  118A  	fcall	_sprintf
  7504                           
  7505                           ;main.c: 392: USARTWriteString(strBuffer);
  7506  07E9  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  7507  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  7508  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  7509  07EC  00B6               	movwf	USARTWriteString@str
  7510  07ED  3001               	movlw	1
  7511  07EE  00B7               	movwf	USARTWriteString@str+1
  7512  07EF  160A  158A  25F3  120A  118A  	fcall	_USARTWriteString
  7513                           
  7514                           ;main.c: 393: USARTGotoNewLine();
  7515  07F4  120A  158A  2001  120A  118A  	fcall	_USARTGotoNewLine
  7516  07F9  2FA9               	goto	l3971
  7517  07FA                     __end_of_acquire:	
  7518                           
  7519                           	psect	text26
  7520  16EE                     __ptext26:	
  7521 ;; *************** function _sprintf *****************
  7522 ;; Defined at:
  7523 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;  sp              1    wreg     PTR unsigned char 
  7526 ;;		 -> strBuffer(25), 
  7527 ;;  f               2    5[BANK1 ] PTR const unsigned char 
  7528 ;;		 -> STR_70(3), STR_68(3), STR_66(3), STR_64(3), 
  7529 ;;		 -> STR_62(3), STR_59(3), STR_53(3), STR_52(3), 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  sp              1   19[BANK1 ] PTR unsigned char 
  7532 ;;		 -> strBuffer(25), 
  7533 ;;  tmpval          4    0        struct .
  7534 ;;  val             2   17[BANK1 ] unsigned int 
  7535 ;;  cp              2    0        PTR const unsigned char 
  7536 ;;  len             2    0        unsigned int 
  7537 ;;  c               1   20[BANK1 ] char 
  7538 ;;  prec            1   16[BANK1 ] char 
  7539 ;;  flag            1   15[BANK1 ] unsigned char 
  7540 ;;  ap              1   14[BANK1 ] PTR void [1]
  7541 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  2    5[BANK1 ] int 
  7544 ;; Registers used:
  7545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7551 ;;      Params:         0       0       6       0       0
  7552 ;;      Locals:         0       0       7       0       0
  7553 ;;      Temps:          0       0       3       0       0
  7554 ;;      Totals:         0       0      16       0       0
  7555 ;;Total ram usage:       16 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    5
  7558 ;; This function calls:
  7559 ;;		___lwdiv
  7560 ;;		___lwmod
  7561 ;; This function is called by:
  7562 ;;		_step
  7563 ;;		_status
  7564 ;;		_acquire
  7565 ;;		_adReadA0
  7566 ;;		_sys
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           
  7571                           ;psect for function _sprintf
  7572  16EE                     _sprintf:	
  7573                           
  7574                           ;incstack = 0
  7575 ;; hardware stack exceeded
  7576                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7577                           ;sprintf@sp stored from wreg
  7578  16EE  1683               	bsf	3,5	;RP0=1, select bank1
  7579  16EF  1303               	bcf	3,6	;RP1=0, select bank1
  7580  16F0  00B3               	movwf	sprintf@sp^(0+128)
  7581                           
  7582                           ;doprnt.c: 494: va_list ap;
  7583                           ;doprnt.c: 499: signed char c;
  7584                           ;doprnt.c: 506: signed char prec;
  7585                           ;doprnt.c: 508: unsigned char flag;
  7586                           ;doprnt.c: 523: union {
  7587                           ;doprnt.c: 524: unsigned long vd;
  7588                           ;doprnt.c: 525: double integ;
  7589                           ;doprnt.c: 526: } tmpval;
  7590                           ;doprnt.c: 528: unsigned int val;
  7591                           ;doprnt.c: 529: unsigned len;
  7592                           ;doprnt.c: 530: const char * cp;
  7593                           ;doprnt.c: 533: *ap = __va_start();
  7594  16F1  30A7               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7595  16F2  00AB               	movwf	??_sprintf^(0+128)
  7596  16F3  082B               	movf	??_sprintf^(0+128),w
  7597  16F4  00AE               	movwf	sprintf@ap^(0+128)
  7598  16F5                     l3927:	
  7599                           ;doprnt.c: 536: while(c = *f++) {
  7600                           
  7601  16F5  0826               	movf	(sprintf@f+1)^(0+128),w
  7602  16F6  00AC               	movwf	(??_sprintf^(0+128)+1)
  7603  16F7  0825               	movf	sprintf@f^(0+128),w
  7604  16F8  00AB               	movwf	??_sprintf^(0+128)
  7605  16F9  0AA5               	incf	sprintf@f^(0+128),f
  7606  16FA  1903               	skipnz
  7607  16FB  0AA6               	incf	(sprintf@f+1)^(0+128),f
  7608  16FC  082C               	movf	(??_sprintf+1)^(0+128),w
  7609  16FD  1283               	bcf	3,5	;RP0=0, select bank0
  7610  16FE  1303               	bcf	3,6	;RP1=0, select bank0
  7611  16FF  00FF               	movwf	127
  7612  1700  1683               	bsf	3,5	;RP0=1, select bank1
  7613  1701  1303               	bcf	3,6	;RP1=0, select bank1
  7614  1702  082B               	movf	??_sprintf^(0+128),w
  7615  1703  0084               	movwf	4
  7616  1704  1283               	bcf	3,5	;RP0=0, select bank0
  7617  1705  1303               	bcf	3,6	;RP1=0, select bank0
  7618  1706  120A  118A  2100  160A  118A  	fcall	stringtab
  7619  170B  1683               	bsf	3,5	;RP0=1, select bank1
  7620  170C  1303               	bcf	3,6	;RP1=0, select bank1
  7621  170D  00AD               	movwf	(??_sprintf+2)^(0+128)
  7622  170E  082D               	movf	(??_sprintf+2)^(0+128),w
  7623  170F  00B4               	movwf	sprintf@c^(0+128)
  7624  1710  0834               	movf	sprintf@c^(0+128),w
  7625  1711  1903               	btfsc	3,2
  7626  1712  2FFB               	goto	l3929
  7627                           
  7628                           ;doprnt.c: 538: if(c != '%')
  7629  1713  3025               	movlw	37
  7630  1714  0634               	xorwf	sprintf@c^(0+128),w
  7631  1715  1903               	btfsc	3,2
  7632  1716  2F23               	goto	l3883
  7633                           
  7634                           ;doprnt.c: 540: {
  7635                           ;doprnt.c: 541: ((*sp++ = (c)));
  7636  1717  0834               	movf	sprintf@c^(0+128),w
  7637  1718  00AB               	movwf	??_sprintf^(0+128)
  7638  1719  0833               	movf	sprintf@sp^(0+128),w
  7639  171A  0084               	movwf	4
  7640  171B  082B               	movf	??_sprintf^(0+128),w
  7641  171C  1783               	bsf	3,7	;select IRP bank2
  7642  171D  0080               	movwf	0
  7643  171E  3001               	movlw	1
  7644  171F  00AB               	movwf	??_sprintf^(0+128)
  7645  1720  082B               	movf	??_sprintf^(0+128),w
  7646  1721  07B3               	addwf	sprintf@sp^(0+128),f
  7647                           
  7648                           ;doprnt.c: 542: continue;
  7649  1722  2EF5               	goto	l3927
  7650  1723                     l3883:	
  7651                           
  7652                           ;doprnt.c: 543: }
  7653                           ;doprnt.c: 548: flag = 0;
  7654  1723  01AF               	clrf	sprintf@flag^(0+128)
  7655                           
  7656                           ;doprnt.c: 822: }
  7657                           
  7658                           ;doprnt.c: 813: continue;
  7659                           
  7660                           ;doprnt.c: 802: default:
  7661                           
  7662                           ;doprnt.c: 698: case 'i':
  7663                           ;doprnt.c: 699: break;
  7664                           
  7665                           ;doprnt.c: 697: case 'd':
  7666                           
  7667                           ;doprnt.c: 638: goto alldone;
  7668                           
  7669                           ;doprnt.c: 637: case 0:
  7670                           
  7671                           ;doprnt.c: 635: switch(c = *f++) {
  7672  1724  0826               	movf	(sprintf@f+1)^(0+128),w
  7673  1725  00AC               	movwf	(??_sprintf^(0+128)+1)
  7674  1726  0825               	movf	sprintf@f^(0+128),w
  7675  1727  00AB               	movwf	??_sprintf^(0+128)
  7676  1728  0AA5               	incf	sprintf@f^(0+128),f
  7677  1729  1903               	skipnz
  7678  172A  0AA6               	incf	(sprintf@f+1)^(0+128),f
  7679  172B  082C               	movf	(??_sprintf+1)^(0+128),w
  7680  172C  1283               	bcf	3,5	;RP0=0, select bank0
  7681  172D  1303               	bcf	3,6	;RP1=0, select bank0
  7682  172E  00FF               	movwf	127
  7683  172F  1683               	bsf	3,5	;RP0=1, select bank1
  7684  1730  1303               	bcf	3,6	;RP1=0, select bank1
  7685  1731  082B               	movf	??_sprintf^(0+128),w
  7686  1732  0084               	movwf	4
  7687  1733  1283               	bcf	3,5	;RP0=0, select bank0
  7688  1734  1303               	bcf	3,6	;RP1=0, select bank0
  7689  1735  120A  118A  2100  160A  118A  	fcall	stringtab
  7690  173A  1683               	bsf	3,5	;RP0=1, select bank1
  7691  173B  1303               	bcf	3,6	;RP1=0, select bank1
  7692  173C  00B4               	movwf	sprintf@c^(0+128)
  7693                           
  7694                           ; Switch size 1, requested type "space"
  7695                           ; Number of cases is 3, Range of values is 0 to 105
  7696                           ; switch strategies available:
  7697                           ; Name         Instructions Cycles
  7698                           ; simple_byte           10     6 (average)
  7699                           ; jumptable            260     6 (fixed)
  7700                           ;	Chosen strategy is simple_byte
  7701  173D  3A00               	xorlw	0	; case 0
  7702  173E  1903               	skipnz
  7703  173F  2FFB               	goto	l3929
  7704  1740  3A64               	xorlw	100	; case 100
  7705  1741  1903               	skipnz
  7706  1742  2F47               	goto	l3889
  7707  1743  3A0D               	xorlw	13	; case 105
  7708  1744  1903               	skipnz
  7709  1745  2F47               	goto	l3889
  7710  1746  2EF5               	goto	l3927
  7711  1747                     l3889:	
  7712                           
  7713                           ;doprnt.c: 1253: {
  7714                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7715  1747  082E               	movf	sprintf@ap^(0+128),w
  7716  1748  0084               	movwf	4
  7717  1749  1383               	bcf	3,7	;select IRP bank0
  7718  174A  0800               	movf	0,w
  7719  174B  00B1               	movwf	sprintf@val^(0+128)
  7720  174C  0A84               	incf	4,f
  7721  174D  0800               	movf	0,w
  7722  174E  00B2               	movwf	(sprintf@val+1)^(0+128)
  7723  174F  3002               	movlw	2
  7724  1750  00AB               	movwf	??_sprintf^(0+128)
  7725  1751  082B               	movf	??_sprintf^(0+128),w
  7726  1752  07AE               	addwf	sprintf@ap^(0+128),f
  7727                           
  7728                           ;doprnt.c: 1261: if((int)val < 0) {
  7729  1753  1FB2               	btfss	(sprintf@val+1)^(0+128),7
  7730  1754  2F5E               	goto	l3899
  7731                           
  7732                           ;doprnt.c: 1262: flag |= 0x03;
  7733  1755  3003               	movlw	3
  7734  1756  00AB               	movwf	??_sprintf^(0+128)
  7735  1757  082B               	movf	??_sprintf^(0+128),w
  7736  1758  04AF               	iorwf	sprintf@flag^(0+128),f
  7737                           
  7738                           ;doprnt.c: 1263: val = -val;
  7739  1759  09B1               	comf	sprintf@val^(0+128),f
  7740  175A  09B2               	comf	(sprintf@val+1)^(0+128),f
  7741  175B  0AB1               	incf	sprintf@val^(0+128),f
  7742  175C  1903               	skipnz
  7743  175D  0AB2               	incf	(sprintf@val+1)^(0+128),f
  7744  175E                     l3899:	
  7745                           
  7746                           ;doprnt.c: 1264: }
  7747                           ;doprnt.c: 1266: }
  7748                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7749  175E  01B4               	clrf	sprintf@c^(0+128)
  7750  175F  0AB4               	incf	sprintf@c^(0+128),f
  7751  1760  3005               	movlw	5
  7752  1761  0634               	xorwf	sprintf@c^(0+128),w
  7753  1762  1903               	btfsc	3,2
  7754  1763  2F91               	goto	l3911
  7755  1764                     l3905:	
  7756                           
  7757                           ;doprnt.c: 1306: if(val < dpowers[c])
  7758  1764  0834               	movf	sprintf@c^(0+128),w
  7759  1765  00AB               	movwf	??_sprintf^(0+128)
  7760  1766  072B               	addwf	??_sprintf^(0+128),w
  7761  1767  3E12               	addlw	low (_dpowers| (0+32768))
  7762  1768  0084               	movwf	4
  7763  1769  3081               	movlw	high (_dpowers| (0+32768))
  7764  176A  1803               	skipnc
  7765  176B  3E01               	addlw	1
  7766  176C  1283               	bcf	3,5	;RP0=0, select bank0
  7767  176D  1303               	bcf	3,6	;RP1=0, select bank0
  7768  176E  00FF               	movwf	127
  7769  176F  120A  118A  2100  160A  118A  	fcall	stringtab
  7770  1774  1683               	bsf	3,5	;RP0=1, select bank1
  7771  1775  1303               	bcf	3,6	;RP1=0, select bank1
  7772  1776  00AC               	movwf	(??_sprintf+1)^(0+128)
  7773  1777  1283               	bcf	3,5	;RP0=0, select bank0
  7774  1778  1303               	bcf	3,6	;RP1=0, select bank0
  7775  1779  120A  118A  2100  160A  118A  	fcall	stringtab
  7776  177E  1683               	bsf	3,5	;RP0=1, select bank1
  7777  177F  1303               	bcf	3,6	;RP1=0, select bank1
  7778  1780  00AD               	movwf	((??_sprintf+1)^(0+128)+1)
  7779  1781  082D               	movf	(??_sprintf+2)^(0+128),w
  7780  1782  0232               	subwf	(sprintf@val+1)^(0+128),w
  7781  1783  1D03               	skipz
  7782  1784  2F87               	goto	u4735
  7783  1785  082C               	movf	(??_sprintf+1)^(0+128),w
  7784  1786  0231               	subwf	sprintf@val^(0+128),w
  7785  1787                     u4735:	
  7786  1787  1C03               	btfss	3,0
  7787  1788  2F91               	goto	l3911
  7788                           
  7789                           ;doprnt.c: 1307: break;
  7790  1789  3001               	movlw	1
  7791  178A  00AB               	movwf	??_sprintf^(0+128)
  7792  178B  082B               	movf	??_sprintf^(0+128),w
  7793  178C  07B4               	addwf	sprintf@c^(0+128),f
  7794  178D  3005               	movlw	5
  7795  178E  0634               	xorwf	sprintf@c^(0+128),w
  7796  178F  1D03               	btfss	3,2
  7797  1790  2F64               	goto	l3905
  7798  1791                     l3911:	
  7799                           
  7800                           ;doprnt.c: 1422: {
  7801                           ;doprnt.c: 1438: if(flag & 0x03)
  7802  1791  082F               	movf	sprintf@flag^(0+128),w
  7803  1792  3903               	andlw	3
  7804  1793  1903               	btfsc	3,2
  7805  1794  2FA0               	goto	l3917
  7806                           
  7807                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7808  1795  302D               	movlw	45
  7809  1796  00AB               	movwf	??_sprintf^(0+128)
  7810  1797  0833               	movf	sprintf@sp^(0+128),w
  7811  1798  0084               	movwf	4
  7812  1799  082B               	movf	??_sprintf^(0+128),w
  7813  179A  1783               	bsf	3,7	;select IRP bank2
  7814  179B  0080               	movwf	0
  7815  179C  3001               	movlw	1
  7816  179D  00AB               	movwf	??_sprintf^(0+128)
  7817  179E  082B               	movf	??_sprintf^(0+128),w
  7818  179F  07B3               	addwf	sprintf@sp^(0+128),f
  7819  17A0                     l3917:	
  7820                           
  7821                           ;doprnt.c: 1469: }
  7822                           ;doprnt.c: 1472: prec = c;
  7823  17A0  0834               	movf	sprintf@c^(0+128),w
  7824  17A1  00AB               	movwf	??_sprintf^(0+128)
  7825  17A2  082B               	movf	??_sprintf^(0+128),w
  7826  17A3  00B0               	movwf	sprintf@prec^(0+128)
  7827  17A4                     l3925:	
  7828                           ;doprnt.c: 1474: while(prec--) {
  7829                           
  7830  17A4  30FF               	movlw	255
  7831  17A5  00AB               	movwf	??_sprintf^(0+128)
  7832  17A6  082B               	movf	??_sprintf^(0+128),w
  7833  17A7  07B0               	addwf	sprintf@prec^(0+128),f
  7834  17A8  0A30               	incf	sprintf@prec^(0+128),w
  7835  17A9  1903               	btfsc	3,2
  7836  17AA  2EF5               	goto	l3927
  7837                           
  7838                           ;doprnt.c: 1478: {
  7839                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7840  17AB  300A               	movlw	10
  7841  17AC  00A0               	movwf	___lwmod@divisor^(0+128)
  7842  17AD  3000               	movlw	0
  7843  17AE  00A1               	movwf	(___lwmod@divisor^(0+128)+1)
  7844  17AF  0830               	movf	sprintf@prec^(0+128),w
  7845  17B0  00AB               	movwf	??_sprintf^(0+128)
  7846  17B1  072B               	addwf	??_sprintf^(0+128),w
  7847  17B2  3E12               	addlw	low (_dpowers| (0+32768))
  7848  17B3  0084               	movwf	4
  7849  17B4  3081               	movlw	high (_dpowers| (0+32768))
  7850  17B5  1803               	skipnc
  7851  17B6  3E01               	addlw	1
  7852  17B7  1283               	bcf	3,5	;RP0=0, select bank0
  7853  17B8  1303               	bcf	3,6	;RP1=0, select bank0
  7854  17B9  00FF               	movwf	127
  7855  17BA  120A  118A  2100  160A  118A  	fcall	stringtab
  7856  17BF  00B5               	movwf	___lwdiv@divisor
  7857  17C0  120A  118A  2100  160A  118A  	fcall	stringtab
  7858  17C5  00B6               	movwf	___lwdiv@divisor+1
  7859  17C6  1683               	bsf	3,5	;RP0=1, select bank1
  7860  17C7  1303               	bcf	3,6	;RP1=0, select bank1
  7861  17C8  0832               	movf	(sprintf@val+1)^(0+128),w
  7862  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  7863  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  7864  17CB  00B8               	movwf	___lwdiv@dividend+1
  7865  17CC  1683               	bsf	3,5	;RP0=1, select bank1
  7866  17CD  1303               	bcf	3,6	;RP1=0, select bank1
  7867  17CE  0831               	movf	sprintf@val^(0+128),w
  7868  17CF  1283               	bcf	3,5	;RP0=0, select bank0
  7869  17D0  1303               	bcf	3,6	;RP1=0, select bank0
  7870  17D1  00B7               	movwf	___lwdiv@dividend
  7871  17D2  160A  158A  27C2  160A  118A  	fcall	___lwdiv
  7872  17D7  1283               	bcf	3,5	;RP0=0, select bank0
  7873  17D8  1303               	bcf	3,6	;RP1=0, select bank0
  7874  17D9  0836               	movf	?___lwdiv+1,w
  7875  17DA  1683               	bsf	3,5	;RP0=1, select bank1
  7876  17DB  1303               	bcf	3,6	;RP1=0, select bank1
  7877  17DC  00A3               	movwf	(___lwmod@dividend+1)^(0+128)
  7878  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  7879  17DE  1303               	bcf	3,6	;RP1=0, select bank0
  7880  17DF  0835               	movf	?___lwdiv,w
  7881  17E0  1683               	bsf	3,5	;RP0=1, select bank1
  7882  17E1  1303               	bcf	3,6	;RP1=0, select bank1
  7883  17E2  00A2               	movwf	___lwmod@dividend^(0+128)
  7884  17E3  160A  158A  2711  160A  118A  	fcall	___lwmod
  7885  17E8  1683               	bsf	3,5	;RP0=1, select bank1
  7886  17E9  1303               	bcf	3,6	;RP1=0, select bank1
  7887  17EA  0820               	movf	?___lwmod^(0+128),w
  7888  17EB  3E30               	addlw	48
  7889  17EC  00AC               	movwf	(??_sprintf+1)^(0+128)
  7890  17ED  082C               	movf	(??_sprintf+1)^(0+128),w
  7891  17EE  00B4               	movwf	sprintf@c^(0+128)
  7892                           
  7893                           ;doprnt.c: 1523: }
  7894                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7895  17EF  0834               	movf	sprintf@c^(0+128),w
  7896  17F0  00AB               	movwf	??_sprintf^(0+128)
  7897  17F1  0833               	movf	sprintf@sp^(0+128),w
  7898  17F2  0084               	movwf	4
  7899  17F3  082B               	movf	??_sprintf^(0+128),w
  7900  17F4  1783               	bsf	3,7	;select IRP bank2
  7901  17F5  0080               	movwf	0
  7902  17F6  3001               	movlw	1
  7903  17F7  00AB               	movwf	??_sprintf^(0+128)
  7904  17F8  082B               	movf	??_sprintf^(0+128),w
  7905  17F9  07B3               	addwf	sprintf@sp^(0+128),f
  7906  17FA  2FA4               	goto	l3925
  7907  17FB                     l3929:	
  7908                           ;doprnt.c: 1525: }
  7909                           ;doprnt.c: 1533: }
  7910                           ;doprnt.c: 1535: alldone:
  7911                           
  7912                           
  7913                           ;doprnt.c: 1538: *sp = 0;
  7914  17FB  0833               	movf	sprintf@sp^(0+128),w
  7915  17FC  0084               	movwf	4
  7916  17FD  1783               	bsf	3,7	;select IRP bank2
  7917  17FE  0180               	clrf	0
  7918  17FF  0008               	return
  7919  1800                     __end_of_sprintf:	
  7920                           ;doprnt.c: 1540: return 0;
  7921                           ;	Return value of _sprintf is never used
  7922                           
  7923                           
  7924                           	psect	text27
  7925  1F11                     __ptext27:	
  7926 ;; *************** function ___lwmod *****************
  7927 ;; Defined at:
  7928 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;  divisor         2    0[BANK1 ] unsigned int 
  7931 ;;  dividend        2    2[BANK1 ] unsigned int 
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;  counter         1    4[BANK1 ] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  2    0[BANK1 ] unsigned int 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7943 ;;      Params:         0       0       4       0       0
  7944 ;;      Locals:         0       0       1       0       0
  7945 ;;      Temps:          0       1       0       0       0
  7946 ;;      Totals:         0       1       5       0       0
  7947 ;;Total ram usage:        6 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    4
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_sys
  7954 ;;		_sprintf
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           
  7959                           ;psect for function ___lwmod
  7960  1F11                     ___lwmod:	
  7961                           
  7962                           ;incstack = 0
  7963 ;; hardware stack exceeded
  7964                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7965  1F11  1683               	bsf	3,5	;RP0=1, select bank1
  7966  1F12  1303               	bcf	3,6	;RP1=0, select bank1
  7967  1F13  0820               	movf	___lwmod@divisor^(0+128),w
  7968  1F14  0421               	iorwf	(___lwmod@divisor+1)^(0+128),w
  7969  1F15  1903               	btfsc	3,2
  7970  1F16  2F44               	goto	l3821
  7971  1F17  01A4               	clrf	___lwmod@counter^(0+128)
  7972  1F18  0AA4               	incf	___lwmod@counter^(0+128),f
  7973  1F19                     l3811:	
  7974  1F19  1BA1               	btfsc	(___lwmod@divisor+1)^(0+128),7
  7975  1F1A  2F2B               	goto	l3813
  7976  1F1B  3001               	movlw	1
  7977  1F1C                     u4615:	
  7978  1F1C  1003               	clrc
  7979  1F1D  0DA0               	rlf	___lwmod@divisor^(0+128),f
  7980  1F1E  0DA1               	rlf	(___lwmod@divisor+1)^(0+128),f
  7981  1F1F  3EFF               	addlw	-1
  7982  1F20  1D03               	skipz
  7983  1F21  2F1C               	goto	u4615
  7984  1F22  3001               	movlw	1
  7985  1F23  1283               	bcf	3,5	;RP0=0, select bank0
  7986  1F24  1303               	bcf	3,6	;RP1=0, select bank0
  7987  1F25  00C9               	movwf	??___lwmod
  7988  1F26  0849               	movf	??___lwmod,w
  7989  1F27  1683               	bsf	3,5	;RP0=1, select bank1
  7990  1F28  1303               	bcf	3,6	;RP1=0, select bank1
  7991  1F29  07A4               	addwf	___lwmod@counter^(0+128),f
  7992  1F2A  2F19               	goto	l3811
  7993  1F2B                     l3813:	
  7994  1F2B  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  7995  1F2C  0223               	subwf	(___lwmod@dividend+1)^(0+128),w
  7996  1F2D  1D03               	skipz
  7997  1F2E  2F31               	goto	u4635
  7998  1F2F  0820               	movf	___lwmod@divisor^(0+128),w
  7999  1F30  0222               	subwf	___lwmod@dividend^(0+128),w
  8000  1F31                     u4635:	
  8001  1F31  1C03               	skipc
  8002  1F32  2F39               	goto	l3817
  8003  1F33  0820               	movf	___lwmod@divisor^(0+128),w
  8004  1F34  02A2               	subwf	___lwmod@dividend^(0+128),f
  8005  1F35  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  8006  1F36  1C03               	skipc
  8007  1F37  03A3               	decf	(___lwmod@dividend+1)^(0+128),f
  8008  1F38  02A3               	subwf	(___lwmod@dividend+1)^(0+128),f
  8009  1F39                     l3817:	
  8010  1F39  3001               	movlw	1
  8011  1F3A                     u4645:	
  8012  1F3A  1003               	clrc
  8013  1F3B  0CA1               	rrf	(___lwmod@divisor+1)^(0+128),f
  8014  1F3C  0CA0               	rrf	___lwmod@divisor^(0+128),f
  8015  1F3D  3EFF               	addlw	-1
  8016  1F3E  1D03               	skipz
  8017  1F3F  2F3A               	goto	u4645
  8018  1F40  3001               	movlw	1
  8019  1F41  02A4               	subwf	___lwmod@counter^(0+128),f
  8020  1F42  1D03               	btfss	3,2
  8021  1F43  2F2B               	goto	l3813
  8022  1F44                     l3821:	
  8023  1F44  0823               	movf	(___lwmod@dividend+1)^(0+128),w
  8024  1F45  00A1               	movwf	(?___lwmod+1)^(0+128)
  8025  1F46  0822               	movf	___lwmod@dividend^(0+128),w
  8026  1F47  00A0               	movwf	?___lwmod^(0+128)
  8027  1F48  0008               	return
  8028  1F49                     __end_of___lwmod:	
  8029                           
  8030                           	psect	text28
  8031  1FC2                     __ptext28:	
  8032 ;; *************** function ___lwdiv *****************
  8033 ;; Defined at:
  8034 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  divisor         2   21[BANK0 ] unsigned int 
  8037 ;;  dividend        2   23[BANK0 ] unsigned int 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  quotient        2   27[BANK0 ] unsigned int 
  8040 ;;  counter         1   26[BANK0 ] unsigned char 
  8041 ;; Return value:  Size  Location     Type
  8042 ;;                  2   21[BANK0 ] unsigned int 
  8043 ;; Registers used:
  8044 ;;		wreg, status,2, status,0
  8045 ;; Tracked objects:
  8046 ;;		On entry : 0/0
  8047 ;;		On exit  : 0/0
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8050 ;;      Params:         0       4       0       0       0
  8051 ;;      Locals:         0       3       0       0       0
  8052 ;;      Temps:          0       1       0       0       0
  8053 ;;      Totals:         0       8       0       0       0
  8054 ;;Total ram usage:        8 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; Hardware stack levels required when called:    4
  8057 ;; This function calls:
  8058 ;;		Nothing
  8059 ;; This function is called by:
  8060 ;;		_sprintf
  8061 ;; This function uses a non-reentrant model
  8062 ;;
  8063                           
  8064                           
  8065                           ;psect for function ___lwdiv
  8066  1FC2                     ___lwdiv:	
  8067                           
  8068                           ;incstack = 0
  8069 ;; hardware stack exceeded
  8070                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8071  1FC2  1283               	bcf	3,5	;RP0=0, select bank0
  8072  1FC3  1303               	bcf	3,6	;RP1=0, select bank0
  8073  1FC4  01BB               	clrf	___lwdiv@quotient
  8074  1FC5  01BC               	clrf	___lwdiv@quotient+1
  8075  1FC6  0835               	movf	___lwdiv@divisor,w
  8076  1FC7  0436               	iorwf	___lwdiv@divisor+1,w
  8077  1FC8  1903               	btfsc	3,2
  8078  1FC9  2FFB               	goto	l3799
  8079  1FCA  01BA               	clrf	___lwdiv@counter
  8080  1FCB  0ABA               	incf	___lwdiv@counter,f
  8081  1FCC                     l3787:	
  8082  1FCC  1BB6               	btfsc	___lwdiv@divisor+1,7
  8083  1FCD  2FDA               	goto	l3789
  8084  1FCE  3001               	movlw	1
  8085  1FCF                     u4545:	
  8086  1FCF  1003               	clrc
  8087  1FD0  0DB5               	rlf	___lwdiv@divisor,f
  8088  1FD1  0DB6               	rlf	___lwdiv@divisor+1,f
  8089  1FD2  3EFF               	addlw	-1
  8090  1FD3  1D03               	skipz
  8091  1FD4  2FCF               	goto	u4545
  8092  1FD5  3001               	movlw	1
  8093  1FD6  00B9               	movwf	??___lwdiv
  8094  1FD7  0839               	movf	??___lwdiv,w
  8095  1FD8  07BA               	addwf	___lwdiv@counter,f
  8096  1FD9  2FCC               	goto	l3787
  8097  1FDA                     l3789:	
  8098  1FDA  3001               	movlw	1
  8099  1FDB                     u4565:	
  8100  1FDB  1003               	clrc
  8101  1FDC  0DBB               	rlf	___lwdiv@quotient,f
  8102  1FDD  0DBC               	rlf	___lwdiv@quotient+1,f
  8103  1FDE  3EFF               	addlw	-1
  8104  1FDF  1D03               	skipz
  8105  1FE0  2FDB               	goto	u4565
  8106  1FE1  0836               	movf	___lwdiv@divisor+1,w
  8107  1FE2  0238               	subwf	___lwdiv@dividend+1,w
  8108  1FE3  1D03               	skipz
  8109  1FE4  2FE7               	goto	u4575
  8110  1FE5  0835               	movf	___lwdiv@divisor,w
  8111  1FE6  0237               	subwf	___lwdiv@dividend,w
  8112  1FE7                     u4575:	
  8113  1FE7  1C03               	skipc
  8114  1FE8  2FF0               	goto	l3795
  8115  1FE9  0835               	movf	___lwdiv@divisor,w
  8116  1FEA  02B7               	subwf	___lwdiv@dividend,f
  8117  1FEB  0836               	movf	___lwdiv@divisor+1,w
  8118  1FEC  1C03               	skipc
  8119  1FED  03B8               	decf	___lwdiv@dividend+1,f
  8120  1FEE  02B8               	subwf	___lwdiv@dividend+1,f
  8121  1FEF  143B               	bsf	___lwdiv@quotient,0
  8122  1FF0                     l3795:	
  8123  1FF0  3001               	movlw	1
  8124  1FF1                     u4585:	
  8125  1FF1  1003               	clrc
  8126  1FF2  0CB6               	rrf	___lwdiv@divisor+1,f
  8127  1FF3  0CB5               	rrf	___lwdiv@divisor,f
  8128  1FF4  3EFF               	addlw	-1
  8129  1FF5  1D03               	skipz
  8130  1FF6  2FF1               	goto	u4585
  8131  1FF7  3001               	movlw	1
  8132  1FF8  02BA               	subwf	___lwdiv@counter,f
  8133  1FF9  1D03               	btfss	3,2
  8134  1FFA  2FDA               	goto	l3789
  8135  1FFB                     l3799:	
  8136  1FFB  083C               	movf	___lwdiv@quotient+1,w
  8137  1FFC  00B6               	movwf	?___lwdiv+1
  8138  1FFD  083B               	movf	___lwdiv@quotient,w
  8139  1FFE  00B5               	movwf	?___lwdiv
  8140  1FFF  0008               	return
  8141  2000                     __end_of___lwdiv:	
  8142                           
  8143                           	psect	text29
  8144  1CB0                     __ptext29:	
  8145 ;; *************** function _sampling *****************
  8146 ;; Defined at:
  8147 ;;		line 377 in file "main.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  2   21[BANK0 ] unsigned int 
  8154 ;; Registers used:
  8155 ;;		wreg
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8161 ;;      Params:         0       2       0       0       0
  8162 ;;      Locals:         0       0       0       0       0
  8163 ;;      Temps:          0       1       0       0       0
  8164 ;;      Totals:         0       3       0       0       0
  8165 ;;Total ram usage:        3 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    4
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_acquire
  8172 ;;		_adReadA0
  8173 ;;		_sys
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function _sampling
  8179  1CB0                     _sampling:	
  8180                           
  8181                           ;main.c: 378: _delay((unsigned long)((100)*(20000000/4000000.0)));
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in _sampling: [wreg]
  8185  1CB0  30A5               	movlw	165
  8186  1CB1  1283               	bcf	3,5	;RP0=0, select bank0
  8187  1CB2  1303               	bcf	3,6	;RP1=0, select bank0
  8188  1CB3  00B7               	movwf	??_sampling
  8189  1CB4                     u5807:	
  8190  1CB4  0BB7               	decfsz	??_sampling,f
  8191  1CB5  2CB4               	goto	u5807
  8192  1CB6  2CB7               	nop2
  8193                           
  8194                           ;main.c: 379: ADCON0bits.GO_nDONE = 1;
  8195  1CB7  1283               	bcf	3,5	;RP0=0, select bank0
  8196  1CB8  1303               	bcf	3,6	;RP1=0, select bank0
  8197  1CB9  151F               	bsf	31,2	;volatile
  8198  1CBA                     l340:	
  8199                           ;main.c: 380: while(ADCON0bits.GO_nDONE){}
  8200                           
  8201  1CBA  191F               	btfsc	31,2	;volatile
  8202  1CBB  2CBA               	goto	l340
  8203                           
  8204                           ;main.c: 381: return (int)(ADRESH << 8) + (ADRESL);
  8205  1CBC  081E               	movf	30,w	;volatile
  8206  1CBD  00B6               	movwf	?_sampling+1
  8207  1CBE  1683               	bsf	3,5	;RP0=1, select bank1
  8208  1CBF  1303               	bcf	3,6	;RP1=0, select bank1
  8209  1CC0  081E               	movf	30,w	;volatile
  8210  1CC1  1283               	bcf	3,5	;RP0=0, select bank0
  8211  1CC2  1303               	bcf	3,6	;RP1=0, select bank0
  8212  1CC3  00B5               	movwf	?_sampling
  8213  1CC4  0008               	return
  8214  1CC5                     __end_of_sampling:	
  8215                           
  8216                           	psect	text30
  8217  1D89                     __ptext30:	
  8218 ;; *************** function _USARTDataAvailable *****************
  8219 ;; Defined at:
  8220 ;;		line 151 in file "usart_pic16.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;		None
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  1    wreg      unsigned char 
  8227 ;; Registers used:
  8228 ;;		wreg, status,2, status,0
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8234 ;;      Params:         0       0       0       0       0
  8235 ;;      Locals:         0       0       0       0       0
  8236 ;;      Temps:          0       1       0       0       0
  8237 ;;      Totals:         0       1       0       0       0
  8238 ;;Total ram usage:        1 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    4
  8241 ;; This function calls:
  8242 ;;		Nothing
  8243 ;; This function is called by:
  8244 ;;		_getData
  8245 ;;		_acquire
  8246 ;;		_sys
  8247 ;;		_USARTFlushBuffer
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           
  8252                           ;psect for function _USARTDataAvailable
  8253  1D89                     _USARTDataAvailable:	
  8254                           
  8255                           ;usart_pic16.c: 153: if(UQFront==-1) return 0;
  8256                           
  8257                           ;incstack = 0
  8258                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
  8259  1D89  1283               	bcf	3,5	;RP0=0, select bank0
  8260  1D8A  1303               	bcf	3,6	;RP1=0, select bank0
  8261  1D8B  0A5A               	incf	_UQFront,w	;volatile
  8262  1D8C  1D03               	btfss	3,2
  8263  1D8D  2D90               	goto	l3839
  8264  1D8E  3000               	movlw	0
  8265  1D8F  0008               	return
  8266  1D90                     l3839:	
  8267                           
  8268                           ;usart_pic16.c: 154: if(UQFront<UQEnd)
  8269  1D90  085A               	movf	_UQFront,w	;volatile
  8270  1D91  3A80               	xorlw	128
  8271  1D92  00B5               	movwf	??_USARTDataAvailable
  8272  1D93  0859               	movf	_UQEnd,w	;volatile
  8273  1D94  3A80               	xorlw	128
  8274  1D95  02B5               	subwf	??_USARTDataAvailable,f
  8275  1D96  1803               	skipnc
  8276  1D97  2D9D               	goto	l3847
  8277                           
  8278                           ;usart_pic16.c: 155: return(UQEnd-UQFront+1);
  8279  1D98  035A               	decf	_UQFront,w	;volatile
  8280  1D99  3AFF               	xorlw	255
  8281  1D9A  0759               	addwf	_UQEnd,w	;volatile
  8282  1D9B  3E01               	addlw	1
  8283  1D9C  0008               	return
  8284  1D9D                     l3847:	
  8285                           
  8286                           ;usart_pic16.c: 156: else if(UQFront>UQEnd)
  8287  1D9D  0859               	movf	_UQEnd,w	;volatile
  8288  1D9E  3A80               	xorlw	128
  8289  1D9F  00B5               	movwf	??_USARTDataAvailable
  8290  1DA0  085A               	movf	_UQFront,w	;volatile
  8291  1DA1  3A80               	xorlw	128
  8292  1DA2  02B5               	subwf	??_USARTDataAvailable,f
  8293  1DA3  1803               	skipnc
  8294  1DA4  2DAA               	goto	l3855
  8295                           
  8296                           ;usart_pic16.c: 157: return (64-UQFront+UQEnd+1);
  8297  1DA5  035A               	decf	_UQFront,w	;volatile
  8298  1DA6  3AFF               	xorlw	255
  8299  1DA7  0759               	addwf	_UQEnd,w	;volatile
  8300  1DA8  3E41               	addlw	65
  8301  1DA9  0008               	return
  8302  1DAA                     l3855:	
  8303                           
  8304                           ;usart_pic16.c: 158: else
  8305                           ;usart_pic16.c: 159: return 1;
  8306  1DAA  3001               	movlw	1
  8307  1DAB  0008               	return
  8308  1DAC                     __end_of_USARTDataAvailable:	
  8309                           
  8310                           	psect	text31
  8311  10A5                     __ptext31:	
  8312 ;; *************** function _memcmp *****************
  8313 ;; Defined at:
  8314 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;  s1              1    wreg     PTR const void 
  8317 ;;		 -> content(25), 
  8318 ;;  s2              2   21[BANK0 ] PTR const void 
  8319 ;;		 -> STR_49(7), STR_48(10), STR_47(9), STR_46(7), 
  8320 ;;		 -> STR_43(5), STR_40(5), STR_36(6), 
  8321 ;;  n               2   23[BANK0 ] unsigned int 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  s1              1   27[BANK0 ] PTR const void 
  8324 ;;		 -> content(25), 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  2   21[BANK0 ] int 
  8327 ;; Registers used:
  8328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8334 ;;      Params:         0       4       0       0       0
  8335 ;;      Locals:         0       1       0       0       0
  8336 ;;      Temps:          0       2       0       0       0
  8337 ;;      Totals:         0       7       0       0       0
  8338 ;;Total ram usage:        7 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    4
  8341 ;; This function calls:
  8342 ;;		Nothing
  8343 ;; This function is called by:
  8344 ;;		_choice
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           
  8349                           ;psect for function _memcmp
  8350  10A5                     _memcmp:	
  8351                           
  8352                           ;incstack = 0
  8353                           ; Regs used in _memcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  8354                           ;memcmp@s1 stored from wreg
  8355  10A5  1283               	bcf	3,5	;RP0=0, select bank0
  8356  10A6  1303               	bcf	3,6	;RP1=0, select bank0
  8357  10A7  00BB               	movwf	memcmp@s1
  8358  10A8                     l854:	
  8359  10A8  3001               	movlw	1
  8360  10A9  02B7               	subwf	memcmp@n,f
  8361  10AA  3000               	movlw	0
  8362  10AB  1C03               	skipc
  8363  10AC  03B8               	decf	memcmp@n+1,f
  8364  10AD  02B8               	subwf	memcmp@n+1,f
  8365  10AE  0A37               	incf	memcmp@n,w
  8366  10AF  1903               	btfsc	3,2
  8367  10B0  0A38               	incf	memcmp@n+1,w
  8368  10B1  1903               	btfsc	3,2
  8369  10B2  28E6               	goto	l4207
  8370  10B3  0836               	movf	memcmp@s2+1,w
  8371  10B4  00FF               	movwf	127
  8372  10B5  0835               	movf	memcmp@s2,w
  8373  10B6  0084               	movwf	4
  8374  10B7  120A  118A  2100  160A  118A  	fcall	stringtab
  8375  10BC  00B9               	movwf	??_memcmp
  8376  10BD  083B               	movf	memcmp@s1,w
  8377  10BE  0084               	movwf	4
  8378  10BF  1383               	bcf	3,7	;select IRP bank0
  8379  10C0  0800               	movf	0,w
  8380  10C1  0639               	xorwf	??_memcmp,w
  8381  10C2  1903               	skipnz
  8382  10C3  28DD               	goto	l4203
  8383  10C4  0836               	movf	memcmp@s2+1,w
  8384  10C5  00FF               	movwf	127
  8385  10C6  0835               	movf	memcmp@s2,w
  8386  10C7  0084               	movwf	4
  8387  10C8  120A  118A  2100   	fcall	stringtab
  8388  10CB  00B9               	movwf	??_memcmp
  8389  10CC  01BA               	clrf	??_memcmp+1
  8390  10CD  09B9               	comf	??_memcmp,f
  8391  10CE  09BA               	comf	??_memcmp+1,f
  8392  10CF  0AB9               	incf	??_memcmp,f
  8393  10D0  1903               	skipnz
  8394  10D1  0ABA               	incf	??_memcmp+1,f
  8395  10D2  083B               	movf	memcmp@s1,w
  8396  10D3  0084               	movwf	4
  8397  10D4  1383               	bcf	3,7	;select IRP bank0
  8398  10D5  0800               	movf	0,w
  8399  10D6  0739               	addwf	??_memcmp,w
  8400  10D7  00B5               	movwf	?_memcmp
  8401  10D8  083A               	movf	??_memcmp+1,w
  8402  10D9  1803               	skipnc
  8403  10DA  0A3A               	incf	??_memcmp+1,w
  8404  10DB  00B6               	movwf	?_memcmp+1
  8405  10DC  0008               	return
  8406  10DD                     l4203:	
  8407  10DD  3001               	movlw	1
  8408  10DE  00B9               	movwf	??_memcmp
  8409  10DF  0839               	movf	??_memcmp,w
  8410  10E0  07BB               	addwf	memcmp@s1,f
  8411  10E1  3001               	movlw	1
  8412  10E2  07B5               	addwf	memcmp@s2,f
  8413  10E3  1803               	skipnc
  8414  10E4  0AB6               	incf	memcmp@s2+1,f
  8415  10E5  28A8               	goto	l854
  8416  10E6                     l4207:	
  8417  10E6  01B5               	clrf	?_memcmp
  8418  10E7  01B6               	clrf	?_memcmp+1
  8419  10E8  0008               	return
  8420  10E9                     __end_of_memcmp:	
  8421                           
  8422                           	psect	text32
  8423  0A32                     __ptext32:	
  8424 ;; *************** function _help *****************
  8425 ;; Defined at:
  8426 ;;		line 147 in file "main.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;		None
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;		None
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  1    wreg      void 
  8433 ;; Registers used:
  8434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8440 ;;      Params:         0       0       0       0       0
  8441 ;;      Locals:         0       0       0       0       0
  8442 ;;      Temps:          0       0       0       0       0
  8443 ;;      Totals:         0       0       0       0       0
  8444 ;;Total ram usage:        0 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    7
  8447 ;; This function calls:
  8448 ;;		_USARTGotoNewLine
  8449 ;;		_USARTWriteLine
  8450 ;; This function is called by:
  8451 ;;		_main
  8452 ;;		_choice
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           
  8457                           ;psect for function _help
  8458  0A32                     _help:	
  8459                           
  8460                           ;main.c: 149: USARTWriteLine("**********************************************************
      +                          **********************************");
  8461                           
  8462                           ;incstack = 0
  8463                           ; Regs used in _help: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8464  0A32  301D               	movlw	low ((STR_35+1)| (0+32768))
  8465  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  8466  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  8467  0A35  00B8               	movwf	USARTWriteLine@str
  8468  0A36  3081               	movlw	high ((STR_35+1)| (0+32768))
  8469  0A37  00B9               	movwf	USARTWriteLine@str+1
  8470  0A38  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8471                           
  8472                           ;main.c: 150: USARTWriteLine("        Welcome to the Inverted Pendulum Plant!");
  8473  0A3D  30CD               	movlw	low (STR_3| (0+32768))
  8474  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  8475  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  8476  0A40  00B8               	movwf	USARTWriteLine@str
  8477  0A41  3083               	movlw	high (STR_3| (0+32768))
  8478  0A42  00B9               	movwf	USARTWriteLine@str+1
  8479  0A43  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8480                           
  8481                           ;main.c: 151: USARTWriteLine("        To operate the system, type on options in below.")
      +                          ;
  8482  0A48  305C               	movlw	low (STR_4| (0+32768))
  8483  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  8484  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  8485  0A4B  00B8               	movwf	USARTWriteLine@str
  8486  0A4C  3083               	movlw	high (STR_4| (0+32768))
  8487  0A4D  00B9               	movwf	USARTWriteLine@str+1
  8488  0A4E  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8489                           
  8490                           ;main.c: 152: USARTGotoNewLine();
  8491  0A53  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8492                           
  8493                           ;main.c: 153: USARTWriteLine("        Example 0:");
  8494  0A58  3027               	movlw	low (STR_5| (0+32768))
  8495  0A59  1283               	bcf	3,5	;RP0=0, select bank0
  8496  0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  8497  0A5B  00B8               	movwf	USARTWriteLine@str
  8498  0A5C  3085               	movlw	high (STR_5| (0+32768))
  8499  0A5D  00B9               	movwf	USARTWriteLine@str+1
  8500  0A5E  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8501                           
  8502                           ;main.c: 154: USARTWriteLine("        If you want give a step with 100% of duty-cycle, u
      +                          ntil you type anything, type:");
  8503  0A63  307A               	movlw	low (STR_6| (0+32768))
  8504  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  8505  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  8506  0A66  00B8               	movwf	USARTWriteLine@str
  8507  0A67  3081               	movlw	high (STR_6| (0+32768))
  8508  0A68  00B9               	movwf	USARTWriteLine@str+1
  8509  0A69  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8510                           
  8511                           ;main.c: 155: USARTWriteLine("        step()");
  8512  0A6E  30F7               	movlw	low (STR_7| (0+32768))
  8513  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  8514  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  8515  0A71  00B8               	movwf	USARTWriteLine@str
  8516  0A72  3085               	movlw	high (STR_7| (0+32768))
  8517  0A73  00B9               	movwf	USARTWriteLine@str+1
  8518  0A74  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8519                           
  8520                           ;main.c: 156: USARTGotoNewLine();
  8521  0A79  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8522                           
  8523                           ;main.c: 157: USARTWriteLine("        Example 1:");
  8524  0A7E  303A               	movlw	low (STR_8| (0+32768))
  8525  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  8526  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  8527  0A81  00B8               	movwf	USARTWriteLine@str
  8528  0A82  3085               	movlw	high (STR_8| (0+32768))
  8529  0A83  00B9               	movwf	USARTWriteLine@str+1
  8530  0A84  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8531                           
  8532                           ;main.c: 158: USARTWriteLine("        If you want give a step with 100% of duty-cycle, f
      +                          or 200 milliseconds, type:");
  8533  0A89  30D2               	movlw	low (STR_9| (0+32768))
  8534  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  8535  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  8536  0A8C  00B8               	movwf	USARTWriteLine@str
  8537  0A8D  3081               	movlw	high (STR_9| (0+32768))
  8538  0A8E  00B9               	movwf	USARTWriteLine@str+1
  8539  0A8F  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8540                           
  8541                           ;main.c: 159: USARTWriteLine("        step(200)");
  8542  0A94  30E5               	movlw	low (STR_10| (0+32768))
  8543  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  8544  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  8545  0A97  00B8               	movwf	USARTWriteLine@str
  8546  0A98  3085               	movlw	high (STR_10| (0+32768))
  8547  0A99  00B9               	movwf	USARTWriteLine@str+1
  8548  0A9A  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8549                           
  8550                           ;main.c: 160: USARTGotoNewLine();
  8551  0A9F  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8552                           
  8553                           ;main.c: 161: USARTWriteLine("        Example 2:");
  8554  0AA4  304D               	movlw	low (STR_11| (0+32768))
  8555  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  8556  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  8557  0AA7  00B8               	movwf	USARTWriteLine@str
  8558  0AA8  3085               	movlw	high (STR_11| (0+32768))
  8559  0AA9  00B9               	movwf	USARTWriteLine@str+1
  8560  0AAA  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8561                           
  8562                           ;main.c: 162: USARTWriteLine("        If you want give a step with 50% of duty-cycle,for
      +                           300 milliseconds, type:");
  8563  0AAF  3027               	movlw	low (STR_12| (0+32768))
  8564  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  8565  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  8566  0AB2  00B8               	movwf	USARTWriteLine@str
  8567  0AB3  3082               	movlw	high (STR_12| (0+32768))
  8568  0AB4  00B9               	movwf	USARTWriteLine@str+1
  8569  0AB5  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8570                           
  8571                           ;main.c: 163: USARTWriteLine("        step(50,300)");
  8572  0ABA  30B3               	movlw	low (STR_13| (0+32768))
  8573  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  8574  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  8575  0ABD  00B8               	movwf	USARTWriteLine@str
  8576  0ABE  3084               	movlw	high (STR_13| (0+32768))
  8577  0ABF  00B9               	movwf	USARTWriteLine@str+1
  8578  0AC0  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8579                           
  8580                           ;main.c: 164: USARTGotoNewLine();
  8581  0AC5  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8582                           
  8583                           ;main.c: 165: USARTWriteLine("        Example 3:");
  8584  0ACA  3060               	movlw	low (STR_14| (0+32768))
  8585  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  8586  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  8587  0ACD  00B8               	movwf	USARTWriteLine@str
  8588  0ACE  3085               	movlw	high (STR_14| (0+32768))
  8589  0ACF  00B9               	movwf	USARTWriteLine@str+1
  8590  0AD0  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8591                           
  8592                           ;main.c: 166: USARTWriteLine("        If you want operate the system continually with 10
      +                          0% of duty-cycle, type:");
  8593  0AD5  307A               	movlw	low (STR_15| (0+32768))
  8594  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  8595  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  8596  0AD8  00B8               	movwf	USARTWriteLine@str
  8597  0AD9  3082               	movlw	high (STR_15| (0+32768))
  8598  0ADA  00B9               	movwf	USARTWriteLine@str+1
  8599  0ADB  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8600                           
  8601                           ;main.c: 167: USARTWriteLine("        run()     ");
  8602  0AE0  30C8               	movlw	low (STR_16| (0+32768))
  8603  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  8604  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  8605  0AE3  00B8               	movwf	USARTWriteLine@str
  8606  0AE4  3084               	movlw	high (STR_16| (0+32768))
  8607  0AE5  00B9               	movwf	USARTWriteLine@str+1
  8608  0AE6  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8609                           
  8610                           ;main.c: 168: USARTGotoNewLine();
  8611  0AEB  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8612                           
  8613                           ;main.c: 169: USARTWriteLine("        Example 4:");
  8614  0AF0  3073               	movlw	low (STR_17| (0+32768))
  8615  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  8616  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  8617  0AF3  00B8               	movwf	USARTWriteLine@str
  8618  0AF4  3085               	movlw	high (STR_17| (0+32768))
  8619  0AF5  00B9               	movwf	USARTWriteLine@str+1
  8620  0AF6  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8621                           
  8622                           ;main.c: 170: USARTWriteLine("        If you want to identify the system parsing a RBS s
      +                          inal, type:");
  8623  0AFB  3016               	movlw	low (STR_18| (0+32768))
  8624  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  8625  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  8626  0AFE  00B8               	movwf	USARTWriteLine@str
  8627  0AFF  3083               	movlw	high (STR_18| (0+32768))
  8628  0B00  00B9               	movwf	USARTWriteLine@str+1
  8629  0B01  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8630                           
  8631                           ;main.c: 171: USARTWriteLine("        sys(max_duty_cicle)");
  8632  0B06  3066               	movlw	low (STR_19| (0+32768))
  8633  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  8634  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  8635  0B09  00B8               	movwf	USARTWriteLine@str
  8636  0B0A  3084               	movlw	high (STR_19| (0+32768))
  8637  0B0B  00B9               	movwf	USARTWriteLine@str+1
  8638  0B0C  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8639                           
  8640                           ;main.c: 172: USARTGotoNewLine();
  8641  0B11  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8642                           
  8643                           ;main.c: 173: USARTWriteLine("        Example 5:");
  8644  0B16  3086               	movlw	low (STR_20| (0+32768))
  8645  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  8646  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  8647  0B19  00B8               	movwf	USARTWriteLine@str
  8648  0B1A  3085               	movlw	high (STR_20| (0+32768))
  8649  0B1B  00B9               	movwf	USARTWriteLine@str+1
  8650  0B1C  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8651                           
  8652                           ;main.c: 174: USARTWriteLine("        If you want a help, type:");
  8653  0B21  3028               	movlw	low (STR_21| (0+32768))
  8654  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  8655  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  8656  0B24  00B8               	movwf	USARTWriteLine@str
  8657  0B25  3084               	movlw	high (STR_21| (0+32768))
  8658  0B26  00B9               	movwf	USARTWriteLine@str+1
  8659  0B27  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8660                           
  8661                           ;main.c: 175: USARTWriteLine("        help()    ");
  8662  0B2C  30DB               	movlw	low (STR_22| (0+32768))
  8663  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  8664  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  8665  0B2F  00B8               	movwf	USARTWriteLine@str
  8666  0B30  3084               	movlw	high (STR_22| (0+32768))
  8667  0B31  00B9               	movwf	USARTWriteLine@str+1
  8668  0B32  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8669                           
  8670                           ;main.c: 176: USARTGotoNewLine();
  8671  0B37  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8672                           
  8673                           ;main.c: 177: USARTWriteLine("        Example 6:");
  8674  0B3C  3099               	movlw	low (STR_23| (0+32768))
  8675  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  8676  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  8677  0B3F  00B8               	movwf	USARTWriteLine@str
  8678  0B40  3085               	movlw	high (STR_23| (0+32768))
  8679  0B41  00B9               	movwf	USARTWriteLine@str+1
  8680  0B42  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8681                           
  8682                           ;main.c: 178: USARTWriteLine("        If you want stop the system, type:");
  8683  0B47  30FD               	movlw	low (STR_24| (0+32768))
  8684  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  8685  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  8686  0B4A  00B8               	movwf	USARTWriteLine@str
  8687  0B4B  3083               	movlw	high (STR_24| (0+32768))
  8688  0B4C  00B9               	movwf	USARTWriteLine@str+1
  8689  0B4D  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8690                           
  8691                           ;main.c: 179: USARTWriteLine("        stop()    ");
  8692  0B52  30EE               	movlw	low (STR_25| (0+32768))
  8693  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  8694  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  8695  0B55  00B8               	movwf	USARTWriteLine@str
  8696  0B56  3084               	movlw	high (STR_25| (0+32768))
  8697  0B57  00B9               	movwf	USARTWriteLine@str+1
  8698  0B58  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8699                           
  8700                           ;main.c: 180: USARTGotoNewLine();
  8701  0B5D  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8702                           
  8703                           ;main.c: 181: USARTWriteLine("        Example 7:");
  8704  0B62  30AC               	movlw	low (STR_26| (0+32768))
  8705  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  8706  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  8707  0B65  00B8               	movwf	USARTWriteLine@str
  8708  0B66  3085               	movlw	high (STR_26| (0+32768))
  8709  0B67  00B9               	movwf	USARTWriteLine@str+1
  8710  0B68  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8711                           
  8712                           ;main.c: 182: USARTWriteLine("        If you want acquire the data obtained by sensors o
      +                          f system, type:");
  8713  0B6D  30CC               	movlw	low (STR_27| (0+32768))
  8714  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  8715  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  8716  0B70  00B8               	movwf	USARTWriteLine@str
  8717  0B71  3082               	movlw	high (STR_27| (0+32768))
  8718  0B72  00B9               	movwf	USARTWriteLine@str+1
  8719  0B73  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8720                           
  8721                           ;main.c: 183: USARTWriteLine("        acquire() ");
  8722  0B78  3014               	movlw	low (STR_28| (0+32768))
  8723  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  8724  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  8725  0B7B  00B8               	movwf	USARTWriteLine@str
  8726  0B7C  3085               	movlw	high (STR_28| (0+32768))
  8727  0B7D  00B9               	movwf	USARTWriteLine@str+1
  8728  0B7E  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8729                           
  8730                           ;main.c: 184: USARTWriteLine("        Example 8:");
  8731  0B83  30BF               	movlw	low (STR_29| (0+32768))
  8732  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  8733  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  8734  0B86  00B8               	movwf	USARTWriteLine@str
  8735  0B87  3085               	movlw	high (STR_29| (0+32768))
  8736  0B88  00B9               	movwf	USARTWriteLine@str+1
  8737  0B89  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8738                           
  8739                           ;main.c: 185: USARTWriteLine("        If you want to know the status of system, type:");
  8740  0B8E  3095               	movlw	low (STR_30| (0+32768))
  8741  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  8742  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  8743  0B91  00B8               	movwf	USARTWriteLine@str
  8744  0B92  3083               	movlw	high (STR_30| (0+32768))
  8745  0B93  00B9               	movwf	USARTWriteLine@str+1
  8746  0B94  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8747                           
  8748                           ;main.c: 186: USARTWriteLine("        status()  ");
  8749  0B99  3001               	movlw	low (STR_31| (0+32768))
  8750  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  8751  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  8752  0B9C  00B8               	movwf	USARTWriteLine@str
  8753  0B9D  3085               	movlw	high (STR_31| (0+32768))
  8754  0B9E  00B9               	movwf	USARTWriteLine@str+1
  8755  0B9F  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8756                           
  8757                           ;main.c: 187: USARTGotoNewLine();
  8758  0BA4  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8759                           
  8760                           ;main.c: 188: USARTWriteLine("        Example 9:");
  8761  0BA9  30D2               	movlw	low (STR_32| (0+32768))
  8762  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  8763  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  8764  0BAC  00B8               	movwf	USARTWriteLine@str
  8765  0BAD  3085               	movlw	high (STR_32| (0+32768))
  8766  0BAE  00B9               	movwf	USARTWriteLine@str+1
  8767  0BAF  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8768                           
  8769                           ;main.c: 189: USARTWriteLine("        If you want a help, type:");
  8770  0BB4  3028               	movlw	low (STR_21| (0+32768))
  8771  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  8772  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  8773  0BB7  00B8               	movwf	USARTWriteLine@str
  8774  0BB8  3084               	movlw	high (STR_21| (0+32768))
  8775  0BB9  00B9               	movwf	USARTWriteLine@str+1
  8776  0BBA  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8777                           
  8778                           ;main.c: 190: USARTWriteLine("        help()    ");
  8779  0BBF  30DB               	movlw	low (STR_22| (0+32768))
  8780  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  8781  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  8782  0BC2  00B8               	movwf	USARTWriteLine@str
  8783  0BC3  3084               	movlw	high (STR_22| (0+32768))
  8784  0BC4  00B9               	movwf	USARTWriteLine@str+1
  8785  0BC5  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8786                           
  8787                           ;main.c: 191: USARTWriteLine("**********************************************************
      +                          ***********************************");
  8788  0BCA  301C               	movlw	low (STR_35| (0+32768))
  8789  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  8790  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  8791  0BCD  00B8               	movwf	USARTWriteLine@str
  8792  0BCE  3081               	movlw	high (STR_35| (0+32768))
  8793  0BCF  00B9               	movwf	USARTWriteLine@str+1
  8794  0BD0  160A  158A  24C5  120A  158A  	fcall	_USARTWriteLine
  8795                           
  8796                           ;main.c: 192: USARTGotoNewLine();
  8797  0BD5  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8798                           
  8799                           ;main.c: 193: USARTGotoNewLine();
  8800  0BDA  120A  158A  2001   	fcall	_USARTGotoNewLine
  8801  0BDD  0008               	return
  8802  0BDE                     __end_of_help:	
  8803                           
  8804                           	psect	text33
  8805  1CC5                     __ptext33:	
  8806 ;; *************** function _USARTWriteLine *****************
  8807 ;; Defined at:
  8808 ;;		line 87 in file "usart_pic16.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  str             2   24[BANK0 ] PTR const unsigned char 
  8811 ;;		 -> STR_72(7), STR_71(35), status@output(25), STR_57(7), 
  8812 ;;		 -> STR_56(35), STR_55(7), STR_54(35), strBuffer(25), 
  8813 ;;		 -> STR_50(28), STR_35(94), STR_34(19), STR_33(34), 
  8814 ;;		 -> STR_32(19), STR_31(19), STR_30(56), STR_29(19), 
  8815 ;;		 -> STR_28(19), STR_27(74), STR_26(19), STR_25(19), 
  8816 ;;		 -> STR_24(43), STR_23(19), STR_22(19), STR_21(34), 
  8817 ;;		 -> STR_20(19), STR_19(28), STR_18(70), STR_17(19), 
  8818 ;;		 -> STR_16(19), STR_15(82), STR_14(19), STR_13(21), 
  8819 ;;		 -> STR_12(83), STR_11(19), STR_10(18), STR_9(85), 
  8820 ;;		 -> STR_8(19), STR_7(15), STR_6(88), STR_5(19), 
  8821 ;;		 -> STR_4(57), STR_3(48), STR_2(93), 
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;		None
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      void 
  8826 ;; Registers used:
  8827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8833 ;;      Params:         0       2       0       0       0
  8834 ;;      Locals:         0       0       0       0       0
  8835 ;;      Temps:          0       0       0       0       0
  8836 ;;      Totals:         0       2       0       0       0
  8837 ;;Total ram usage:        2 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    6
  8840 ;; This function calls:
  8841 ;;		_USARTWriteChar
  8842 ;;		_USARTWriteString
  8843 ;; This function is called by:
  8844 ;;		_help
  8845 ;;		_choice
  8846 ;;		_step
  8847 ;;		_run
  8848 ;;		_status
  8849 ;;		_sys
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           
  8854                           ;psect for function _USARTWriteLine
  8855  1CC5                     _USARTWriteLine:	
  8856                           
  8857                           ;usart_pic16.c: 89: USARTWriteChar('\r');
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in _USARTWriteLine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8861  1CC5  300D               	movlw	13
  8862  1CC6  160A  158A  245E  160A  158A  	fcall	_USARTWriteChar
  8863                           
  8864                           ;usart_pic16.c: 90: USARTWriteChar('\n');
  8865  1CCB  300A               	movlw	10
  8866  1CCC  160A  158A  245E  160A  158A  	fcall	_USARTWriteChar
  8867                           
  8868                           ;usart_pic16.c: 92: USARTWriteString(str);
  8869  1CD1  1283               	bcf	3,5	;RP0=0, select bank0
  8870  1CD2  1303               	bcf	3,6	;RP1=0, select bank0
  8871  1CD3  0838               	movf	USARTWriteLine@str,w
  8872  1CD4  00B6               	movwf	USARTWriteString@str
  8873  1CD5  0839               	movf	USARTWriteLine@str+1,w
  8874  1CD6  00B7               	movwf	USARTWriteString@str+1
  8875  1CD7  160A  158A  25F3   	fcall	_USARTWriteString
  8876  1CDA  0008               	return
  8877  1CDB                     __end_of_USARTWriteLine:	
  8878                           
  8879                           	psect	text34
  8880  1DF3                     __ptext34:	
  8881 ;; *************** function _USARTWriteString *****************
  8882 ;; Defined at:
  8883 ;;		line 78 in file "usart_pic16.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  str             2   22[BANK0 ] PTR const unsigned char 
  8886 ;;		 -> STR_72(7), STR_71(35), STR_69(8), STR_67(9), 
  8887 ;;		 -> STR_65(9), STR_63(22), STR_61(22), status@output(25), 
  8888 ;;		 -> STR_57(7), STR_56(35), STR_55(7), STR_54(35), 
  8889 ;;		 -> strBuffer(25), STR_51(2), STR_50(28), STR_35(94), 
  8890 ;;		 -> STR_34(19), STR_33(34), STR_32(19), STR_31(19), 
  8891 ;;		 -> STR_30(56), STR_29(19), STR_28(19), STR_27(74), 
  8892 ;;		 -> STR_26(19), STR_25(19), STR_24(43), STR_23(19), 
  8893 ;;		 -> STR_22(19), STR_21(34), STR_20(19), STR_19(28), 
  8894 ;;		 -> STR_18(70), STR_17(19), STR_16(19), STR_15(82), 
  8895 ;;		 -> STR_14(19), STR_13(21), STR_12(83), STR_11(19), 
  8896 ;;		 -> STR_10(18), STR_9(85), STR_8(19), STR_7(15), 
  8897 ;;		 -> STR_6(88), STR_5(19), STR_4(57), STR_3(48), 
  8898 ;;		 -> STR_2(93), STR_1(2), 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8910 ;;      Params:         0       2       0       0       0
  8911 ;;      Locals:         0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0
  8913 ;;      Totals:         0       2       0       0       0
  8914 ;;Total ram usage:        2 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    5
  8917 ;; This function calls:
  8918 ;;		_USARTWriteChar
  8919 ;; This function is called by:
  8920 ;;		_USARTWriteLine
  8921 ;;		_main
  8922 ;;		_choice
  8923 ;;		_acquire
  8924 ;;		_adReadA0
  8925 ;;		_sys
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function _USARTWriteString
  8931  1DF3                     _USARTWriteString:	
  8932  1DF3                     l3831:	
  8933                           ;usart_pic16.c: 80: while(*str!='\0')
  8934                           
  8935                           ;incstack = 0
  8936 ;; using string table level
  8937                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8938                           
  8939  1DF3  1283               	bcf	3,5	;RP0=0, select bank0
  8940  1DF4  1303               	bcf	3,6	;RP1=0, select bank0
  8941  1DF5  0837               	movf	USARTWriteString@str+1,w
  8942  1DF6  00FF               	movwf	127
  8943  1DF7  0836               	movf	USARTWriteString@str,w
  8944  1DF8  0084               	movwf	4
  8945  1DF9  120A  118A  2100  160A  158A  	fcall	stringtab
  8946  1DFE  3A00               	xorlw	0
  8947  1DFF  1903               	btfsc	3,2
  8948  1E00  0008               	return
  8949                           
  8950                           ;usart_pic16.c: 81: {
  8951                           ;usart_pic16.c: 82: USARTWriteChar(*str);
  8952  1E01  1283               	bcf	3,5	;RP0=0, select bank0
  8953  1E02  1303               	bcf	3,6	;RP1=0, select bank0
  8954  1E03  0837               	movf	USARTWriteString@str+1,w
  8955  1E04  00FF               	movwf	127
  8956  1E05  0836               	movf	USARTWriteString@str,w
  8957  1E06  0084               	movwf	4
  8958  1E07  120A  118A  2100  160A  158A  	fcall	stringtab
  8959  1E0C  160A  158A  245E  160A  158A  	fcall	_USARTWriteChar
  8960                           
  8961                           ;usart_pic16.c: 83: str++;
  8962  1E11  3001               	movlw	1
  8963  1E12  1283               	bcf	3,5	;RP0=0, select bank0
  8964  1E13  1303               	bcf	3,6	;RP1=0, select bank0
  8965  1E14  07B6               	addwf	USARTWriteString@str,f
  8966  1E15  1803               	skipnc
  8967  1E16  0AB7               	incf	USARTWriteString@str+1,f
  8968  1E17  2DF3               	goto	l3831
  8969  1E18                     __end_of_USARTWriteString:	
  8970                           
  8971                           	psect	text35
  8972  0801                     __ptext35:	
  8973 ;; *************** function _USARTGotoNewLine *****************
  8974 ;; Defined at:
  8975 ;;		line 202 in file "usart_pic16.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      void 
  8982 ;; Registers used:
  8983 ;;		wreg, status,2, status,0, pclath, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8989 ;;      Params:         0       0       0       0       0
  8990 ;;      Locals:         0       0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0
  8992 ;;      Totals:         0       0       0       0       0
  8993 ;;Total ram usage:        0 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    5
  8996 ;; This function calls:
  8997 ;;		_USARTWriteChar
  8998 ;; This function is called by:
  8999 ;;		_help
  9000 ;;		_choice
  9001 ;;		_status
  9002 ;;		_acquire
  9003 ;;		_sys
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           
  9008                           ;psect for function _USARTGotoNewLine
  9009  0801                     _USARTGotoNewLine:	
  9010                           
  9011                           ;usart_pic16.c: 204: USARTWriteChar('\r');
  9012                           
  9013                           ;incstack = 0
  9014                           ; Regs used in _USARTGotoNewLine: [wreg+status,2+status,0+pclath+cstack]
  9015  0801  300D               	movlw	13
  9016  0802  160A  158A  245E  120A  158A  	fcall	_USARTWriteChar
  9017                           
  9018                           ;usart_pic16.c: 205: USARTWriteChar('\n');
  9019  0807  300A               	movlw	10
  9020  0808  160A  158A  245E   	fcall	_USARTWriteChar
  9021  080B  0008               	return
  9022  080C                     __end_of_USARTGotoNewLine:	
  9023                           
  9024                           	psect	text36
  9025  1C5E                     __ptext36:	
  9026 ;; *************** function _USARTWriteChar *****************
  9027 ;; Defined at:
  9028 ;;		line 71 in file "usart_pic16.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;  ch              1    wreg     unsigned char 
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;  ch              1   21[BANK0 ] unsigned char 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  1    wreg      void 
  9035 ;; Registers used:
  9036 ;;		wreg
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9042 ;;      Params:         0       0       0       0       0
  9043 ;;      Locals:         0       1       0       0       0
  9044 ;;      Temps:          0       0       0       0       0
  9045 ;;      Totals:         0       1       0       0       0
  9046 ;;Total ram usage:        1 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    4
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_USARTWriteString
  9053 ;;		_USARTWriteLine
  9054 ;;		_USARTGotoNewLine
  9055 ;;		_getData
  9056 ;;		_USARTWriteInt
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           
  9061                           ;psect for function _USARTWriteChar
  9062  1C5E                     _USARTWriteChar:	
  9063                           
  9064                           ;incstack = 0
  9065                           ; Regs used in _USARTWriteChar: [wreg]
  9066                           ;USARTWriteChar@ch stored from wreg
  9067  1C5E  1283               	bcf	3,5	;RP0=0, select bank0
  9068  1C5F  1303               	bcf	3,6	;RP1=0, select bank0
  9069  1C60  00B5               	movwf	USARTWriteChar@ch
  9070  1C61                     l38:	
  9071                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
  9072                           
  9073  1C61  1E0C               	btfss	12,4	;volatile
  9074  1C62  2C61               	goto	l38
  9075                           
  9076                           ;usart_pic16.c: 75: TXREG=ch;
  9077  1C63  0835               	movf	USARTWriteChar@ch,w
  9078  1C64  0099               	movwf	25	;volatile
  9079  1C65  0008               	return
  9080  1C66                     __end_of_USARTWriteChar:	
  9081                           
  9082                           	psect	text37
  9083  136C                     __ptext37:	
  9084 ;; *************** function _atoi *****************
  9085 ;; Defined at:
  9086 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  s               1    wreg     PTR const unsigned char 
  9089 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  s               1   34[BANK0 ] PTR const unsigned char 
  9092 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  9093 ;;  a               2   32[BANK0 ] int 
  9094 ;;  sign            1   31[BANK0 ] unsigned char 
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  2   27[BANK0 ] int 
  9097 ;; Registers used:
  9098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9104 ;;      Params:         0       2       0       0       0
  9105 ;;      Locals:         0       4       0       0       0
  9106 ;;      Temps:          0       2       0       0       0
  9107 ;;      Totals:         0       8       0       0       0
  9108 ;;Total ram usage:        8 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    5
  9111 ;; This function calls:
  9112 ;;		___wmul
  9113 ;;		_isdigit
  9114 ;; This function is called by:
  9115 ;;		_choice
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _atoi
  9121  136C                     _atoi:	
  9122                           
  9123                           ;incstack = 0
  9124                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9125                           ;atoi@s stored from wreg
  9126  136C  1283               	bcf	3,5	;RP0=0, select bank0
  9127  136D  1303               	bcf	3,6	;RP1=0, select bank0
  9128  136E  00C2               	movwf	atoi@s
  9129  136F                     l4235:	
  9130  136F  0842               	movf	atoi@s,w
  9131  1370  0084               	movwf	4
  9132  1371  3020               	movlw	32
  9133  1372  1783               	bsf	3,7	;select IRP bank2
  9134  1373  0600               	xorwf	0,w
  9135  1374  1D03               	btfss	3,2
  9136  1375  2B7B               	goto	l4237
  9137  1376                     l4233:	
  9138  1376  3001               	movlw	1
  9139  1377  00BD               	movwf	??_atoi
  9140  1378  083D               	movf	??_atoi,w
  9141  1379  07C2               	addwf	atoi@s,f
  9142  137A  2B6F               	goto	l4235
  9143  137B                     l4237:	
  9144  137B  0842               	movf	atoi@s,w
  9145  137C  0084               	movwf	4
  9146  137D  3009               	movlw	9
  9147  137E  0600               	xorwf	0,w
  9148  137F  1903               	btfsc	3,2
  9149  1380  2B76               	goto	l4233
  9150  1381  01C0               	clrf	atoi@a
  9151  1382  01C1               	clrf	atoi@a+1
  9152  1383  01BF               	clrf	atoi@sign
  9153  1384  0842               	movf	atoi@s,w
  9154  1385  0084               	movwf	4
  9155  1386  302D               	movlw	45
  9156  1387  0600               	xorwf	0,w
  9157  1388  1D03               	btfss	3,2
  9158  1389  2B8F               	goto	l4245
  9159  138A  3001               	movlw	1
  9160  138B  00BD               	movwf	??_atoi
  9161  138C  083D               	movf	??_atoi,w
  9162  138D  07BF               	addwf	atoi@sign,f
  9163  138E  2B95               	goto	l4251
  9164  138F                     l4245:	
  9165  138F  0842               	movf	atoi@s,w
  9166  1390  0084               	movwf	4
  9167  1391  302B               	movlw	43
  9168  1392  0600               	xorwf	0,w
  9169  1393  1D03               	btfss	3,2
  9170  1394  2B99               	goto	l4253
  9171  1395                     l4251:	
  9172  1395  3001               	movlw	1
  9173  1396  00BD               	movwf	??_atoi
  9174  1397  083D               	movf	??_atoi,w
  9175  1398  07C2               	addwf	atoi@s,f
  9176  1399                     l4253:	
  9177  1399  0842               	movf	atoi@s,w
  9178  139A  0084               	movwf	4
  9179  139B  0800               	movf	0,w
  9180  139C  160A  158A  248F  160A  118A  	fcall	_isdigit
  9181  13A1  1C03               	btfss	3,0
  9182  13A2  2BC7               	goto	l4255
  9183  13A3  1283               	bcf	3,5	;RP0=0, select bank0
  9184  13A4  1303               	bcf	3,6	;RP1=0, select bank0
  9185  13A5  0841               	movf	atoi@a+1,w
  9186  13A6  00B6               	movwf	___wmul@multiplier+1
  9187  13A7  0840               	movf	atoi@a,w
  9188  13A8  00B5               	movwf	___wmul@multiplier
  9189  13A9  300A               	movlw	10
  9190  13AA  00B7               	movwf	___wmul@multiplicand
  9191  13AB  3000               	movlw	0
  9192  13AC  00B8               	movwf	___wmul@multiplicand+1
  9193  13AD  160A  158A  2566  160A  118A  	fcall	___wmul
  9194  13B2  1283               	bcf	3,5	;RP0=0, select bank0
  9195  13B3  1303               	bcf	3,6	;RP1=0, select bank0
  9196  13B4  0842               	movf	atoi@s,w
  9197  13B5  0084               	movwf	4
  9198  13B6  1783               	bsf	3,7	;select IRP bank2
  9199  13B7  0800               	movf	0,w
  9200  13B8  0735               	addwf	?___wmul,w
  9201  13B9  00BD               	movwf	??_atoi
  9202  13BA  0836               	movf	?___wmul+1,w
  9203  13BB  1803               	skipnc
  9204  13BC  0A36               	incf	?___wmul+1,w
  9205  13BD  00BE               	movwf	??_atoi+1
  9206  13BE  083D               	movf	??_atoi,w
  9207  13BF  3ED0               	addlw	208
  9208  13C0  00C0               	movwf	atoi@a
  9209  13C1  083E               	movf	??_atoi+1,w
  9210  13C2  1803               	skipnc
  9211  13C3  3E01               	addlw	1
  9212  13C4  3EFF               	addlw	255
  9213  13C5  00C1               	movwf	atoi@a+1
  9214  13C6  2B95               	goto	l4251
  9215  13C7                     l4255:	
  9216  13C7  1283               	bcf	3,5	;RP0=0, select bank0
  9217  13C8  1303               	bcf	3,6	;RP1=0, select bank0
  9218  13C9  083F               	movf	atoi@sign,w
  9219  13CA  1903               	btfsc	3,2
  9220  13CB  2BD8               	goto	l4261
  9221  13CC  0940               	comf	atoi@a,w
  9222  13CD  00BD               	movwf	??_atoi
  9223  13CE  0941               	comf	atoi@a+1,w
  9224  13CF  00BE               	movwf	??_atoi+1
  9225  13D0  0ABD               	incf	??_atoi,f
  9226  13D1  1903               	skipnz
  9227  13D2  0ABE               	incf	??_atoi+1,f
  9228  13D3  083D               	movf	??_atoi,w
  9229  13D4  00BB               	movwf	?_atoi
  9230  13D5  083E               	movf	??_atoi+1,w
  9231  13D6  00BC               	movwf	?_atoi+1
  9232  13D7  0008               	return
  9233  13D8                     l4261:	
  9234  13D8  0841               	movf	atoi@a+1,w
  9235  13D9  00BC               	movwf	?_atoi+1
  9236  13DA  0840               	movf	atoi@a,w
  9237  13DB  00BB               	movwf	?_atoi
  9238  13DC  0008               	return
  9239  13DD                     __end_of_atoi:	
  9240                           
  9241                           	psect	text38
  9242  1C8F                     __ptext38:	
  9243 ;; *************** function _isdigit *****************
  9244 ;; Defined at:
  9245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  c               1    wreg     unsigned char 
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  c               1   22[BANK0 ] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9259 ;;      Params:         0       0       0       0       0
  9260 ;;      Locals:         0       2       0       0       0
  9261 ;;      Temps:          0       0       0       0       0
  9262 ;;      Totals:         0       2       0       0       0
  9263 ;;Total ram usage:        2 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    4
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_atoi
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           
  9274                           ;psect for function _isdigit
  9275  1C8F                     _isdigit:	
  9276                           
  9277                           ;incstack = 0
  9278                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9279                           ;isdigit@c stored from wreg
  9280  1C8F  1283               	bcf	3,5	;RP0=0, select bank0
  9281  1C90  1303               	bcf	3,6	;RP1=0, select bank0
  9282  1C91  00B6               	movwf	isdigit@c
  9283  1C92  01B5               	clrf	_isdigit$823
  9284  1C93  303A               	movlw	58
  9285  1C94  0236               	subwf	isdigit@c,w
  9286  1C95  1803               	skipnc
  9287  1C96  2C9D               	goto	l4039
  9288  1C97  3030               	movlw	48
  9289  1C98  0236               	subwf	isdigit@c,w
  9290  1C99  1C03               	skipc
  9291  1C9A  2C9D               	goto	l4039
  9292  1C9B  01B5               	clrf	_isdigit$823
  9293  1C9C  0AB5               	incf	_isdigit$823,f
  9294  1C9D                     l4039:	
  9295  1C9D  0C35               	rrf	_isdigit$823,w
  9296  1C9E  0008               	return
  9297  1C9F                     __end_of_isdigit:	
  9298                           
  9299                           	psect	text39
  9300  1D66                     __ptext39:	
  9301 ;; *************** function ___wmul *****************
  9302 ;; Defined at:
  9303 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;  multiplier      2   21[BANK0 ] unsigned int 
  9306 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  product         2   25[BANK0 ] unsigned int 
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  2   21[BANK0 ] unsigned int 
  9311 ;; Registers used:
  9312 ;;		wreg, status,2, status,0
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9318 ;;      Params:         0       4       0       0       0
  9319 ;;      Locals:         0       2       0       0       0
  9320 ;;      Temps:          0       0       0       0       0
  9321 ;;      Totals:         0       6       0       0       0
  9322 ;;Total ram usage:        6 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    4
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_sys
  9329 ;;		_atoi
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           
  9334                           ;psect for function ___wmul
  9335  1D66                     ___wmul:	
  9336                           
  9337                           ;incstack = 0
  9338                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9339  1D66  1283               	bcf	3,5	;RP0=0, select bank0
  9340  1D67  1303               	bcf	3,6	;RP1=0, select bank0
  9341  1D68  01B9               	clrf	___wmul@product
  9342  1D69  01BA               	clrf	___wmul@product+1
  9343  1D6A                     l4019:	
  9344  1D6A  1C35               	btfss	___wmul@multiplier,0
  9345  1D6B  2D72               	goto	l477
  9346  1D6C  0837               	movf	___wmul@multiplicand,w
  9347  1D6D  07B9               	addwf	___wmul@product,f
  9348  1D6E  1803               	skipnc
  9349  1D6F  0ABA               	incf	___wmul@product+1,f
  9350  1D70  0838               	movf	___wmul@multiplicand+1,w
  9351  1D71  07BA               	addwf	___wmul@product+1,f
  9352  1D72                     l477:	
  9353  1D72  3001               	movlw	1
  9354  1D73                     u4935:	
  9355  1D73  1003               	clrc
  9356  1D74  0DB7               	rlf	___wmul@multiplicand,f
  9357  1D75  0DB8               	rlf	___wmul@multiplicand+1,f
  9358  1D76  3EFF               	addlw	-1
  9359  1D77  1D03               	skipz
  9360  1D78  2D73               	goto	u4935
  9361  1D79  3001               	movlw	1
  9362  1D7A                     u4945:	
  9363  1D7A  1003               	clrc
  9364  1D7B  0CB6               	rrf	___wmul@multiplier+1,f
  9365  1D7C  0CB5               	rrf	___wmul@multiplier,f
  9366  1D7D  3EFF               	addlw	-1
  9367  1D7E  1D03               	skipz
  9368  1D7F  2D7A               	goto	u4945
  9369  1D80  0835               	movf	___wmul@multiplier,w
  9370  1D81  0436               	iorwf	___wmul@multiplier+1,w
  9371  1D82  1D03               	btfss	3,2
  9372  1D83  2D6A               	goto	l4019
  9373  1D84  083A               	movf	___wmul@product+1,w
  9374  1D85  00B6               	movwf	?___wmul+1
  9375  1D86  0839               	movf	___wmul@product,w
  9376  1D87  00B5               	movwf	?___wmul
  9377  1D88  0008               	return
  9378  1D89                     __end_of___wmul:	
  9379                           
  9380                           	psect	text40
  9381  1D43                     __ptext40:	
  9382 ;; *************** function _USARTReadData *****************
  9383 ;; Defined at:
  9384 ;;		line 124 in file "usart_pic16.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;		None
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;  data            1   22[BANK0 ] unsigned char 
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  1    wreg      unsigned char 
  9391 ;; Registers used:
  9392 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9398 ;;      Params:         0       0       0       0       0
  9399 ;;      Locals:         0       1       0       0       0
  9400 ;;      Temps:          0       1       0       0       0
  9401 ;;      Totals:         0       2       0       0       0
  9402 ;;Total ram usage:        2 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    4
  9405 ;; This function calls:
  9406 ;;		Nothing
  9407 ;; This function is called by:
  9408 ;;		_getData
  9409 ;;		_USARTReadBuffer
  9410 ;;		_USARTFlushBuffer
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function _USARTReadData
  9416  1D43                     _USARTReadData:	
  9417                           
  9418                           ;usart_pic16.c: 126: char data;
  9419                           ;usart_pic16.c: 129: if(UQFront==-1)
  9420                           
  9421                           ;incstack = 0
  9422                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  9423  1D43  1283               	bcf	3,5	;RP0=0, select bank0
  9424  1D44  1303               	bcf	3,6	;RP1=0, select bank0
  9425  1D45  0A5A               	incf	_UQFront,w	;volatile
  9426  1D46  1D03               	btfss	3,2
  9427  1D47  2D4A               	goto	l3061
  9428                           
  9429                           ;usart_pic16.c: 130: return 0;
  9430  1D48  3000               	movlw	0
  9431  1D49  0008               	return
  9432  1D4A                     l3061:	
  9433                           
  9434                           ;usart_pic16.c: 132: data=URBuff[UQFront];
  9435  1D4A  085A               	movf	_UQFront,w
  9436  1D4B  3E10               	addlw	(low (_URBuff| (0+256)))& (0+255)
  9437  1D4C  0084               	movwf	4
  9438  1D4D  1783               	bsf	3,7	;select IRP bank2
  9439  1D4E  0800               	movf	0,w
  9440  1D4F  00B5               	movwf	??_USARTReadData
  9441  1D50  0835               	movf	??_USARTReadData,w
  9442  1D51  00B6               	movwf	USARTReadData@data
  9443                           
  9444                           ;usart_pic16.c: 134: if(UQFront==UQEnd)
  9445  1D52  085A               	movf	_UQFront,w	;volatile
  9446  1D53  0659               	xorwf	_UQEnd,w	;volatile
  9447  1D54  1D03               	skipz
  9448  1D55  2D5C               	goto	l3067
  9449                           
  9450                           ;usart_pic16.c: 135: {
  9451                           ;usart_pic16.c: 138: UQFront=UQEnd=-1;
  9452  1D56  30FF               	movlw	255
  9453  1D57  00D9               	movwf	_UQEnd	;volatile
  9454  1D58  00B5               	movwf	??_USARTReadData
  9455  1D59  0835               	movf	??_USARTReadData,w
  9456  1D5A  00DA               	movwf	_UQFront	;volatile
  9457                           
  9458                           ;usart_pic16.c: 139: }
  9459  1D5B  2D64               	goto	l3071
  9460  1D5C                     l3067:	
  9461                           
  9462                           ;usart_pic16.c: 140: else
  9463                           ;usart_pic16.c: 141: {
  9464                           ;usart_pic16.c: 142: UQFront++;
  9465  1D5C  3001               	movlw	1
  9466  1D5D  00B5               	movwf	??_USARTReadData
  9467  1D5E  0835               	movf	??_USARTReadData,w
  9468  1D5F  07DA               	addwf	_UQFront,f	;volatile
  9469                           
  9470                           ;usart_pic16.c: 144: if(UQFront==64)
  9471  1D60  3040               	movlw	64
  9472  1D61  065A               	xorwf	_UQFront,w	;volatile
  9473  1D62  1903               	btfsc	3,2
  9474                           
  9475                           ;usart_pic16.c: 145: UQFront=0;
  9476  1D63  01DA               	clrf	_UQFront	;volatile
  9477  1D64                     l3071:	
  9478                           
  9479                           ;usart_pic16.c: 146: }
  9480                           ;usart_pic16.c: 148: return data;
  9481  1D64  0836               	movf	USARTReadData@data,w
  9482  1D65  0008               	return
  9483  1D66                     __end_of_USARTReadData:	
  9484                           
  9485                           	psect	text41
  9486  1176                     __ptext41:	
  9487 ;; *************** function _USARTInit *****************
  9488 ;; Defined at:
  9489 ;;		line 31 in file "usart_pic16.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  baud_rate       2   21[BANK0 ] unsigned int 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;		None
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  1    wreg      void 
  9496 ;; Registers used:
  9497 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9503 ;;      Params:         0       2       0       0       0
  9504 ;;      Locals:         0       0       0       0       0
  9505 ;;      Temps:          0       1       0       0       0
  9506 ;;      Totals:         0       3       0       0       0
  9507 ;;Total ram usage:        3 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    4
  9510 ;; This function calls:
  9511 ;;		Nothing
  9512 ;; This function is called by:
  9513 ;;		_main
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           
  9518                           ;psect for function _USARTInit
  9519  1176                     _USARTInit:	
  9520                           
  9521                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
  9522                           
  9523                           ;incstack = 0
  9524                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  9525  1176  30FF               	movlw	255
  9526  1177  1283               	bcf	3,5	;RP0=0, select bank0
  9527  1178  1303               	bcf	3,6	;RP1=0, select bank0
  9528  1179  00D9               	movwf	_UQEnd	;volatile
  9529  117A  00B7               	movwf	??_USARTInit
  9530  117B  0837               	movf	??_USARTInit,w
  9531  117C  00DA               	movwf	_UQFront	;volatile
  9532                           
  9533                           ;usart_pic16.c: 37: switch(baud_rate)
  9534  117D  2989               	goto	l3285
  9535  117E                     l3275:	
  9536                           ;usart_pic16.c: 38: {
  9537                           ;usart_pic16.c: 39: case 9600:
  9538                           
  9539                           
  9540                           ;usart_pic16.c: 40: SPBRG=129;
  9541  117E  3081               	movlw	129
  9542  117F  2985               	goto	L4
  9543  1180                     l3277:	
  9544                           ;usart_pic16.c: 42: case 19200:
  9545                           
  9546                           ;usart_pic16.c: 41: break;
  9547                           
  9548                           
  9549                           ;usart_pic16.c: 43: SPBRG=64;
  9550  1180  3040               	movlw	64
  9551  1181  2985               	goto	L4
  9552  1182                     l3279:	
  9553                           ;usart_pic16.c: 45: case 28800:
  9554                           
  9555                           ;usart_pic16.c: 44: break;
  9556                           
  9557                           
  9558                           ;usart_pic16.c: 46: SPBRG=42;
  9559  1182  302A               	movlw	42
  9560  1183  2985               	goto	L4
  9561  1184                     l3281:	
  9562                           ;usart_pic16.c: 48: case 33600:
  9563                           
  9564                           ;usart_pic16.c: 47: break;
  9565                           
  9566                           
  9567                           ;usart_pic16.c: 49: SPBRG=36;
  9568  1184  3024               	movlw	36
  9569  1185                     L4:	
  9570  1185  1683               	bsf	3,5	;RP0=1, select bank1
  9571  1186  1303               	bcf	3,6	;RP1=0, select bank1
  9572  1187  0099               	movwf	25	;volatile
  9573                           
  9574                           ;usart_pic16.c: 51: }
  9575                           
  9576                           ;usart_pic16.c: 50: break;
  9577  1188  29AC               	goto	l31
  9578  1189                     l3285:	
  9579                           
  9580                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  9581                           ; Switch size 1, requested type "space"
  9582                           ; Number of cases is 4, Range of values is 37 to 131
  9583                           ; switch strategies available:
  9584                           ; Name         Instructions Cycles
  9585                           ; simple_byte           13     7 (average)
  9586                           ; jumptable            263     9 (fixed)
  9587                           ;	Chosen strategy is simple_byte
  9588  1189  1283               	bcf	3,5	;RP0=0, select bank0
  9589  118A  0836               	movf	USARTInit@baud_rate+1,w
  9590  118B  3A25               	xorlw	37	; case 37
  9591  118C  1903               	skipnz
  9592  118D  2998               	goto	l4719
  9593  118E  3A6E               	xorlw	110	; case 75
  9594  118F  1903               	skipnz
  9595  1190  299D               	goto	l4721
  9596  1191  3A3B               	xorlw	59	; case 112
  9597  1192  1903               	skipnz
  9598  1193  29A2               	goto	l4723
  9599  1194  3AF3               	xorlw	243	; case 131
  9600  1195  1903               	skipnz
  9601  1196  29A7               	goto	l4725
  9602  1197  29AC               	goto	l31
  9603  1198                     l4719:	
  9604                           
  9605                           ; Switch size 1, requested type "space"
  9606                           ; Number of cases is 1, Range of values is 128 to 128
  9607                           ; switch strategies available:
  9608                           ; Name         Instructions Cycles
  9609                           ; simple_byte            4     3 (average)
  9610                           ; direct_byte           14    11 (fixed)
  9611                           ; jumptable            263     9 (fixed)
  9612                           ;	Chosen strategy is simple_byte
  9613  1198  0835               	movf	USARTInit@baud_rate,w
  9614  1199  3A80               	xorlw	128	; case 128
  9615  119A  1903               	skipnz
  9616  119B  297E               	goto	l3275
  9617  119C  29AC               	goto	l31
  9618  119D                     l4721:	
  9619                           
  9620                           ; Switch size 1, requested type "space"
  9621                           ; Number of cases is 1, Range of values is 0 to 0
  9622                           ; switch strategies available:
  9623                           ; Name         Instructions Cycles
  9624                           ; simple_byte            4     3 (average)
  9625                           ; direct_byte           11     8 (fixed)
  9626                           ; jumptable            260     6 (fixed)
  9627                           ;	Chosen strategy is simple_byte
  9628  119D  0835               	movf	USARTInit@baud_rate,w
  9629  119E  3A00               	xorlw	0	; case 0
  9630  119F  1903               	skipnz
  9631  11A0  2980               	goto	l3277
  9632  11A1  29AC               	goto	l31
  9633  11A2                     l4723:	
  9634                           
  9635                           ; Switch size 1, requested type "space"
  9636                           ; Number of cases is 1, Range of values is 128 to 128
  9637                           ; switch strategies available:
  9638                           ; Name         Instructions Cycles
  9639                           ; simple_byte            4     3 (average)
  9640                           ; direct_byte           14    11 (fixed)
  9641                           ; jumptable            263     9 (fixed)
  9642                           ;	Chosen strategy is simple_byte
  9643  11A2  0835               	movf	USARTInit@baud_rate,w
  9644  11A3  3A80               	xorlw	128	; case 128
  9645  11A4  1903               	skipnz
  9646  11A5  2982               	goto	l3279
  9647  11A6  29AC               	goto	l31
  9648  11A7                     l4725:	
  9649                           
  9650                           ; Switch size 1, requested type "space"
  9651                           ; Number of cases is 1, Range of values is 64 to 64
  9652                           ; switch strategies available:
  9653                           ; Name         Instructions Cycles
  9654                           ; simple_byte            4     3 (average)
  9655                           ; direct_byte           14    11 (fixed)
  9656                           ; jumptable            263     9 (fixed)
  9657                           ;	Chosen strategy is simple_byte
  9658  11A7  0835               	movf	USARTInit@baud_rate,w
  9659  11A8  3A40               	xorlw	64	; case 64
  9660  11A9  1903               	skipnz
  9661  11AA  2984               	goto	l3281
  9662  11AB  29AC               	goto	l31
  9663  11AC                     l31:	
  9664                           
  9665                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
  9666  11AC  1683               	bsf	3,5	;RP0=1, select bank1
  9667  11AD  1303               	bcf	3,6	;RP1=0, select bank1
  9668  11AE  1318               	bcf	24,6	;volatile
  9669                           
  9670                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
  9671  11AF  1698               	bsf	24,5	;volatile
  9672                           
  9673                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
  9674  11B0  1218               	bcf	24,4	;volatile
  9675                           
  9676                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
  9677  11B1  1518               	bsf	24,2	;volatile
  9678                           
  9679                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
  9680  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  9681  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  9682  11B4  1798               	bsf	24,7	;volatile
  9683                           
  9684                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
  9685  11B5  1318               	bcf	24,6	;volatile
  9686                           
  9687                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
  9688  11B6  1618               	bsf	24,4	;volatile
  9689                           
  9690                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
  9691  11B7  1198               	bcf	24,3	;volatile
  9692                           
  9693                           ;usart_pic16.c: 65: RCIE=1;
  9694  11B8  1683               	bsf	3,5	;RP0=1, select bank1
  9695  11B9  1303               	bcf	3,6	;RP1=0, select bank1
  9696  11BA  168C               	bsf	12,5	;volatile
  9697                           
  9698                           ;usart_pic16.c: 66: PEIE=1;
  9699  11BB  170B               	bsf	11,6	;volatile
  9700                           
  9701                           ;usart_pic16.c: 68: (GIE = 1);
  9702  11BC  178B               	bsf	11,7	;volatile
  9703  11BD  0008               	return
  9704  11BE                     __end_of_USARTInit:	
  9705                           
  9706                           	psect	text42
  9707  10E9                     __ptext42:	
  9708 ;; *************** function _ISR *****************
  9709 ;; Defined at:
  9710 ;;		line 96 in file "main.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;		None
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;                  1    wreg      void 
  9717 ;; Registers used:
  9718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9724 ;;      Params:         0       0       0       0       0
  9725 ;;      Locals:         0       0       0       0       0
  9726 ;;      Temps:          0       5       0       0       0
  9727 ;;      Totals:         0       5       0       0       0
  9728 ;;Total ram usage:        5 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    3
  9731 ;; This function calls:
  9732 ;;		_USARTHandleRxInt
  9733 ;;		i1_acquire
  9734 ;; This function is called by:
  9735 ;;		Interrupt level 1
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _ISR
  9741  10E9                     _ISR:	
  9742                           
  9743                           ;main.c: 98: if (RCIE && RCIF) {
  9744  10E9  1683               	bsf	3,5	;RP0=1, select bank1
  9745  10EA  1303               	bcf	3,6	;RP1=0, select bank1
  9746  10EB  1E8C               	btfss	12,5	;volatile
  9747  10EC  28F7               	goto	i1l252
  9748  10ED  1283               	bcf	3,5	;RP0=0, select bank0
  9749  10EE  1303               	bcf	3,6	;RP1=0, select bank0
  9750  10EF  1E8C               	btfss	12,5	;volatile
  9751  10F0  28F7               	goto	i1l252
  9752                           
  9753                           ;main.c: 99: USARTHandleRxInt();
  9754  10F1  160A  118A  21BE  160A  118A  	fcall	_USARTHandleRxInt
  9755                           
  9756                           ;main.c: 100: return;
  9757  10F6  2922               	goto	i1l253
  9758  10F7                     i1l252:	
  9759                           
  9760                           ;main.c: 101: }
  9761                           ;main.c: 103: if(INTCONbits.TMR0IF){
  9762  10F7  1D0B               	btfss	11,2	;volatile
  9763  10F8  291A               	goto	i1l4617
  9764                           
  9765                           ;main.c: 104: INTCONbits.TMR0IF = 0;
  9766  10F9  110B               	bcf	11,2	;volatile
  9767                           
  9768                           ;main.c: 105: count++;
  9769  10FA  3001               	movlw	1
  9770  10FB  1283               	bcf	3,5	;RP0=0, select bank0
  9771  10FC  07D1               	addwf	_count,f
  9772  10FD  1803               	skipnc
  9773  10FE  0AD2               	incf	_count+1,f
  9774  10FF  3000               	movlw	0
  9775  1100  07D2               	addwf	_count+1,f
  9776                           
  9777                           ;main.c: 106: if(count>=max_counters && stepEnable){
  9778  1101  0852               	movf	_count+1,w
  9779  1102  3A80               	xorlw	128
  9780  1103  00B0               	movwf	??_ISR
  9781  1104  0850               	movf	_max_counters+1,w
  9782  1105  3A80               	xorlw	128
  9783  1106  0230               	subwf	??_ISR,w
  9784  1107  1D03               	skipz
  9785  1108  290B               	goto	u577_25
  9786  1109  084F               	movf	_max_counters,w
  9787  110A  0251               	subwf	_count,w
  9788  110B                     u577_25:	
  9789  110B  1C03               	skipc
  9790  110C  291A               	goto	i1l4617
  9791  110D  1283               	bcf	3,5	;RP0=0, select bank0
  9792  110E  1303               	bcf	3,6	;RP1=0, select bank0
  9793  110F  0853               	movf	_stepEnable,w
  9794  1110  1903               	btfsc	3,2
  9795  1111  291A               	goto	i1l4617
  9796                           
  9797                           ;main.c: 107: CCPR1L = 0b00000000;
  9798  1112  0195               	clrf	21	;volatile
  9799                           
  9800                           ;main.c: 108: CCPR2L = 0b00000000;
  9801  1113  019B               	clrf	27	;volatile
  9802                           
  9803                           ;main.c: 109: CCP1CONbits.CCP1Y = 0b00000000;
  9804  1114  1217               	bcf	23,4	;volatile
  9805                           
  9806                           ;main.c: 110: CCP1CONbits.CCP1X = 0b00000000;
  9807  1115  1297               	bcf	23,5	;volatile
  9808                           
  9809                           ;main.c: 111: CCP2CONbits.CCP2Y = 0b00000000;
  9810  1116  121D               	bcf	29,4	;volatile
  9811                           
  9812                           ;main.c: 112: CCP2CONbits.CCP2X = 0b00000000;
  9813  1117  129D               	bcf	29,5	;volatile
  9814                           
  9815                           ;main.c: 113: acquirement = 0;
  9816  1118  01D8               	clrf	_acquirement
  9817                           
  9818                           ;main.c: 114: stepEnable = 0;
  9819  1119  01D3               	clrf	_stepEnable
  9820  111A                     i1l4617:	
  9821                           
  9822                           ;main.c: 115: }
  9823                           ;main.c: 116: }
  9824                           ;main.c: 118: if(INTCONbits.INTF){
  9825  111A  1C8B               	btfss	11,1	;volatile
  9826  111B  2922               	goto	i1l253
  9827                           
  9828                           ;main.c: 119: INTCONbits.INTF = 0;
  9829  111C  108B               	bcf	11,1	;volatile
  9830                           
  9831                           ;main.c: 120: acquire();
  9832  111D  160A  118A  2207  160A  118A  	fcall	i1_acquire
  9833  1122                     i1l253:	
  9834  1122  1283               	bcf	3,5	;RP0=0, select bank0
  9835  1123  1303               	bcf	3,6	;RP1=0, select bank0
  9836  1124  0834               	movf	??_ISR+4,w
  9837  1125  00FF               	movwf	127
  9838  1126  0833               	movf	??_ISR+3,w
  9839  1127  008A               	movwf	10
  9840  1128  0832               	movf	??_ISR+2,w
  9841  1129  0084               	movwf	4
  9842  112A  0E31               	swapf	(??_ISR+1)^0,w
  9843  112B  0083               	movwf	3
  9844  112C  0EFE               	swapf	126,f
  9845  112D  0E7E               	swapf	126,w
  9846  112E  0009               	retfie
  9847  112F                     __end_of_ISR:	
  9848                           
  9849                           	psect	intentry
  9850  0004                     __pintentry:	
  9851                           ;incstack = 0
  9852 ;; hardware stack exceeded
  9853                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9854                           
  9855  0004                     interrupt_function:	
  9856  007E                     saved_w	set	btemp
  9857  0004  00FE               	movwf	btemp
  9858  0005  0E03               	swapf	3,w
  9859  0006  1283               	bcf	3,5	;RP0=0, select bank0
  9860  0007  1303               	bcf	3,6	;RP1=0, select bank0
  9861  0008  00B1               	movwf	??_ISR+1
  9862  0009  0804               	movf	4,w
  9863  000A  00B2               	movwf	??_ISR+2
  9864  000B  080A               	movf	10,w
  9865  000C  00B3               	movwf	??_ISR+3
  9866  000D  087F               	movf	btemp+1,w
  9867  000E  00B4               	movwf	??_ISR+4
  9868  000F  160A  118A  28E9   	ljmp	_ISR
  9869                           
  9870                           	psect	text43
  9871  1207                     __ptext43:	
  9872 ;; *************** function i1_acquire *****************
  9873 ;; Defined at:
  9874 ;;		line 384 in file "main.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  acquire         2   14[BANK0 ] unsigned int 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  1    wreg      void 
  9881 ;; Registers used:
  9882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9888 ;;      Params:         0       0       0       0       0
  9889 ;;      Locals:         0       2       0       0       0
  9890 ;;      Temps:          0       0       0       0       0
  9891 ;;      Totals:         0       2       0       0       0
  9892 ;;Total ram usage:        2 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    2
  9895 ;; This function calls:
  9896 ;;		i1_USARTDataAvailable
  9897 ;;		i1_USARTGotoNewLine
  9898 ;;		i1_USARTWriteString
  9899 ;;		i1_sampling
  9900 ;;		i1_sprintf
  9901 ;; This function is called by:
  9902 ;;		_ISR
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function i1_acquire
  9908  1207                     i1_acquire:	
  9909                           
  9910                           ;main.c: 385: USARTGotoNewLine();
  9911                           
  9912                           ;incstack = 0
  9913 ;; hardware stack exceeded
  9914                           ; Regs used in i1_acquire: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9915  1207  160A  158A  2477  160A  118A  	fcall	i1_USARTGotoNewLine
  9916                           
  9917                           ;main.c: 386: acquirement = 1;
  9918  120C  1283               	bcf	3,5	;RP0=0, select bank0
  9919  120D  1303               	bcf	3,6	;RP1=0, select bank0
  9920  120E  01D8               	clrf	_acquirement
  9921  120F  0AD8               	incf	_acquirement,f
  9922  1210                     i1l4531:	
  9923                           ;main.c: 387: while(USARTDataAvailable() == 0 &&acquirement){
  9924                           
  9925  1210  160A  158A  24FD  160A  118A  	fcall	i1_USARTDataAvailable
  9926  1215  3A00               	xorlw	0
  9927  1216  1D03               	skipz
  9928  1217  0008               	return
  9929  1218  1283               	bcf	3,5	;RP0=0, select bank0
  9930  1219  1303               	bcf	3,6	;RP1=0, select bank0
  9931  121A  0858               	movf	_acquirement,w
  9932  121B  1903               	btfsc	3,2
  9933  121C  0008               	return
  9934                           
  9935                           ;main.c: 388: unsigned int valueAD = sampling();
  9936  121D  160A  158A  249F  160A  118A  	fcall	i1_sampling
  9937  1222  0871               	movf	?i1_sampling+1,w
  9938  1223  1283               	bcf	3,5	;RP0=0, select bank0
  9939  1224  1303               	bcf	3,6	;RP1=0, select bank0
  9940  1225  00AF               	movwf	i1acquire@valueAD+1
  9941  1226  0870               	movf	?i1_sampling,w
  9942  1227  00AE               	movwf	i1acquire@valueAD
  9943                           
  9944                           ;main.c: 389: if(valueAD<=1023 && valueAD >= 0){
  9945  1228  3004               	movlw	4
  9946  1229  022F               	subwf	i1acquire@valueAD+1,w
  9947  122A  3000               	movlw	0
  9948  122B  1903               	skipnz
  9949  122C  022E               	subwf	i1acquire@valueAD,w
  9950  122D  1803               	skipnc
  9951  122E  2A10               	goto	i1l4531
  9952                           
  9953                           ;main.c: 390: USARTWriteString("The analog value is: ");
  9954  122F  309D               	movlw	low (STR_61| (0+32768))
  9955  1230  00F1               	movwf	i1USARTWriteString@str
  9956  1231  3084               	movlw	high (STR_61| (0+32768))
  9957  1232  00F2               	movwf	i1USARTWriteString@str+1
  9958  1233  160A  158A  2520  160A  118A  	fcall	i1_USARTWriteString
  9959                           
  9960                           ;main.c: 391: sprintf(strBuffer,"%d",valueAD);
  9961  1238  3051               	movlw	low (STR_52| (0+32768))
  9962  1239  1283               	bcf	3,5	;RP0=0, select bank0
  9963  123A  1303               	bcf	3,6	;RP1=0, select bank0
  9964  123B  00A0               	movwf	i1sprintf@f
  9965  123C  3086               	movlw	high (STR_52| (0+32768))
  9966  123D  00A1               	movwf	i1sprintf@f+1
  9967  123E  082F               	movf	i1acquire@valueAD+1,w
  9968  123F  00A3               	movwf	?i1_sprintf+3
  9969  1240  082E               	movf	i1acquire@valueAD,w
  9970  1241  00A2               	movwf	?i1_sprintf+2
  9971  1242  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  9972  1243  160A  118A  24FE  160A  118A  	fcall	i1_sprintf
  9973                           
  9974                           ;main.c: 392: USARTWriteString(strBuffer);
  9975  1248  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  9976  1249  00F1               	movwf	i1USARTWriteString@str
  9977  124A  3001               	movlw	1
  9978  124B  00F2               	movwf	i1USARTWriteString@str+1
  9979  124C  160A  158A  2520  160A  118A  	fcall	i1_USARTWriteString
  9980                           
  9981                           ;main.c: 393: USARTGotoNewLine();
  9982  1251  160A  158A  2477  160A  118A  	fcall	i1_USARTGotoNewLine
  9983  1256  2A10               	goto	i1l4531
  9984  1257                     __end_ofi1_acquire:	
  9985                           
  9986                           	psect	text44
  9987  14FE                     __ptext44:	
  9988 ;; *************** function i1_sprintf *****************
  9989 ;; Defined at:
  9990 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  sp              1    wreg     PTR unsigned char 
  9993 ;;		 -> strBuffer(25), 
  9994 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9995 ;;		 -> STR_70(3), STR_68(3), STR_66(3), STR_64(3), 
  9996 ;;		 -> STR_62(3), STR_59(3), STR_53(3), STR_52(3), 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;  sp              1   12[BANK0 ] PTR unsigned char 
  9999 ;;		 -> strBuffer(25), 
 10000 ;;  sprintf         4    0        struct .
 10001 ;;  sprintf         2   10[BANK0 ] unsigned int 
 10002 ;;  sprintf         2    0        PTR const unsigned char 
 10003 ;;  sprintf         2    0        unsigned int 
 10004 ;;  sprintf         1   13[BANK0 ] char 
 10005 ;;  sprintf         1    9[BANK0 ] char 
 10006 ;;  sprintf         1    8[BANK0 ] unsigned char 
 10007 ;;  sprintf         1    7[BANK0 ] PTR void [1]
 10008 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  2    0[BANK0 ] int 
 10011 ;; Registers used:
 10012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10018 ;;      Params:         0       4       0       0       0
 10019 ;;      Locals:         0       7       0       0       0
 10020 ;;      Temps:          0       3       0       0       0
 10021 ;;      Totals:         0      14       0       0       0
 10022 ;;Total ram usage:       14 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    1
 10025 ;; This function calls:
 10026 ;;		i1___lwdiv
 10027 ;;		i1___lwmod
 10028 ;; This function is called by:
 10029 ;;		i1_acquire
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function i1_sprintf
 10035  14FE                     i1_sprintf:	
 10036                           
 10037                           ;incstack = 0
 10038 ;; hardware stack exceeded
 10039                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10040                           ;i1sprintf@sp stored from wreg
 10041  14FE  1283               	bcf	3,5	;RP0=0, select bank0
 10042  14FF  1303               	bcf	3,6	;RP1=0, select bank0
 10043  1500  00AC               	movwf	i1sprintf@sp
 10044                           
 10045                           ;doprnt.c: 494: va_list ap;
 10046                           ;doprnt.c: 499: signed char c;
 10047                           ;doprnt.c: 506: signed char prec;
 10048                           ;doprnt.c: 508: unsigned char flag;
 10049                           ;doprnt.c: 523: union {
 10050                           ;doprnt.c: 524: unsigned long vd;
 10051                           ;doprnt.c: 525: double integ;
 10052                           ;doprnt.c: 526: } tmpval;
 10053                           ;doprnt.c: 528: unsigned int val;
 10054                           ;doprnt.c: 529: unsigned len;
 10055                           ;doprnt.c: 530: const char * cp;
 10056                           ;doprnt.c: 533: *ap = __va_start();
 10057  1501  3022               	movlw	(low ((?i1_sprintf| 0+2)))& (0+255)
 10058  1502  00A4               	movwf	??i1_sprintf
 10059  1503  0824               	movf	??i1_sprintf,w
 10060  1504  00A7               	movwf	i1sprintf@ap
 10061  1505                     i1l3267:	
 10062                           ;doprnt.c: 536: while(c = *f++) {
 10063                           
 10064  1505  0821               	movf	i1sprintf@f+1,w
 10065  1506  00A5               	movwf	??i1_sprintf+1
 10066  1507  0820               	movf	i1sprintf@f,w
 10067  1508  00A4               	movwf	??i1_sprintf
 10068  1509  0AA0               	incf	i1sprintf@f,f
 10069  150A  1903               	skipnz
 10070  150B  0AA1               	incf	i1sprintf@f+1,f
 10071  150C  0825               	movf	??i1_sprintf+1,w
 10072  150D  00FF               	movwf	127
 10073  150E  0824               	movf	??i1_sprintf,w
 10074  150F  0084               	movwf	4
 10075  1510  120A  118A  2100  160A  118A  	fcall	stringtab
 10076  1515  00A6               	movwf	??i1_sprintf+2
 10077  1516  0826               	movf	??i1_sprintf+2,w
 10078  1517  00AD               	movwf	i1sprintf@c
 10079  1518  082D               	movf	i1sprintf@c,w
 10080  1519  1903               	btfsc	3,2
 10081  151A  2DE1               	goto	i1l3269
 10082                           
 10083                           ;doprnt.c: 538: if(c != '%')
 10084  151B  3025               	movlw	37
 10085  151C  062D               	xorwf	i1sprintf@c,w
 10086  151D  1903               	btfsc	3,2
 10087  151E  2D2B               	goto	i1l3223
 10088                           
 10089                           ;doprnt.c: 540: {
 10090                           ;doprnt.c: 541: ((*sp++ = (c)));
 10091  151F  082D               	movf	i1sprintf@c,w
 10092  1520  00A4               	movwf	??i1_sprintf
 10093  1521  082C               	movf	i1sprintf@sp,w
 10094  1522  0084               	movwf	4
 10095  1523  0824               	movf	??i1_sprintf,w
 10096  1524  1783               	bsf	3,7	;select IRP bank2
 10097  1525  0080               	movwf	0
 10098  1526  3001               	movlw	1
 10099  1527  00A4               	movwf	??i1_sprintf
 10100  1528  0824               	movf	??i1_sprintf,w
 10101  1529  07AC               	addwf	i1sprintf@sp,f
 10102                           
 10103                           ;doprnt.c: 542: continue;
 10104  152A  2D05               	goto	i1l3267
 10105  152B                     i1l3223:	
 10106                           
 10107                           ;doprnt.c: 543: }
 10108                           ;doprnt.c: 548: flag = 0;
 10109  152B  01A8               	clrf	i1sprintf@flag
 10110                           
 10111                           ;doprnt.c: 822: }
 10112                           
 10113                           ;doprnt.c: 813: continue;
 10114                           
 10115                           ;doprnt.c: 802: default:
 10116                           
 10117                           ;doprnt.c: 698: case 'i':
 10118                           ;doprnt.c: 699: break;
 10119                           
 10120                           ;doprnt.c: 697: case 'd':
 10121                           
 10122                           ;doprnt.c: 638: goto alldone;
 10123                           
 10124                           ;doprnt.c: 637: case 0:
 10125                           
 10126                           ;doprnt.c: 635: switch(c = *f++) {
 10127  152C  0821               	movf	i1sprintf@f+1,w
 10128  152D  00A5               	movwf	??i1_sprintf+1
 10129  152E  0820               	movf	i1sprintf@f,w
 10130  152F  00A4               	movwf	??i1_sprintf
 10131  1530  0AA0               	incf	i1sprintf@f,f
 10132  1531  1903               	skipnz
 10133  1532  0AA1               	incf	i1sprintf@f+1,f
 10134  1533  0825               	movf	??i1_sprintf+1,w
 10135  1534  00FF               	movwf	127
 10136  1535  0824               	movf	??i1_sprintf,w
 10137  1536  0084               	movwf	4
 10138  1537  120A  118A  2100  160A  118A  	fcall	stringtab
 10139  153C  00AD               	movwf	i1sprintf@c
 10140                           
 10141                           ; Switch size 1, requested type "space"
 10142                           ; Number of cases is 3, Range of values is 0 to 105
 10143                           ; switch strategies available:
 10144                           ; Name         Instructions Cycles
 10145                           ; simple_byte           10     6 (average)
 10146                           ; jumptable            260     6 (fixed)
 10147                           ;	Chosen strategy is simple_byte
 10148  153D  3A00               	xorlw	0	; case 0
 10149  153E  1903               	skipnz
 10150  153F  2DE1               	goto	i1l3269
 10151  1540  3A64               	xorlw	100	; case 100
 10152  1541  1903               	skipnz
 10153  1542  2D47               	goto	i1l3229
 10154  1543  3A0D               	xorlw	13	; case 105
 10155  1544  1903               	skipnz
 10156  1545  2D47               	goto	i1l3229
 10157  1546  2D05               	goto	i1l3267
 10158  1547                     i1l3229:	
 10159                           
 10160                           ;doprnt.c: 1253: {
 10161                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10162  1547  0827               	movf	i1sprintf@ap,w
 10163  1548  0084               	movwf	4
 10164  1549  1383               	bcf	3,7	;select IRP bank0
 10165  154A  0800               	movf	0,w
 10166  154B  00AA               	movwf	i1sprintf@val
 10167  154C  0A84               	incf	4,f
 10168  154D  0800               	movf	0,w
 10169  154E  00AB               	movwf	i1sprintf@val+1
 10170  154F  3002               	movlw	2
 10171  1550  00A4               	movwf	??i1_sprintf
 10172  1551  0824               	movf	??i1_sprintf,w
 10173  1552  07A7               	addwf	i1sprintf@ap,f
 10174                           
 10175                           ;doprnt.c: 1261: if((int)val < 0) {
 10176  1553  1FAB               	btfss	i1sprintf@val+1,7
 10177  1554  2D5E               	goto	i1l3239
 10178                           
 10179                           ;doprnt.c: 1262: flag |= 0x03;
 10180  1555  3003               	movlw	3
 10181  1556  00A4               	movwf	??i1_sprintf
 10182  1557  0824               	movf	??i1_sprintf,w
 10183  1558  04A8               	iorwf	i1sprintf@flag,f
 10184                           
 10185                           ;doprnt.c: 1263: val = -val;
 10186  1559  09AA               	comf	i1sprintf@val,f
 10187  155A  09AB               	comf	i1sprintf@val+1,f
 10188  155B  0AAA               	incf	i1sprintf@val,f
 10189  155C  1903               	skipnz
 10190  155D  0AAB               	incf	i1sprintf@val+1,f
 10191  155E                     i1l3239:	
 10192                           
 10193                           ;doprnt.c: 1264: }
 10194                           ;doprnt.c: 1266: }
 10195                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10196  155E  01AD               	clrf	i1sprintf@c
 10197  155F  0AAD               	incf	i1sprintf@c,f
 10198  1560  3005               	movlw	5
 10199  1561  062D               	xorwf	i1sprintf@c,w
 10200  1562  1903               	btfsc	3,2
 10201  1563  2D89               	goto	i1l3251
 10202  1564                     i1l3245:	
 10203                           
 10204                           ;doprnt.c: 1306: if(val < dpowers[c])
 10205  1564  082D               	movf	i1sprintf@c,w
 10206  1565  00A4               	movwf	??i1_sprintf
 10207  1566  0724               	addwf	??i1_sprintf,w
 10208  1567  3E12               	addlw	low (_dpowers| (0+32768))
 10209  1568  0084               	movwf	4
 10210  1569  3081               	movlw	high (_dpowers| (0+32768))
 10211  156A  1803               	skipnc
 10212  156B  3E01               	addlw	1
 10213  156C  00FF               	movwf	127
 10214  156D  120A  118A  2100  160A  118A  	fcall	stringtab
 10215  1572  00A5               	movwf	??i1_sprintf+1
 10216  1573  120A  118A  2100  160A  118A  	fcall	stringtab
 10217  1578  00A6               	movwf	??i1_sprintf+2
 10218  1579  0826               	movf	??i1_sprintf+2,w
 10219  157A  022B               	subwf	i1sprintf@val+1,w
 10220  157B  1D03               	skipz
 10221  157C  2D7F               	goto	u369_25
 10222  157D  0825               	movf	??i1_sprintf+1,w
 10223  157E  022A               	subwf	i1sprintf@val,w
 10224  157F                     u369_25:	
 10225  157F  1C03               	btfss	3,0
 10226  1580  2D89               	goto	i1l3251
 10227                           
 10228                           ;doprnt.c: 1307: break;
 10229  1581  3001               	movlw	1
 10230  1582  00A4               	movwf	??i1_sprintf
 10231  1583  0824               	movf	??i1_sprintf,w
 10232  1584  07AD               	addwf	i1sprintf@c,f
 10233  1585  3005               	movlw	5
 10234  1586  062D               	xorwf	i1sprintf@c,w
 10235  1587  1D03               	btfss	3,2
 10236  1588  2D64               	goto	i1l3245
 10237  1589                     i1l3251:	
 10238                           
 10239                           ;doprnt.c: 1422: {
 10240                           ;doprnt.c: 1438: if(flag & 0x03)
 10241  1589  0828               	movf	i1sprintf@flag,w
 10242  158A  3903               	andlw	3
 10243  158B  1903               	btfsc	3,2
 10244  158C  2D98               	goto	i1l3257
 10245                           
 10246                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10247  158D  302D               	movlw	45
 10248  158E  00A4               	movwf	??i1_sprintf
 10249  158F  082C               	movf	i1sprintf@sp,w
 10250  1590  0084               	movwf	4
 10251  1591  0824               	movf	??i1_sprintf,w
 10252  1592  1783               	bsf	3,7	;select IRP bank2
 10253  1593  0080               	movwf	0
 10254  1594  3001               	movlw	1
 10255  1595  00A4               	movwf	??i1_sprintf
 10256  1596  0824               	movf	??i1_sprintf,w
 10257  1597  07AC               	addwf	i1sprintf@sp,f
 10258  1598                     i1l3257:	
 10259                           
 10260                           ;doprnt.c: 1469: }
 10261                           ;doprnt.c: 1472: prec = c;
 10262  1598  082D               	movf	i1sprintf@c,w
 10263  1599  00A4               	movwf	??i1_sprintf
 10264  159A  0824               	movf	??i1_sprintf,w
 10265  159B  00A9               	movwf	i1sprintf@prec
 10266  159C                     i1l3265:	
 10267                           ;doprnt.c: 1474: while(prec--) {
 10268                           
 10269  159C  30FF               	movlw	255
 10270  159D  00A4               	movwf	??i1_sprintf
 10271  159E  0824               	movf	??i1_sprintf,w
 10272  159F  07A9               	addwf	i1sprintf@prec,f
 10273  15A0  0A29               	incf	i1sprintf@prec,w
 10274  15A1  1903               	btfsc	3,2
 10275  15A2  2D05               	goto	i1l3267
 10276                           
 10277                           ;doprnt.c: 1478: {
 10278                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10279  15A3  300A               	movlw	10
 10280  15A4  00F8               	movwf	i1___lwmod@divisor
 10281  15A5  3000               	movlw	0
 10282  15A6  00F9               	movwf	i1___lwmod@divisor+1
 10283  15A7  0829               	movf	i1sprintf@prec,w
 10284  15A8  00A4               	movwf	??i1_sprintf
 10285  15A9  0724               	addwf	??i1_sprintf,w
 10286  15AA  3E12               	addlw	low (_dpowers| (0+32768))
 10287  15AB  0084               	movwf	4
 10288  15AC  3081               	movlw	high (_dpowers| (0+32768))
 10289  15AD  1803               	skipnc
 10290  15AE  3E01               	addlw	1
 10291  15AF  00FF               	movwf	127
 10292  15B0  120A  118A  2100  160A  118A  	fcall	stringtab
 10293  15B5  00F0               	movwf	i1___lwdiv@divisor
 10294  15B6  120A  118A  2100  160A  118A  	fcall	stringtab
 10295  15BB  00F1               	movwf	i1___lwdiv@divisor+1
 10296  15BC  082B               	movf	i1sprintf@val+1,w
 10297  15BD  00F3               	movwf	i1___lwdiv@dividend+1
 10298  15BE  082A               	movf	i1sprintf@val,w
 10299  15BF  00F2               	movwf	i1___lwdiv@dividend
 10300  15C0  160A  158A  2749  160A  118A  	fcall	i1___lwdiv
 10301  15C5  0871               	movf	?i1___lwdiv+1,w
 10302  15C6  00FB               	movwf	i1___lwmod@dividend+1
 10303  15C7  0870               	movf	?i1___lwdiv,w
 10304  15C8  00FA               	movwf	i1___lwmod@dividend
 10305  15C9  160A  158A  2675  160A  118A  	fcall	i1___lwmod
 10306  15CE  0878               	movf	?i1___lwmod,w
 10307  15CF  3E30               	addlw	48
 10308  15D0  1283               	bcf	3,5	;RP0=0, select bank0
 10309  15D1  1303               	bcf	3,6	;RP1=0, select bank0
 10310  15D2  00A5               	movwf	??i1_sprintf+1
 10311  15D3  0825               	movf	??i1_sprintf+1,w
 10312  15D4  00AD               	movwf	i1sprintf@c
 10313                           
 10314                           ;doprnt.c: 1523: }
 10315                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10316  15D5  082D               	movf	i1sprintf@c,w
 10317  15D6  00A4               	movwf	??i1_sprintf
 10318  15D7  082C               	movf	i1sprintf@sp,w
 10319  15D8  0084               	movwf	4
 10320  15D9  0824               	movf	??i1_sprintf,w
 10321  15DA  1783               	bsf	3,7	;select IRP bank2
 10322  15DB  0080               	movwf	0
 10323  15DC  3001               	movlw	1
 10324  15DD  00A4               	movwf	??i1_sprintf
 10325  15DE  0824               	movf	??i1_sprintf,w
 10326  15DF  07AC               	addwf	i1sprintf@sp,f
 10327  15E0  2D9C               	goto	i1l3265
 10328  15E1                     i1l3269:	
 10329                           ;doprnt.c: 1525: }
 10330                           ;doprnt.c: 1533: }
 10331                           ;doprnt.c: 1535: alldone:
 10332                           
 10333                           
 10334                           ;doprnt.c: 1538: *sp = 0;
 10335  15E1  082C               	movf	i1sprintf@sp,w
 10336  15E2  0084               	movwf	4
 10337  15E3  1783               	bsf	3,7	;select IRP bank2
 10338  15E4  0180               	clrf	0
 10339  15E5  0008               	return
 10340  15E6                     __end_ofi1_sprintf:	
 10341                           ;doprnt.c: 1540: return 0;
 10342                           ;	Return value of i1_sprintf is never used
 10343                           
 10344                           
 10345                           	psect	text45
 10346  1E75                     __ptext45:	
 10347 ;; *************** function i1___lwmod *****************
 10348 ;; Defined at:
 10349 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;  divisor         2    8[COMMON] unsigned int 
 10352 ;;  dividend        2   10[COMMON] unsigned int 
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  __lwmod         1   13[COMMON] unsigned char 
 10355 ;; Return value:  Size  Location     Type
 10356 ;;                  2    8[COMMON] unsigned int 
 10357 ;; Registers used:
 10358 ;;		wreg, status,2, status,0
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10364 ;;      Params:         4       0       0       0       0
 10365 ;;      Locals:         1       0       0       0       0
 10366 ;;      Temps:          1       0       0       0       0
 10367 ;;      Totals:         6       0       0       0       0
 10368 ;;Total ram usage:        6 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; This function calls:
 10371 ;;		Nothing
 10372 ;; This function is called by:
 10373 ;;		i1_sprintf
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           
 10378                           ;psect for function i1___lwmod
 10379  1E75                     i1___lwmod:	
 10380                           
 10381                           ;incstack = 0
 10382 ;; hardware stack exceeded
 10383                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
 10384  1E75  0878               	movf	i1___lwmod@divisor,w
 10385  1E76  0479               	iorwf	i1___lwmod@divisor+1,w
 10386  1E77  1903               	btfsc	3,2
 10387  1E78  2EA2               	goto	i1l3051
 10388  1E79  01FD               	clrf	i1___lwmod@counter
 10389  1E7A  0AFD               	incf	i1___lwmod@counter,f
 10390  1E7B                     i1l3041:	
 10391  1E7B  1BF9               	btfsc	i1___lwmod@divisor+1,7
 10392  1E7C  2E89               	goto	i1l3043
 10393  1E7D  3001               	movlw	1
 10394  1E7E                     u334_25:	
 10395  1E7E  1003               	clrc
 10396  1E7F  0DF8               	rlf	i1___lwmod@divisor,f
 10397  1E80  0DF9               	rlf	i1___lwmod@divisor+1,f
 10398  1E81  3EFF               	addlw	-1
 10399  1E82  1D03               	skipz
 10400  1E83  2E7E               	goto	u334_25
 10401  1E84  3001               	movlw	1
 10402  1E85  00FC               	movwf	??i1___lwmod
 10403  1E86  087C               	movf	??i1___lwmod,w
 10404  1E87  07FD               	addwf	i1___lwmod@counter,f
 10405  1E88  2E7B               	goto	i1l3041
 10406  1E89                     i1l3043:	
 10407  1E89  0879               	movf	i1___lwmod@divisor+1,w
 10408  1E8A  027B               	subwf	i1___lwmod@dividend+1,w
 10409  1E8B  1D03               	skipz
 10410  1E8C  2E8F               	goto	u336_25
 10411  1E8D  0878               	movf	i1___lwmod@divisor,w
 10412  1E8E  027A               	subwf	i1___lwmod@dividend,w
 10413  1E8F                     u336_25:	
 10414  1E8F  1C03               	skipc
 10415  1E90  2E97               	goto	i1l3047
 10416  1E91  0878               	movf	i1___lwmod@divisor,w
 10417  1E92  02FA               	subwf	i1___lwmod@dividend,f
 10418  1E93  0879               	movf	i1___lwmod@divisor+1,w
 10419  1E94  1C03               	skipc
 10420  1E95  03FB               	decf	i1___lwmod@dividend+1,f
 10421  1E96  02FB               	subwf	i1___lwmod@dividend+1,f
 10422  1E97                     i1l3047:	
 10423  1E97  3001               	movlw	1
 10424  1E98                     u337_25:	
 10425  1E98  1003               	clrc
 10426  1E99  0CF9               	rrf	i1___lwmod@divisor+1,f
 10427  1E9A  0CF8               	rrf	i1___lwmod@divisor,f
 10428  1E9B  3EFF               	addlw	-1
 10429  1E9C  1D03               	skipz
 10430  1E9D  2E98               	goto	u337_25
 10431  1E9E  3001               	movlw	1
 10432  1E9F  02FD               	subwf	i1___lwmod@counter,f
 10433  1EA0  1D03               	btfss	3,2
 10434  1EA1  2E89               	goto	i1l3043
 10435  1EA2                     i1l3051:	
 10436  1EA2  087B               	movf	i1___lwmod@dividend+1,w
 10437  1EA3  00F9               	movwf	?i1___lwmod+1
 10438  1EA4  087A               	movf	i1___lwmod@dividend,w
 10439  1EA5  00F8               	movwf	?i1___lwmod
 10440  1EA6  0008               	return
 10441  1EA7                     __end_ofi1___lwmod:	
 10442                           
 10443                           	psect	text46
 10444  1F49                     __ptext46:	
 10445 ;; *************** function i1___lwdiv *****************
 10446 ;; Defined at:
 10447 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  divisor         2    0[COMMON] unsigned int 
 10450 ;;  dividend        2    2[COMMON] unsigned int 
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10453 ;;  __lwdiv         1    7[COMMON] unsigned char 
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  2    0[COMMON] unsigned int 
 10456 ;; Registers used:
 10457 ;;		wreg, status,2, status,0
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10463 ;;      Params:         4       0       0       0       0
 10464 ;;      Locals:         3       0       0       0       0
 10465 ;;      Temps:          1       0       0       0       0
 10466 ;;      Totals:         8       0       0       0       0
 10467 ;;Total ram usage:        8 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		i1_sprintf
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function i1___lwdiv
 10478  1F49                     i1___lwdiv:	
 10479                           
 10480                           ;incstack = 0
 10481 ;; hardware stack exceeded
 10482                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10483  1F49  01F5               	clrf	i1___lwdiv@quotient
 10484  1F4A  01F6               	clrf	i1___lwdiv@quotient+1
 10485  1F4B  0870               	movf	i1___lwdiv@divisor,w
 10486  1F4C  0471               	iorwf	i1___lwdiv@divisor+1,w
 10487  1F4D  1903               	btfsc	3,2
 10488  1F4E  2F80               	goto	i1l3029
 10489  1F4F  01F7               	clrf	i1___lwdiv@counter
 10490  1F50  0AF7               	incf	i1___lwdiv@counter,f
 10491  1F51                     i1l3017:	
 10492  1F51  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10493  1F52  2F5F               	goto	i1l3019
 10494  1F53  3001               	movlw	1
 10495  1F54                     u327_25:	
 10496  1F54  1003               	clrc
 10497  1F55  0DF0               	rlf	i1___lwdiv@divisor,f
 10498  1F56  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10499  1F57  3EFF               	addlw	-1
 10500  1F58  1D03               	skipz
 10501  1F59  2F54               	goto	u327_25
 10502  1F5A  3001               	movlw	1
 10503  1F5B  00F4               	movwf	??i1___lwdiv
 10504  1F5C  0874               	movf	??i1___lwdiv,w
 10505  1F5D  07F7               	addwf	i1___lwdiv@counter,f
 10506  1F5E  2F51               	goto	i1l3017
 10507  1F5F                     i1l3019:	
 10508  1F5F  3001               	movlw	1
 10509  1F60                     u329_25:	
 10510  1F60  1003               	clrc
 10511  1F61  0DF5               	rlf	i1___lwdiv@quotient,f
 10512  1F62  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10513  1F63  3EFF               	addlw	-1
 10514  1F64  1D03               	skipz
 10515  1F65  2F60               	goto	u329_25
 10516  1F66  0871               	movf	i1___lwdiv@divisor+1,w
 10517  1F67  0273               	subwf	i1___lwdiv@dividend+1,w
 10518  1F68  1D03               	skipz
 10519  1F69  2F6C               	goto	u330_25
 10520  1F6A  0870               	movf	i1___lwdiv@divisor,w
 10521  1F6B  0272               	subwf	i1___lwdiv@dividend,w
 10522  1F6C                     u330_25:	
 10523  1F6C  1C03               	skipc
 10524  1F6D  2F75               	goto	i1l3025
 10525  1F6E  0870               	movf	i1___lwdiv@divisor,w
 10526  1F6F  02F2               	subwf	i1___lwdiv@dividend,f
 10527  1F70  0871               	movf	i1___lwdiv@divisor+1,w
 10528  1F71  1C03               	skipc
 10529  1F72  03F3               	decf	i1___lwdiv@dividend+1,f
 10530  1F73  02F3               	subwf	i1___lwdiv@dividend+1,f
 10531  1F74  1475               	bsf	i1___lwdiv@quotient,0
 10532  1F75                     i1l3025:	
 10533  1F75  3001               	movlw	1
 10534  1F76                     u331_25:	
 10535  1F76  1003               	clrc
 10536  1F77  0CF1               	rrf	i1___lwdiv@divisor+1,f
 10537  1F78  0CF0               	rrf	i1___lwdiv@divisor,f
 10538  1F79  3EFF               	addlw	-1
 10539  1F7A  1D03               	skipz
 10540  1F7B  2F76               	goto	u331_25
 10541  1F7C  3001               	movlw	1
 10542  1F7D  02F7               	subwf	i1___lwdiv@counter,f
 10543  1F7E  1D03               	btfss	3,2
 10544  1F7F  2F5F               	goto	i1l3019
 10545  1F80                     i1l3029:	
 10546  1F80  0876               	movf	i1___lwdiv@quotient+1,w
 10547  1F81  00F1               	movwf	?i1___lwdiv+1
 10548  1F82  0875               	movf	i1___lwdiv@quotient,w
 10549  1F83  00F0               	movwf	?i1___lwdiv
 10550  1F84  0008               	return
 10551  1F85                     __end_ofi1___lwdiv:	
 10552                           
 10553                           	psect	text47
 10554  1C9F                     __ptext47:	
 10555 ;; *************** function i1_sampling *****************
 10556 ;; Defined at:
 10557 ;;		line 377 in file "main.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  2    0[COMMON] unsigned int 
 10564 ;; Registers used:
 10565 ;;		wreg
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10571 ;;      Params:         2       0       0       0       0
 10572 ;;      Locals:         0       0       0       0       0
 10573 ;;      Temps:          1       0       0       0       0
 10574 ;;      Totals:         3       0       0       0       0
 10575 ;;Total ram usage:        3 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		i1_acquire
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           
 10585                           ;psect for function i1_sampling
 10586  1C9F                     i1_sampling:	
 10587                           
 10588                           ;main.c: 378: _delay((unsigned long)((100)*(20000000/4000000.0)));
 10589                           
 10590                           ;incstack = 0
 10591 ;; hardware stack exceeded
 10592                           ; Regs used in i1_sampling: [wreg]
 10593  1C9F  30A6               	movlw	166
 10594  1CA0  00F2               	movwf	??i1_sampling
 10595  1CA1                     u581_27:	
 10596  1CA1  0BF2               	decfsz	??i1_sampling,f
 10597  1CA2  2CA1               	goto	u581_27
 10598  1CA3  0000               	nop
 10599                           
 10600                           ;main.c: 379: ADCON0bits.GO_nDONE = 1;
 10601  1CA4  1283               	bcf	3,5	;RP0=0, select bank0
 10602  1CA5  1303               	bcf	3,6	;RP1=0, select bank0
 10603  1CA6  151F               	bsf	31,2	;volatile
 10604  1CA7                     i1l340:	
 10605                           ;main.c: 380: while(ADCON0bits.GO_nDONE){}
 10606                           
 10607  1CA7  191F               	btfsc	31,2	;volatile
 10608  1CA8  2CA7               	goto	i1l340
 10609                           
 10610                           ;main.c: 381: return (int)(ADRESH << 8) + (ADRESL);
 10611  1CA9  081E               	movf	30,w	;volatile
 10612  1CAA  00F1               	movwf	?i1_sampling+1
 10613  1CAB  1683               	bsf	3,5	;RP0=1, select bank1
 10614  1CAC  1303               	bcf	3,6	;RP1=0, select bank1
 10615  1CAD  081E               	movf	30,w	;volatile
 10616  1CAE  00F0               	movwf	?i1_sampling
 10617  1CAF  0008               	return
 10618  1CB0                     __end_ofi1_sampling:	
 10619                           
 10620                           	psect	text48
 10621  1D20                     __ptext48:	
 10622 ;; *************** function i1_USARTWriteString *****************
 10623 ;; Defined at:
 10624 ;;		line 78 in file "usart_pic16.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;  str             2    1[COMMON] PTR const unsigned char 
 10627 ;;		 -> STR_72(7), STR_71(35), STR_69(8), STR_67(9), 
 10628 ;;		 -> STR_65(9), STR_63(22), STR_61(22), status@output(25), 
 10629 ;;		 -> STR_57(7), STR_56(35), STR_55(7), STR_54(35), 
 10630 ;;		 -> strBuffer(25), STR_51(2), STR_50(28), STR_35(94), 
 10631 ;;		 -> STR_34(19), STR_33(34), STR_32(19), STR_31(19), 
 10632 ;;		 -> STR_30(56), STR_29(19), STR_28(19), STR_27(74), 
 10633 ;;		 -> STR_26(19), STR_25(19), STR_24(43), STR_23(19), 
 10634 ;;		 -> STR_22(19), STR_21(34), STR_20(19), STR_19(28), 
 10635 ;;		 -> STR_18(70), STR_17(19), STR_16(19), STR_15(82), 
 10636 ;;		 -> STR_14(19), STR_13(21), STR_12(83), STR_11(19), 
 10637 ;;		 -> STR_10(18), STR_9(85), STR_8(19), STR_7(15), 
 10638 ;;		 -> STR_6(88), STR_5(19), STR_4(57), STR_3(48), 
 10639 ;;		 -> STR_2(93), STR_1(2), 
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10651 ;;      Params:         2       0       0       0       0
 10652 ;;      Locals:         0       0       0       0       0
 10653 ;;      Temps:          0       0       0       0       0
 10654 ;;      Totals:         2       0       0       0       0
 10655 ;;Total ram usage:        2 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    1
 10658 ;; This function calls:
 10659 ;;		i1_USARTWriteChar
 10660 ;; This function is called by:
 10661 ;;		i1_acquire
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function i1_USARTWriteString
 10667  1D20                     i1_USARTWriteString:	
 10668  1D20                     i1l4485:	
 10669                           ;usart_pic16.c: 80: while(*str!='\0')
 10670                           
 10671                           ;incstack = 0
 10672 ;; hardware stack exceeded
 10673                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10674                           
 10675  1D20  0872               	movf	i1USARTWriteString@str+1,w
 10676  1D21  1283               	bcf	3,5	;RP0=0, select bank0
 10677  1D22  1303               	bcf	3,6	;RP1=0, select bank0
 10678  1D23  00FF               	movwf	127
 10679  1D24  0871               	movf	i1USARTWriteString@str,w
 10680  1D25  0084               	movwf	4
 10681  1D26  120A  118A  2100  160A  158A  	fcall	stringtab
 10682  1D2B  3A00               	xorlw	0
 10683  1D2C  1903               	btfsc	3,2
 10684  1D2D  0008               	return
 10685                           
 10686                           ;usart_pic16.c: 81: {
 10687                           ;usart_pic16.c: 82: USARTWriteChar(*str);
 10688  1D2E  0872               	movf	i1USARTWriteString@str+1,w
 10689  1D2F  1283               	bcf	3,5	;RP0=0, select bank0
 10690  1D30  1303               	bcf	3,6	;RP1=0, select bank0
 10691  1D31  00FF               	movwf	127
 10692  1D32  0871               	movf	i1USARTWriteString@str,w
 10693  1D33  0084               	movwf	4
 10694  1D34  120A  118A  2100  160A  158A  	fcall	stringtab
 10695  1D39  160A  158A  2456  160A  158A  	fcall	i1_USARTWriteChar
 10696                           
 10697                           ;usart_pic16.c: 83: str++;
 10698  1D3E  3001               	movlw	1
 10699  1D3F  07F1               	addwf	i1USARTWriteString@str,f
 10700  1D40  1803               	skipnc
 10701  1D41  0AF2               	incf	i1USARTWriteString@str+1,f
 10702  1D42  2D20               	goto	i1l4485
 10703  1D43                     __end_ofi1_USARTWriteString:	
 10704                           
 10705                           	psect	text49
 10706  1C77                     __ptext49:	
 10707 ;; *************** function i1_USARTGotoNewLine *****************
 10708 ;; Defined at:
 10709 ;;		line 202 in file "usart_pic16.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  1    wreg      void 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2, status,0, pclath, cstack
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10723 ;;      Params:         0       0       0       0       0
 10724 ;;      Locals:         0       0       0       0       0
 10725 ;;      Temps:          0       0       0       0       0
 10726 ;;      Totals:         0       0       0       0       0
 10727 ;;Total ram usage:        0 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    1
 10730 ;; This function calls:
 10731 ;;		i1_USARTWriteChar
 10732 ;; This function is called by:
 10733 ;;		i1_acquire
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           
 10738                           ;psect for function i1_USARTGotoNewLine
 10739  1C77                     i1_USARTGotoNewLine:	
 10740                           
 10741                           ;usart_pic16.c: 204: USARTWriteChar('\r');
 10742                           
 10743                           ;incstack = 0
 10744 ;; hardware stack exceeded
 10745                           ; Regs used in i1_USARTGotoNewLine: [wreg+status,2+status,0+pclath+cstack]
 10746  1C77  300D               	movlw	13
 10747  1C78  160A  158A  2456  160A  158A  	fcall	i1_USARTWriteChar
 10748                           
 10749                           ;usart_pic16.c: 205: USARTWriteChar('\n');
 10750  1C7D  300A               	movlw	10
 10751  1C7E  160A  158A  2456   	fcall	i1_USARTWriteChar
 10752  1C81  0008               	return
 10753  1C82                     __end_ofi1_USARTGotoNewLine:	
 10754                           
 10755                           	psect	text50
 10756  1C56                     __ptext50:	
 10757 ;; *************** function i1_USARTWriteChar *****************
 10758 ;; Defined at:
 10759 ;;		line 71 in file "usart_pic16.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  ch              1    wreg     unsigned char 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  ch              1    0[COMMON] unsigned char 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      void 
 10766 ;; Registers used:
 10767 ;;		wreg
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10773 ;;      Params:         0       0       0       0       0
 10774 ;;      Locals:         1       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0
 10776 ;;      Totals:         1       0       0       0       0
 10777 ;;Total ram usage:        1 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; This function calls:
 10780 ;;		Nothing
 10781 ;; This function is called by:
 10782 ;;		i1_USARTWriteString
 10783 ;;		i1_USARTGotoNewLine
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           
 10788                           ;psect for function i1_USARTWriteChar
 10789  1C56                     i1_USARTWriteChar:	
 10790                           
 10791                           ;incstack = 0
 10792 ;; hardware stack exceeded
 10793                           ; Regs used in i1_USARTWriteChar: [wreg]
 10794                           ;i1USARTWriteChar@ch stored from wreg
 10795  1C56  00F0               	movwf	i1USARTWriteChar@ch
 10796  1C57                     i1l38:	
 10797                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
 10798                           
 10799  1C57  1283               	bcf	3,5	;RP0=0, select bank0
 10800  1C58  1303               	bcf	3,6	;RP1=0, select bank0
 10801  1C59  1E0C               	btfss	12,4	;volatile
 10802  1C5A  2C57               	goto	i1l38
 10803                           
 10804                           ;usart_pic16.c: 75: TXREG=ch;
 10805  1C5B  0870               	movf	i1USARTWriteChar@ch,w
 10806  1C5C  0099               	movwf	25	;volatile
 10807  1C5D  0008               	return
 10808  1C5E                     __end_ofi1_USARTWriteChar:	
 10809                           
 10810                           	psect	text51
 10811  1CFD                     __ptext51:	
 10812 ;; *************** function i1_USARTDataAvailable *****************
 10813 ;; Defined at:
 10814 ;;		line 151 in file "usart_pic16.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;		None
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;		None
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  1    wreg      unsigned char 
 10821 ;; Registers used:
 10822 ;;		wreg, status,2, status,0
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10828 ;;      Params:         0       0       0       0       0
 10829 ;;      Locals:         0       0       0       0       0
 10830 ;;      Temps:          1       0       0       0       0
 10831 ;;      Totals:         1       0       0       0       0
 10832 ;;Total ram usage:        1 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; This function calls:
 10835 ;;		Nothing
 10836 ;; This function is called by:
 10837 ;;		i1_acquire
 10838 ;; This function uses a non-reentrant model
 10839 ;;
 10840                           
 10841                           
 10842                           ;psect for function i1_USARTDataAvailable
 10843  1CFD                     i1_USARTDataAvailable:	
 10844                           
 10845                           ;usart_pic16.c: 153: if(UQFront==-1) return 0;
 10846                           
 10847                           ;incstack = 0
 10848 ;; hardware stack exceeded
 10849                           ; Regs used in i1_USARTDataAvailable: [wreg+status,2+status,0]
 10850  1CFD  1283               	bcf	3,5	;RP0=0, select bank0
 10851  1CFE  1303               	bcf	3,6	;RP1=0, select bank0
 10852  1CFF  0A5A               	incf	_UQFront,w	;volatile
 10853  1D00  1D03               	btfss	3,2
 10854  1D01  2D04               	goto	i1l3185
 10855  1D02  3000               	movlw	0
 10856  1D03  0008               	return
 10857  1D04                     i1l3185:	
 10858                           
 10859                           ;usart_pic16.c: 154: if(UQFront<UQEnd)
 10860  1D04  085A               	movf	_UQFront,w	;volatile
 10861  1D05  3A80               	xorlw	128
 10862  1D06  00F0               	movwf	??i1_USARTDataAvailable
 10863  1D07  0859               	movf	_UQEnd,w	;volatile
 10864  1D08  3A80               	xorlw	128
 10865  1D09  02F0               	subwf	??i1_USARTDataAvailable,f
 10866  1D0A  1803               	skipnc
 10867  1D0B  2D11               	goto	i1l3193
 10868                           
 10869                           ;usart_pic16.c: 155: return(UQEnd-UQFront+1);
 10870  1D0C  035A               	decf	_UQFront,w	;volatile
 10871  1D0D  3AFF               	xorlw	255
 10872  1D0E  0759               	addwf	_UQEnd,w	;volatile
 10873  1D0F  3E01               	addlw	1
 10874  1D10  0008               	return
 10875  1D11                     i1l3193:	
 10876                           
 10877                           ;usart_pic16.c: 156: else if(UQFront>UQEnd)
 10878  1D11  0859               	movf	_UQEnd,w	;volatile
 10879  1D12  3A80               	xorlw	128
 10880  1D13  00F0               	movwf	??i1_USARTDataAvailable
 10881  1D14  085A               	movf	_UQFront,w	;volatile
 10882  1D15  3A80               	xorlw	128
 10883  1D16  02F0               	subwf	??i1_USARTDataAvailable,f
 10884  1D17  1803               	skipnc
 10885  1D18  2D1E               	goto	i1l3201
 10886                           
 10887                           ;usart_pic16.c: 157: return (64-UQFront+UQEnd+1);
 10888  1D19  035A               	decf	_UQFront,w	;volatile
 10889  1D1A  3AFF               	xorlw	255
 10890  1D1B  0759               	addwf	_UQEnd,w	;volatile
 10891  1D1C  3E41               	addlw	65
 10892  1D1D  0008               	return
 10893  1D1E                     i1l3201:	
 10894                           
 10895                           ;usart_pic16.c: 158: else
 10896                           ;usart_pic16.c: 159: return 1;
 10897  1D1E  3001               	movlw	1
 10898  1D1F  0008               	return
 10899  1D20                     __end_ofi1_USARTDataAvailable:	
 10900                           
 10901                           	psect	text52
 10902  11BE                     __ptext52:	
 10903 ;; *************** function _USARTHandleRxInt *****************
 10904 ;; Defined at:
 10905 ;;		line 95 in file "usart_pic16.c"
 10906 ;; Parameters:    Size  Location     Type
 10907 ;;		None
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;  data            1    4[COMMON] unsigned char 
 10910 ;; Return value:  Size  Location     Type
 10911 ;;                  1    wreg      void 
 10912 ;; Registers used:
 10913 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10919 ;;      Params:         0       0       0       0       0
 10920 ;;      Locals:         1       0       0       0       0
 10921 ;;      Temps:          4       0       0       0       0
 10922 ;;      Totals:         5       0       0       0       0
 10923 ;;Total ram usage:        5 bytes
 10924 ;; Hardware stack levels used:    1
 10925 ;; This function calls:
 10926 ;;		Nothing
 10927 ;; This function is called by:
 10928 ;;		_ISR
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           
 10933                           ;psect for function _USARTHandleRxInt
 10934  11BE                     _USARTHandleRxInt:	
 10935                           
 10936                           ;usart_pic16.c: 97: if(RB1==1)
 10937                           
 10938                           ;incstack = 0
 10939 ;; hardware stack exceeded
 10940                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
 10941  11BE  1283               	bcf	3,5	;RP0=0, select bank0
 10942  11BF  1303               	bcf	3,6	;RP1=0, select bank0
 10943  11C0  1C86               	btfss	6,1	;volatile
 10944  11C1  29C4               	goto	i1l53
 10945                           
 10946                           ;usart_pic16.c: 98: RB1=0;
 10947  11C2  1086               	bcf	6,1	;volatile
 10948  11C3  29C5               	goto	i1l3307
 10949  11C4                     i1l53:	
 10950                           
 10951                           ;usart_pic16.c: 99: else
 10952                           ;usart_pic16.c: 100: RB1=1;
 10953  11C4  1486               	bsf	6,1	;volatile
 10954  11C5                     i1l3307:	
 10955                           
 10956                           ;usart_pic16.c: 103: char data=RCREG;
 10957  11C5  081A               	movf	26,w	;volatile
 10958  11C6  00F0               	movwf	??_USARTHandleRxInt
 10959  11C7  0870               	movf	??_USARTHandleRxInt,w
 10960  11C8  00F4               	movwf	USARTHandleRxInt@data
 10961                           
 10962                           ;usart_pic16.c: 106: if(((UQEnd==64-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 10963  11C9  303F               	movlw	63
 10964  11CA  0659               	xorwf	_UQEnd,w	;volatile
 10965  11CB  1903               	btfsc	3,2
 10966  11CC  085A               	movf	_UQFront,w	;volatile
 10967  11CD  1903               	btfsc	3,2
 10968  11CE  29E4               	goto	i1l3315
 10969  11CF  085A               	movf	_UQFront,w	;volatile
 10970  11D0  00F0               	movwf	??_USARTHandleRxInt
 10971  11D1  01F1               	clrf	??_USARTHandleRxInt+1
 10972  11D2  1BF0               	btfsc	??_USARTHandleRxInt,7
 10973  11D3  03F1               	decf	??_USARTHandleRxInt+1,f
 10974  11D4  3001               	movlw	1
 10975  11D5  0759               	addwf	_UQEnd,w	;volatile
 10976  11D6  00F2               	movwf	??_USARTHandleRxInt+2
 10977  11D7  01F3               	clrf	??_USARTHandleRxInt+3
 10978  11D8  1803               	skipnc
 10979  11D9  0AF3               	incf	??_USARTHandleRxInt+3,f
 10980  11DA  1BD9               	btfsc	_UQEnd,7	;volatile
 10981  11DB  03F3               	decf	??_USARTHandleRxInt+3,f
 10982  11DC  0871               	movf	??_USARTHandleRxInt+1,w
 10983  11DD  0673               	xorwf	??_USARTHandleRxInt+3,w
 10984  11DE  1D03               	skipz
 10985  11DF  29E2               	goto	u378_25
 10986  11E0  0870               	movf	??_USARTHandleRxInt,w
 10987  11E1  0672               	xorwf	??_USARTHandleRxInt+2,w
 10988  11E2                     u378_25:	
 10989  11E2  1D03               	skipz
 10990  11E3  29EE               	goto	i1l3319
 10991  11E4                     i1l3315:	
 10992                           
 10993                           ;usart_pic16.c: 107: {
 10994                           ;usart_pic16.c: 109: UQFront++;
 10995  11E4  3001               	movlw	1
 10996  11E5  00F0               	movwf	??_USARTHandleRxInt
 10997  11E6  0870               	movf	??_USARTHandleRxInt,w
 10998  11E7  1283               	bcf	3,5	;RP0=0, select bank0
 10999  11E8  1303               	bcf	3,6	;RP1=0, select bank0
 11000  11E9  07DA               	addwf	_UQFront,f	;volatile
 11001                           
 11002                           ;usart_pic16.c: 110: if(UQFront==64) UQFront=0;
 11003  11EA  3040               	movlw	64
 11004  11EB  065A               	xorwf	_UQFront,w	;volatile
 11005  11EC  1903               	btfsc	3,2
 11006  11ED  01DA               	clrf	_UQFront	;volatile
 11007  11EE                     i1l3319:	
 11008                           
 11009                           ;usart_pic16.c: 111: }
 11010                           ;usart_pic16.c: 113: if(UQEnd==64-1)
 11011  11EE  303F               	movlw	63
 11012  11EF  1283               	bcf	3,5	;RP0=0, select bank0
 11013  11F0  1303               	bcf	3,6	;RP1=0, select bank0
 11014  11F1  0659               	xorwf	_UQEnd,w	;volatile
 11015  11F2  1D03               	btfss	3,2
 11016  11F3  29F6               	goto	i1l3323
 11017                           
 11018                           ;usart_pic16.c: 114: UQEnd=0;
 11019  11F4  01D9               	clrf	_UQEnd	;volatile
 11020  11F5  29FA               	goto	i1l3325
 11021  11F6                     i1l3323:	
 11022                           
 11023                           ;usart_pic16.c: 115: else
 11024                           ;usart_pic16.c: 116: UQEnd++;
 11025  11F6  3001               	movlw	1
 11026  11F7  00F0               	movwf	??_USARTHandleRxInt
 11027  11F8  0870               	movf	??_USARTHandleRxInt,w
 11028  11F9  07D9               	addwf	_UQEnd,f	;volatile
 11029  11FA                     i1l3325:	
 11030                           
 11031                           ;usart_pic16.c: 118: URBuff[UQEnd]=data;
 11032  11FA  0874               	movf	USARTHandleRxInt@data,w
 11033  11FB  00F0               	movwf	??_USARTHandleRxInt
 11034  11FC  0859               	movf	_UQEnd,w
 11035  11FD  3E10               	addlw	(low (_URBuff| (0+256)))& (0+255)
 11036  11FE  0084               	movwf	4
 11037  11FF  0870               	movf	??_USARTHandleRxInt,w
 11038  1200  1783               	bsf	3,7	;select IRP bank2
 11039  1201  0080               	movwf	0
 11040                           
 11041                           ;usart_pic16.c: 120: if(UQFront==-1) UQFront=0;
 11042  1202  0A5A               	incf	_UQFront,w	;volatile
 11043  1203  1D03               	btfss	3,2
 11044  1204  0008               	return
 11045  1205  01DA               	clrf	_UQFront	;volatile
 11046  1206  0008               	return
 11047  1207                     __end_of_USARTHandleRxInt:	
 11048  007E                     btemp	set	126	;btemp
 11049  007E                     wtemp0	set	126


Data Sizes:
    Strings     1342
    Constant    10
    Data        5
    BSS         127
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      59
    BANK1            80     46      74
    BANK3            96     70      95
    BANK2            96     26      90

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 25
		 -> choice@duty_541(BANK3[10]), choice@duty_534(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 
		 -> content(BANK1[25]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 25
		 -> choice@duty_541(BANK3[10]), choice@duty_534(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 
		 -> content(BANK1[25]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), 
		 -> STR_41(CODE[2]), STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 25
		 -> content(BANK1[25]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_58(CODE[27]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_60(CODE[2]), strBuffer(BANK3[25]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    memcmp@s2	PTR const void  size(2) Largest target is 10
		 -> STR_49(CODE[7]), STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[7]), 
		 -> STR_43(CODE[5]), STR_40(CODE[5]), STR_36(CODE[6]), 

    memcmp@s1	PTR const void  size(1) Largest target is 25
		 -> content(BANK1[25]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 10
		 -> choice@duty_541(BANK3[10]), choice@duty_534(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_70(CODE[3]), STR_68(CODE[3]), STR_66(CODE[3]), STR_64(CODE[3]), 
		 -> STR_62(CODE[3]), STR_59(CODE[3]), STR_53(CODE[3]), STR_52(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 25
		 -> strBuffer(BANK3[25]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK1[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    USARTWriteLine@str	PTR const unsigned char  size(2) Largest target is 94
		 -> STR_72(CODE[7]), STR_71(CODE[35]), status@output(BANK3[25]), STR_57(CODE[7]), 
		 -> STR_56(CODE[35]), STR_55(CODE[7]), STR_54(CODE[35]), strBuffer(BANK3[25]), 
		 -> STR_50(CODE[28]), STR_35(CODE[94]), STR_34(CODE[19]), STR_33(CODE[34]), 
		 -> STR_32(CODE[19]), STR_31(CODE[19]), STR_30(CODE[56]), STR_29(CODE[19]), 
		 -> STR_28(CODE[19]), STR_27(CODE[74]), STR_26(CODE[19]), STR_25(CODE[19]), 
		 -> STR_24(CODE[43]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[34]), 
		 -> STR_20(CODE[19]), STR_19(CODE[28]), STR_18(CODE[70]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[82]), STR_14(CODE[19]), STR_13(CODE[21]), 
		 -> STR_12(CODE[83]), STR_11(CODE[19]), STR_10(CODE[18]), STR_9(CODE[85]), 
		 -> STR_8(CODE[19]), STR_7(CODE[15]), STR_6(CODE[88]), STR_5(CODE[19]), 
		 -> STR_4(CODE[57]), STR_3(CODE[48]), STR_2(CODE[93]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 94
		 -> STR_72(CODE[7]), STR_71(CODE[35]), STR_69(CODE[8]), STR_67(CODE[9]), 
		 -> STR_65(CODE[9]), STR_63(CODE[22]), STR_61(CODE[22]), status@output(BANK3[25]), 
		 -> STR_57(CODE[7]), STR_56(CODE[35]), STR_55(CODE[7]), STR_54(CODE[35]), 
		 -> strBuffer(BANK3[25]), STR_51(CODE[2]), STR_50(CODE[28]), STR_35(CODE[94]), 
		 -> STR_34(CODE[19]), STR_33(CODE[34]), STR_32(CODE[19]), STR_31(CODE[19]), 
		 -> STR_30(CODE[56]), STR_29(CODE[19]), STR_28(CODE[19]), STR_27(CODE[74]), 
		 -> STR_26(CODE[19]), STR_25(CODE[19]), STR_24(CODE[43]), STR_23(CODE[19]), 
		 -> STR_22(CODE[19]), STR_21(CODE[34]), STR_20(CODE[19]), STR_19(CODE[28]), 
		 -> STR_18(CODE[70]), STR_17(CODE[19]), STR_16(CODE[19]), STR_15(CODE[82]), 
		 -> STR_14(CODE[19]), STR_13(CODE[21]), STR_12(CODE[83]), STR_11(CODE[19]), 
		 -> STR_10(CODE[18]), STR_9(CODE[85]), STR_8(CODE[19]), STR_7(CODE[15]), 
		 -> STR_6(CODE[88]), STR_5(CODE[19]), STR_4(CODE[57]), STR_3(CODE[48]), 
		 -> STR_2(CODE[93]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    i1_USARTWriteString->i1_USARTWriteChar
    i1_USARTGotoNewLine->i1_USARTWriteChar

Critical Paths under _main in BANK0

    _sys->___awmod
    _sys->___lwmod
    _srand->___wmul
    _rand->___lmul
    ___awmod->_rand
    _strcspn->_strchr
    ___ftdiv->___awtoft
    _set_pwm->___ftmul
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _sprintf->___lwmod
    ___lwmod->_rand
    _help->_USARTWriteLine
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_USARTWriteChar
    _USARTGotoNewLine->_USARTWriteChar
    _atoi->___wmul

Critical Paths under _ISR in BANK0

    _ISR->i1_acquire
    i1_acquire->i1_sprintf

Critical Paths under _main in BANK1

    _main->_getData
    _getData->_choice
    _choice->_sys
    _sys->_set_pwm
    _step->_set_pwm
    _stop->_set_pwm
    _status->___fttol
    _adReadA0->_sprintf
    _run->_set_pwm
    _set_pwm->___fttol
    ___fttol->___ftmul
    _acquire->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _getData->_choice
    _choice->_status

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    _getData->_choice

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  117774
                          _USARTInit
                   _USARTWriteString
                            _getData
                               _help
                               _init
                               _stop
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getData                                              5     5      0  105258
                                             41 BANK1      5     5      0
                 _USARTDataAvailable
                      _USARTReadData
                     _USARTWriteChar
                             _choice
 ---------------------------------------------------------------------------------
 (2) _choice                                              69    69      0  105006
                                             36 BANK1      5     5      0
                                             32 BANK3     38    38      0
                                              0 BANK2     26    26      0
                   _USARTGotoNewLine
                     _USARTWriteLine
                   _USARTWriteString
                            _acquire
                               _atoi
                               _help
                             _memcmp
                                _run
                             _status
                               _step
                               _stop
                            _strcspn
                             _strlen
                                _sys
 ---------------------------------------------------------------------------------
 (3) _sys                                                  8     6      2   17432
                                             28 BANK1      8     6      2
                 _USARTDataAvailable
                   _USARTGotoNewLine
                     _USARTWriteLine
                   _USARTWriteString
                            ___awmod
                            ___lwmod
                             ___wmul
                               _atoi (ARG)
                               _rand
                           _sampling
                            _set_pwm
                            _sprintf
                              _srand
 ---------------------------------------------------------------------------------
 (4) _srand                                                2     0      2     108
                                             27 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     290
                                             34 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     290
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     741
                                             41 BANK0      1     1      0
                                              0 BANK1      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     424
                                             21 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     5      2    1181
                                             27 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               6     2      4     278
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _step                                                 6     0      6   24615
                                             28 BANK1      6     0      6
                     _USARTWriteLine
                            _acquire
                            _set_pwm
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 0     0      0    6755
                            _set_pwm
 ---------------------------------------------------------------------------------
 (3) _status                                              32    32      0   21093
                                              0 BANK3     32    32      0
                   _USARTGotoNewLine
                     _USARTWriteLine
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           _adReadA0
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               5     3      2     219
                                             21 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _strcat                                               5     3      2     363
                                             21 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _adReadA0                                             2     2      0    3673
                                             21 BANK1      2     2      0
                   _USARTWriteString
                           _sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2978
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _run                                                  2     0      2   15182
                                             28 BANK1      2     0      2
                     _USARTWriteLine
                            _acquire
                               _atoi (ARG)
                            _set_pwm
 ---------------------------------------------------------------------------------
 (2) _set_pwm                                              4     2      2    6755
                                             24 BANK1      4     2      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     525
                                             10 BANK1     14    10      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3200
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2691
                                             29 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2404
                                             21 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _acquire                                              2     2      0    3704
                                             21 BANK1      2     2      0
                 _USARTDataAvailable
                   _USARTGotoNewLine
                   _USARTWriteString
                           _sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             24    18      6    2511
                                              5 BANK1     16    10      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     540
                                             41 BANK0      1     1      0
                                              0 BANK1      5     1      4
                            ___lwdiv (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                             21 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _sampling                                             3     1      2       0
                                             21 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _USARTDataAvailable                                   1     1      0       0
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _memcmp                                               7     3      4    1470
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _help                                                 0     0      0    4578
                   _USARTGotoNewLine
                     _USARTWriteLine
 ---------------------------------------------------------------------------------
 (2) _USARTWriteLine                                       2     0      2    4547
                                             24 BANK0      2     0      2
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2    1097
                                             22 BANK0      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTGotoNewLine                                     0     0      0      31
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2    1009
                                             27 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     444
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _USARTReadData                                        2     2      0      23
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      86
                                             21 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  5     5      0    1213
                                             16 BANK0      5     5      0
                   _USARTHandleRxInt
                          i1_acquire
 ---------------------------------------------------------------------------------
 (9) i1_acquire                                            2     2      0    1190
                                             14 BANK0      2     2      0
               i1_USARTDataAvailable
                 i1_USARTGotoNewLine
                 i1_USARTWriteString
                         i1_sampling
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (10) i1_sprintf                                          22    18      4     928
                                              0 BANK0     14    10      4
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (10) i1_sampling                                          3     1      2       0
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (10) i1_USARTWriteString                                  2     0      2     166
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (10) i1_USARTGotoNewLine                                  0     0      0      31
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (11) i1_USARTWriteChar                                    1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_USARTDataAvailable                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTInit
   _USARTWriteString
     _USARTWriteChar
   _getData
     _USARTDataAvailable
     _USARTReadData
     _USARTWriteChar
     _choice
       _USARTGotoNewLine
         _USARTWriteChar
       _USARTWriteLine
         _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
       _USARTWriteString
         _USARTWriteChar
       _acquire
         _USARTDataAvailable
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
         _sampling
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
       _atoi
         ___wmul
         _isdigit
       _help
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
       _memcmp
       _run
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _acquire
           _USARTDataAvailable
           _USARTGotoNewLine
             _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
         _atoi (ARG)
           ___wmul
           _isdigit
         _set_pwm (ARG)
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _status
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _adReadA0
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
         _strcat
         _strcpy
       _step
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _acquire
           _USARTDataAvailable
           _USARTGotoNewLine
             _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
         _set_pwm
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
         _stop
           _set_pwm
             ___awtoft
               ___ftpack
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
       _stop
         _set_pwm
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _strcspn
         _strchr
       _strlen
       _sys
         _USARTDataAvailable
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
         ___awmod
           _rand (ARG)
             ___lmul
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
         ___wmul
         _atoi (ARG)
           ___wmul
           _isdigit
         _rand (ARG)
           ___lmul
         _sampling (ARG)
         _set_pwm (ARG)
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _sprintf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
         _srand (ARG)
           ___wmul (ARG)
   _help
     _USARTGotoNewLine
       _USARTWriteChar
     _USARTWriteLine
       _USARTWriteChar
       _USARTWriteString
         _USARTWriteChar
   _init
   _stop
     _set_pwm
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _ISR (ROOT)
   _USARTHandleRxInt
   i1_acquire
     i1_USARTDataAvailable
     i1_USARTGotoNewLine
       i1_USARTWriteChar
     i1_USARTWriteString
       i1_USARTWriteChar
     i1_sampling
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     46      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     1A      5A      11       93.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      4A       7       92.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     14C      12        0.0%
ABS                  0      0     14C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 20 23:05:55 2018

                            pc 0002                    __CFG_CP$OFF 0000                             l31 11AC  
                           l38 1C61                             fsr 0004            ___wmul@multiplicand 0037  
           USARTInit@baud_rate 0035                            l321 14D2                            l340 1CBA  
                          l660 134B                            l900 1DCF                            l477 1D72  
                          l661 1353                            l653 1336                            l744 1451  
         ??_USARTDataAvailable 0035                            l854 10A8                            _GIE 005F  
                          _RB1 0031                            _PR2 0092                   __CFG_CPD$OFF 0000  
                          _ISR 10E9                 ?_USARTReadData 0070                            fsr0 0004  
                          _pwm 00CE                            _run 1025                            _sys 08F9  
                          indf 0000                   ___awmod@sign 00A5                   __CFG_FOSC$HS 0000  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 00A4  
                 ___ftdiv@sign 00A9                           l3061 1D4A                           l3071 1D64  
                         l3067 1D5C                           l4019 1D6A                           l4203 10DD  
                         l4115 16B3                           l4107 1690                           l4051 1263  
                         l4213 1EAD                           l4039 1C9D                           l4207 10E6  
                         l4303 1041                           l4215 1EB7                           l4063 1270  
                         l4055 126A                           l3281 1184                           l4233 1376  
                         l4225 1DB2                           l4065 1282                           l4073 129B  
                         l4401 0D13                           l3275 117E                           l4251 1395  
                         l4235 136F                           l4219 1ED5                           l4227 1DBF  
                         l4323 096D                           l3277 1180                           l3285 1189  
                         l4261 13D8                           l4253 1399                           l4245 138F  
                         l4237 137B                           l4093 162D                           l4077 12A3  
                         l4069 1290                           l4317 0913                           l4405 0D33  
                         l3279 1182                           l4255 13C7                           l4087 160A  
                         l4351 0A1D                           l4431 0E65                           l4415 0D75  
                         l4407 0C3E                           l3641 1308                           l3721 073B  
                         l3713 0720                           l4433 0DDE                           l4409 0D3C  
                         l4417 0D96                           l4513 12E6                           l3811 1F19  
                         l4347 0A10                           l4451 0F55                           l4435 0E6E  
                         l4427 0E45                           l3813 1F2B                           l3821 1F44  
                         l3645 130F                           l3725 075D                           l3709 06FE  
                         l3741 13F7                           l4365 0833                           l4269 147C  
                         l4461 0F92                           l4453 0ECE                           l4437 0E86  
                         l3831 1DF3                           l3911 1791                           l3655 133B  
                         l3647 131B                           l4359 081B                           l4455 0F5E  
                         l4447 0F35                           l4721 119D                           l3817 1F39  
                         l3905 1764                           l3657 1345                           l3649 1320  
                         l3681 100C                           l3761 1439                           l4473 0FE6  
                         l4465 0FAE                           l4457 0F76                           l4393 0CA5  
                         l4723 11A2                           l3691 067E                           l4299 1037  
                         l4475 0FF1                           l4725 11A7                           l3925 17A4  
                         l3917 17A0                           l3773 1462                           l4469 0FCA  
                         l4397 0CC5                           l4637 1E6F                           l4719 1198  
                         l3855 1DAA                           l3847 1D9D                           l3839 1D90  
                         l3927 16F5                           l3767 1446                           l3759 1429  
                         l3943 106E                           l3929 17FB                           l3697 06A1  
                         l3769 1454                           l3795 1FF0                           l3787 1FCC  
                         l3883 1723                           l3971 07A9                           l3947 1084  
                         l3789 1FDA                           l3799 1FFB                           l3889 1747  
                         l3993 1E1F                           l3899 175E                           l3995 1E2A  
                         l3987 1CE2                           l3999 1E32                           STR_1 0658  
                         ?_run 00BC                           STR_2 011D                           STR_3 03CD  
                         STR_4 035C                           STR_5 0527                           STR_6 017A  
                         STR_7 05F7                           STR_8 053A                           STR_9 01D2  
                         ?_sys 00BC                           u4215 133E                           u5015 1273  
                         u5105 166B                           u4315 06BB                           u5115 1691  
                         u5035 1288                           u4405 075E                           u4341 0711  
                         u4325 06D9                           u5125 16A4                           u5045 1291  
                         u4342 071C                           u4255 135A                           u4175 1314  
                         u4415 0767                           u5135 16B4                           u4505 1448  
                         u5305 1030                           u4195 132F                           u4355 0721  
                         _PEIE 005E                           u4365 072A                           u4445 13FE  
                         u5325 0967                           u5405 0CBE                           u4615 1F1C  
                         u4391 074E                           u5095 164D                           u5415 0CFA  
                         u4392 0759                           u4545 1FCF                           u5505 0F1C  
                         u5425 0D2C                           u4635 1F31                           u4475 142A  
                         u5355 0819                           u5515 0F4E                           u5435 0C57  
                         _RCIE 0465                           _RCIF 0065                           i1l53 11C4  
                         u4565 1FDB                           u4645 1F3A                           u5365 0831  
                         u5285 1476                           u5525 0EE7                           u5605 12D6  
                         i1l38 1C57                           u4575 1FE7                           u4735 1787  
                         u4815 1086                           u4585 1FF1                           u4825 108E  
                         u5465 0E2C                           u4915 1168                           u5475 0E5E  
                         u5395 0C8C                           u5485 0DF7                           u4935 1D73  
                         u5807 1CB4                           u4945 1D7A                           _TMR0 0001  
                 __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 1C66         __end_of_USARTWriteLine 1CDB  
                         _help 0A32                           _atoi 136C                           _main 1E45  
                 ___ftpack@arg 0035                           _init 1EDA                           _rand 112F  
                 ___ftpack@exp 0038                           _step 146B                           btemp 007E  
                         _stop 1C82                     i1_sampling 1C9F              USARTReadData@data 0036  
                __CFG_BOREN$ON 0000                           start 0012                   ___ftmul@cntr 00A8  
                 ___ftmul@sign 00A9                          ??_ISR 0030                   ___fttol@exp1 00B7  
                 ___fttol@lval 00B3                          ??_run 004A                          ??_sys 00BE  
            ?_USARTHandleRxInt 0070                          ?_help 0070                          ?_atoi 003B  
                        ?_main 0070                          ?_init 0070                          ?_rand 0042  
           ??_USARTHandleRxInt 0070                          STR_10 05E5                          STR_11 054D  
                        STR_20 0586                          STR_12 0227                          STR_13 04B3  
                        STR_21 0428                          STR_14 0560                          STR_22 04DB  
                        STR_30 0395                          STR_23 0599                          STR_31 0501  
                        STR_15 027A                          STR_40 0647                          STR_32 05D2  
                        STR_16 04C8                          STR_24 03FD                          STR_41 064A  
                        STR_33 0428                          STR_17 0573                          STR_25 04EE  
                __CFG_WDTE$OFF 0000                          STR_34 04DB                          STR_42 060E  
                        STR_26 05AC                          STR_50 044A                          STR_18 0316  
                        STR_51 0658                          STR_43 064C                          STR_19 0466  
                        STR_27 02CC                          STR_35 011C                          STR_44 064A  
                        STR_60 0654                          STR_52 0651                          STR_36 0641  
                        STR_28 0514                __end_of___awmod 12A8                          STR_37 064A  
                        STR_45 060E                          STR_53 0651                          STR_29 05BF  
                        STR_61 049D                          STR_54 0405                          STR_70 0651  
                        STR_62 0651                          STR_38 0656                          STR_46 063A  
                        STR_63 049D                          STR_39 060E                          STR_55 063A  
                        STR_71 0405                          STR_47 0622                          STR_72 063A  
                        STR_56 0405                          STR_64 0651                          STR_48 0606  
                        STR_57 063A                          STR_49 0633                          STR_65 0610  
                        STR_66 0651                          STR_58 0482                          STR_59 0651  
                        STR_67 0619                          STR_68 0651                          STR_69 062B  
    __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 16EE                          ?_step 00BC  
             USARTWriteChar@ch 0035                          ?_stop 0070                __end_of___ftmul 07A0  
              __end_of___fttol 146B                          _T2CON 0012                __end_of___lwdiv 2000  
                        i1l340 1CA7                          i1l252 10F7                          i1l253 1122  
              __end_of___lwmod 1F49                          _RCREG 001A                          _SPBRG 0099  
                        _PORTA 0005                          _PORTB 0006                          _PORTC 0007  
                        _PORTD 0008                          _TRISA 0085                          _TRISB 0086  
                        _TRISC 0087                          _TRISD 0088                          _TXREG 0019  
                        _UQEnd 0059                __end_of_acquire 07FA                __end_of_getData 12FE  
          ___lmul@multiplicand 0039                  __CFG_PWRTE$ON 0000             i1___lwmod@dividend 007A  
                ___awtoft@sign 0042                __end_of_dpowers 011C                          _count 0051  
              __end_of_isdigit 1C9F                          _randx 0054                  ___ftpack@sign 0039  
                        atoi@a 0040                          _srand 1C6E                          atoi@s 0042  
                        pclath 000A                __end_of_set_pwm 00FD             __size_of_USARTInit 0048  
              ?_USARTWriteChar 0070                ?_USARTWriteLine 0038                          status 0003  
                        wtemp0 007E                __end_of_sprintf 1800                __end_of_strcspn 1EDA  
             i1acquire@valueAD 002E             __size_ofi1___lwdiv 003C             __size_ofi1___lwmod 0032  
           __size_ofi1_acquire 0050                __initialization 0015                   __end_of_help 0BDE  
                 __end_of_atoi 13DD                   __end_of_main 1E75                   __end_of_init 1F11  
                 __end_of_rand 1176                   __end_of_step 14FE                   __end_of_stop 1C8F  
                   i1sprintf@c 002D                     i1sprintf@f 0020                ??_USARTReadData 0035  
                       ??_help 003A                         ??_atoi 003D                         ??_main 004A  
                ___fttol@sign1 00B2                         ??_init 0035                         ??_rand 0044  
                       ??_step 004A                         ??_stop 0049             __size_ofi1_sprintf 00E8  
           i1_USARTWriteString 1D20               __end_of_adReadA0 1FC2                         _ADCON0 001F  
                       _ADCON1 009F                         _ADRESH 001E                         _ADRESL 009E  
                       _CCPR1L 0015                         _CCPR2L 001B                         ?_srand 003B  
             __end_of___awtoft 1025               __end_of___ftpack 136C            ?i1_USARTWriteString 0071  
                       i1l3201 1D1E                         i1l3025 1F75                         i1l3017 1F51  
                       i1l3041 1E7B                         i1l3019 1F5F                         i1l3043 1E89  
                       i1l3051 1EA2                         i1l3029 1F80                         i1l3047 1E97  
                       i1l3223 152B                         i1l3323 11F6                         i1l3315 11E4  
                       i1l3307 11C5                         i1l3251 1589                         i1l3325 11FA  
                       i1l3245 1564                         i1l3229 1547                         i1l3319 11EE  
                       i1l3239 155E                         i1l3193 1D11                         i1l3185 1D04  
                       i1l3265 159C                         i1l3257 1598                         i1l3267 1505  
                       i1l3269 15E1                         i1l4531 1210                         i1l4617 111A  
                       i1l4485 1D20                         _INTCON 000B                         u330_25 1F6C  
                       u331_25 1F76                         u334_25 1E7E                         u327_25 1F54  
                       u336_25 1E8F                         u329_25 1F60                         u337_25 1E98  
                       u369_25 157F                         u378_25 11E2                         u581_27 1CA1  
                       u577_25 110B                    ?i1_sampling 0070                  i1sprintf@flag 0028  
                       _URBuff 0110                  i1sprintf@prec 0029              USARTWriteLine@str 0038  
            ?_USARTGotoNewLine 0070                         ___lmul 1064                         ___wmul 1D66  
                    ??___awmod 0049                      ??___ftdiv 00A0                      ??___ftmul 00A0  
                       _choice 0BDE                      ??___fttol 00AE                      ??___lwdiv 0039  
         ??i1_USARTWriteString 0073                      ??___lwmod 0049                         _buffer 00D0  
           ??_USARTGotoNewLine 0036       __end_of_USARTWriteString 1E18                         _memcmp 10A5  
                    ??_acquire 004A                ___awmod@divisor 00A0                      ??_getData 00C9  
              ___awmod@counter 00A4                 choice@duty_541 01C4                 choice@duty_534 01BA  
            __end_of_USARTInit 11BE                         _status 080C                         _strcat 1E18  
                       _strchr 1DCF                         _strcpy 1CDB                         _strlen 1DAC  
        ___ftmul@f3_as_product 00A5               __end_of_sampling 1CC5              __end_ofi1___lwdiv 1F85  
            __end_ofi1___lwmod 1EA7                      ??_isdigit 0035                         saved_w 007E  
            __end_ofi1_acquire 1257                      ??_set_pwm 00BA                         srand@x 003B  
__size_ofi1_USARTDataAvailable 0023                      ??_sprintf 00AB                      ??_strcspn 003D  
      __end_of__initialization 0053              __end_ofi1_sprintf 15E6                     ___ftdiv@f1 0046  
                   ___ftdiv@f2 0043                     ___ftdiv@f3 00A5                     ___awtoft@c 003D  
                 status@output 0190                     ___ftmul@f1 0043                     ___ftmul@f2 0046  
  __size_ofi1_USARTGotoNewLine 000B                     ___fttol@f1 00AA                 __pcstackCOMMON 0070  
           i1USARTWriteChar@ch 0070                   __pidataBANK0 07FA                  __end_of_srand 1C77  
             i1_USARTWriteChar 1C56            __size_ofi1_sampling 0011                    i1sprintf@ap 0027  
                  i1sprintf@sp 002C                        ??_srand 003D                     __pbssBANK0 004A  
                   __pbssBANK1 00CE                     __pbssBANK2 0110                     __pbssBANK3 01D6  
                   __pmaintext 1E45                        ?___lmul 0035                        ?___wmul 0035  
                    ?_adReadA0 0070                        ?_choice 0070                     __pintentry 0004  
                      _CCP1CON 0017                        _CCP2CON 001D                        ?_memcmp 0035  
               ___lmul@product 003E                      ?___awtoft 003D                      ?___ftpack 0035  
                      ?_status 0070                        ?_strcat 0035                        ?_strchr 0035  
                      ?_strcpy 0035                        ?_strlen 0035    __size_of_USARTDataAvailable 0023  
             ??_USARTWriteChar 0035               ??_USARTWriteLine 003A             USARTWriteInt@F1155 004A  
    __size_of_USARTHandleRxInt 0049                     __stringtab 0100                        _UQFront 005A  
                    ?_sampling 0035                     ??_adReadA0 004A          i1USARTWriteString@str 0071  
              __size_of___lmul 0041                        ___awmod 1257                        ___ftdiv 15E6  
              __size_of___wmul 0023                        ___ftmul 065A                        ___fttol 13DD  
                      ___lwdiv 1FC2                        ___lwmod 1F11                __size_of_choice 0422  
              __size_of_memcmp 0044                        _acquire 07A0                     ??___awtoft 0040  
                   ??___ftpack 003A                        _getData 12A8                        __ptext1 1EDA  
                      __ptext2 12A8                        __ptext3 0BDE                        __ptext4 08F9  
                      __ptext5 1C6E                        __ptext6 112F                        __ptext7 1064  
                      __ptext8 1257                        __ptext9 1DAC                __size_of_status 00ED  
              __size_of_strcat 002D                        _content 00D1                __size_of_strchr 0024  
              __size_of_strcpy 0022                __size_of_strlen 0023                   __size_of_ISR 0046  
                      _dpowers 0112              i1___lwdiv@divisor 0070                        _isdigit 1C8F  
            i1___lwdiv@counter 0077                   __size_of_run 003F                   __size_of_sys 0139  
             ___awmod@dividend 00A2                        choice@i 0168                        _set_pwm 0057  
                      _sprintf 16EE                        clrloop0 1C67                        _strcspn 1EA7  
         end_of_initialization 0053                        memcmp@n 0037                     choice@duty 01B0  
                   choice@time 0150                   ??i1_sampling 0072                     ??_sampling 0037  
                      run@duty 00BC                      _RCSTAbits 0018                   __pstringtext 0100  
                      status@i 01AE                        sys@duty 00BC                        strlen@s 0035  
            ?_USARTWriteString 0036          __end_of_USARTReadData 1D66             ??_USARTWriteString 0038  
                   _stepEnable 0053             __end_ofi1_sampling 1CB0                      _USARTInit 1176  
    __size_of_USARTGotoNewLine 000B                      i1___lwdiv 1F49                      i1___lwmod 1E75  
                    i1_acquire 1207                    _CCP1CONbits 0017                    ___ftdiv@exp 00A8  
     __end_ofi1_USARTWriteChar 1C5E                    _CCP2CONbits 001D                      _TXSTAbits 0098  
                  ___ftmul@exp 00A4   __end_ofi1_USARTDataAvailable 1D20                      i1_sprintf 14FE  
               __end_of___lmul 10A5    __size_ofi1_USARTWriteString 0023                 __end_of___wmul 1D89  
               __end_of_choice 1000              i1___lwmod@divisor 0078                 __end_of_memcmp 10E9  
            i1___lwmod@counter 007D                 __end_of_status 08F9                 __end_of_strcat 1E45  
               __end_of_strchr 1DF3                 __end_of_strcpy 1CFD                 __end_of_strlen 1DCF  
          start_initialization 0015                     ?_USARTInit 0035                    __end_of_ISR 112F  
                  __end_of_run 1064                    __end_of_sys 0A32                     ?i1___lwdiv 0070  
                   ?i1___lwmod 0078               _USARTHandleRxInt 11BE                     ?i1_acquire 0070  
   __end_ofi1_USARTGotoNewLine 1C82                   i1sprintf@val 002A                     ?i1_sprintf 0020  
                     ??___lmul 003D                       ??___wmul 0039                       ??_choice 00C4  
                  __pdataBANK0 0054                       ??_memcmp 0039                  choice@secondP 0162  
            __size_of_adReadA0 003D                       ??_status 004A                       ??_strcat 0037  
                     ??_strchr 0039                       ??_strcpy 0037                       ??_strlen 0037  
               set_pwm@percent 00B8              __size_of___awtoft 0025              __size_of___ftpack 006E  
                 _max_counters 004F                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0                  __pcstackBANK2 0150                  __pcstackBANK3 0190  
                  sys@max_duty 00C2                    _acquirement 0058                    sprintf@flag 00AF  
                  sprintf@prec 00B0                      __pnvBANK0 0059               ___lwdiv@dividend 0037  
              adReadA0@valueAD 00B5              __size_of_sampling 0015                       ?___awmod 00A0  
                     ?___ftdiv 0043                       ?___ftmul 0043                       ?___fttol 00AA  
                     ?___lwdiv 0035                       ?___lwmod 00A0     __end_of_USARTDataAvailable 1DAC  
                     ?_acquire 0070                       ?_getData 0070                       ?_isdigit 0070  
                  ??_USARTInit 0037               _USARTGotoNewLine 0801                       ?_set_pwm 00B8  
             ___lwdiv@quotient 003B                    ??i1___lwdiv 0074                    ??i1___lwmod 007C  
         i1_USARTDataAvailable 1CFD                       ?_sprintf 00A5                       ?_strcspn 003B  
               __size_of_srand 0009                    ??i1_acquire 007E              interrupt_function 0004  
               ___wmul@product 0039                      clear_ram0 1C66                       _PIR1bits 000C  
                  ??i1_sprintf 0024                      _strBuffer 01D6                     _ADCON0bits 001F  
                  __stringbase 0112              ___wmul@multiplier 0035          ?i1_USARTDataAvailable 0070  
            ___lmul@multiplier 0035      __size_of_USARTWriteString 0025              ?i1_USARTWriteChar 0070  
      __size_of_USARTWriteChar 0008        __size_of_USARTWriteLine 0016             ??i1_USARTWriteChar 0070  
                 choice@firstP 015A                   choice@duty_i 0160                       _adReadA0 1F85  
                 choice@time_1 01D4                   choice@thirdP 01CE       __end_of_USARTHandleRxInt 1207  
             __size_of___awmod 0051               __size_of___ftdiv 0108               __size_of___ftmul 0146  
             __size_of___fttol 008E                     status@duty 01AC               __size_of___lwdiv 003E  
             __size_of___lwmod 0038                       ___awtoft 1000                       ___ftpack 12FE  
           __end_of__stringtab 0112              choice@secondP_544 01D2              choice@secondP_537 01D0  
             __size_of_acquire 005A                    _isdigit$823 0035               __size_of_getData 0056  
                   sys@valueAD 00C0                     sprintf@val 00B1                 acquire@valueAD 00B5  
                   strcat@from 0035               __size_of_isdigit 0010                ___lwdiv@divisor 0035  
              ___lwdiv@counter 003A                       __ptext10 1EA7                       __ptext11 1DCF  
                     __ptext20 0057                       __ptext12 146B                       __ptext21 13DD  
                     __ptext13 1C82                       __ptext30 1D89                       __ptext22 065A  
                     __ptext14 080C                       __ptext31 10A5                       __ptext23 1000  
                     __ptext15 1CDB                       __ptext40 1D43                       __ptext32 0A32  
                     __ptext24 12FE                       __ptext16 1E18                       __ptext41 1176  
                     __ptext33 1CC5                       __ptext25 07A0                       __ptext17 1F85  
                     __ptext50 1C56                       __ptext42 10E9                       __ptext34 1DF3  
                     __ptext26 16EE                       __ptext18 15E6                       __ptext51 1CFD  
                     __ptext43 1207                       __ptext35 0801                       __ptext27 1F11  
                     __ptext19 1025                       __ptext52 11BE                       __ptext44 14FE  
                     __ptext36 1C5E                       __ptext28 1FC2                       __ptext45 1E75  
                     __ptext37 136C                       __ptext29 1CB0                       __ptext46 1F49  
                     __ptext38 1C8F                       __ptext47 1C9F                       __ptext39 1D66  
                     __ptext48 1D20                       __ptext49 1C77               __size_of_set_pwm 00A6  
             __size_of_sprintf 0112               __size_of_strcspn 0033             i1___lwdiv@dividend 0072  
                   strcpy@from 0035               choice@firstP_542 015E               choice@firstP_535 015C  
                __size_of_help 01AC                  __size_of_atoi 0071                  __size_of_main 0030  
                __size_of_init 0037                  __size_of_rand 0047                  __size_of_step 0093  
                __size_of_stop 000D                       getData@i 00CC                       getData@n 00CA  
       __size_of_USARTReadData 0023                       _sampling 1CB0     __end_ofi1_USARTWriteString 1D43  
                     atoi@sign 003F             i1_USARTGotoNewLine 1C77             i1___lwdiv@quotient 0075  
                  getData@data 00CB                    choice@i_546 0166                    choice@i_539 0164  
                   _INTCONbits 000B                       memcmp@s1 003B                       memcmp@s2 0035  
       ??i1_USARTDataAvailable 0070            ?i1_USARTGotoNewLine 0070                       isdigit@c 0036  
                    status@aux 01A9                       intlevel1 0000                      sprintf@ap 00AE  
                    sprintf@sp 00B3                      strchr@chr 0037               ___lwmod@dividend 00A2  
                    strchr@ptr 0035                      strcspn@s1 0041                      strcspn@s2 003B  
                    stringcode 010A           ??i1_USARTGotoNewLine 0071       __end_of_USARTGotoNewLine 080C  
          USARTWriteString@str 0036                       step@duty 00BC                       step@time 00BE  
                   _OPTION_REG 0081                       sprintf@c 00B4                       sprintf@f 00A5  
                     strcat@cp 0039                       strcat@to 0038                ___lwmod@divisor 00A0  
                _USARTReadData 1D43                       strcpy@cp 0039                       strlen@cp 0039  
                     strcpy@to 0038                ___lwmod@counter 00A4                       strcspn@i 003F  
         USARTHandleRxInt@data 0074                       stringtab 0100             _USARTDataAvailable 1D89  
             _USARTWriteString 1DF3            ?_USARTDataAvailable 0070                 _USARTWriteChar 1C5E  
               _USARTWriteLine 1CC5  
